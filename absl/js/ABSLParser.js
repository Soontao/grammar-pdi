// Generated from ./ABSLParser.g4 by ANTLR 4.7.2
// jshint ignore: start
var antlr4 = require("antlr4/index");
var ABSLParserListener = require("./ABSLParserListener").ABSLParserListener;
var ABSLParserVisitor = require("./ABSLParserVisitor").ABSLParserVisitor;

var grammarFileName = "ABSLParser.g4";


var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
  "\u0003\u0081\u03e3\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
  "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
  "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
  "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
  "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
  "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
  "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
  "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
  "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
  "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
  "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004",
  "2\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u0004",
  "9\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004",
  "@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004",
  "G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0003\u0002\u0005\u0002",
  "\u0098\n\u0002\u0003\u0002\u0005\u0002\u009b\n\u0002\u0003\u0002\u0003",
  "\u0002\u0003\u0003\u0003\u0003\u0003\u0004\u0003\u0004\u0003\u0004\u0003",
  "\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003",
  "\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003",
  "\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0005\u0004\u00b5",
  "\n\u0004\u0003\u0005\u0003\u0005\u0005\u0005\u00b9\n\u0005\u0003\u0005",
  "\u0003\u0005\u0003\u0006\u0006\u0006\u00be\n\u0006\r\u0006\u000e\u0006",
  "\u00bf\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0005",
  "\u0007\u00c7\n\u0007\u0003\u0007\u0005\u0007\u00ca\n\u0007\u0005\u0007",
  "\u00cc\n\u0007\u0003\b\u0005\b\u00cf\n\b\u0003\b\u0003\b\u0005\b\u00d3",
  "\n\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0005\b\u00da\n\b\u0003",
  "\t\u0003\t\u0003\t\u0003\t\u0007\t\u00e0\n\t\f\t\u000e\t\u00e3\u000b",
  "\t\u0003\t\u0003\t\u0005\t\u00e7\n\t\u0005\t\u00e9\n\t\u0003\t\u0003",
  "\t\u0003\n\u0003\n\u0003\n\u0003\u000b\u0003\u000b\u0003\u000b\u0005",
  "\u000b\u00f3\n\u000b\u0003\f\u0003\f\u0003\f\u0003\r\u0003\r\u0003\r",
  "\u0005\r\u00fb\n\r\u0003\u000e\u0003\u000e\u0003\u000e\u0005\u000e\u0100",
  "\n\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e",
  "\u0003\u000e\u0003\u000e\u0005\u000e\u0109\n\u000e\u0003\u000f\u0003",
  "\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0005\u000f\u0111",
  "\n\u000f\u0003\u000f\u0003\u000f\u0005\u000f\u0115\n\u000f\u0003\u0010",
  "\u0003\u0010\u0003\u0010\u0005\u0010\u011a\n\u0010\u0003\u0011\u0003",
  "\u0011\u0003\u0011\u0003\u0011\u0003\u0012\u0003\u0012\u0003\u0012\u0007",
  "\u0012\u0123\n\u0012\f\u0012\u000e\u0012\u0126\u000b\u0012\u0003\u0013",
  "\u0003\u0013\u0003\u0013\u0005\u0013\u012b\n\u0013\u0003\u0013\u0003",
  "\u0013\u0005\u0013\u012f\n\u0013\u0003\u0014\u0005\u0014\u0132\n\u0014",
  "\u0003\u0014\u0005\u0014\u0135\n\u0014\u0003\u0014\u0003\u0014\u0003",
  "\u0015\u0003\u0015\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0017\u0003",
  "\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0005",
  "\u0017\u0145\n\u0017\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018",
  "\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018",
  "\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018",
  "\u0003\u0018\u0003\u0018\u0005\u0018\u0159\n\u0018\u0003\u0018\u0003",
  "\u0018\u0005\u0018\u015d\n\u0018\u0003\u0018\u0003\u0018\u0005\u0018",
  "\u0161\n\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003",
  "\u0018\u0003\u0018\u0005\u0018\u0169\n\u0018\u0003\u0018\u0003\u0018",
  "\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0005\u0018",
  "\u0172\n\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0005\u0018\u0177",
  "\n\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018",
  "\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018",
  "\u0003\u0018\u0003\u0018\u0003\u0018\u0005\u0018\u0187\n\u0018\u0003",
  "\u0019\u0003\u0019\u0003\u001a\u0003\u001a\u0005\u001a\u018d\n\u001a",
  "\u0003\u001a\u0003\u001a\u0003\u001b\u0003\u001b\u0005\u001b\u0193\n",
  "\u001b\u0003\u001b\u0003\u001b\u0003\u001c\u0003\u001c\u0005\u001c\u0199",
  "\n\u001c\u0003\u001c\u0003\u001c\u0003\u001d\u0003\u001d\u0005\u001d",
  "\u019f\n\u001d\u0003\u001d\u0003\u001d\u0003\u001e\u0003\u001e\u0003",
  "\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001f\u0003\u001f\u0003",
  "\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003 \u0003 \u0005 \u01b1",
  "\n \u0003 \u0003 \u0005 \u01b5\n \u0005 \u01b7\n \u0003 \u0003 \u0003",
  "!\u0006!\u01bc\n!\r!\u000e!\u01bd\u0003\"\u0003\"\u0003\"\u0003\"\u0005",
  "\"\u01c4\n\"\u0003\"\u0003\"\u0005\"\u01c8\n\"\u0003\"\u0003\"\u0005",
  "\"\u01cc\n\"\u0003\"\u0005\"\u01cf\n\"\u0005\"\u01d1\n\"\u0003#\u0003",
  "#\u0005#\u01d5\n#\u0003#\u0005#\u01d8\n#\u0003$\u0003$\u0003$\u0003",
  "$\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0005%\u01e6",
  "\n%\u0003&\u0003&\u0003&\u0003&\u0005&\u01ec\n&\u0003&\u0005&\u01ef",
  "\n&\u0003\'\u0003\'\u0003\'\u0005\'\u01f4\n\'\u0003\'\u0005\'\u01f7",
  "\n\'\u0003\'\u0003\'\u0003(\u0003(\u0003(\u0003)\u0003)\u0003)\u0003",
  "*\u0005*\u0202\n*\u0003*\u0003*\u0005*\u0206\n*\u0003*\u0003*\u0003",
  "*\u0005*\u020b\n*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003+\u0003+\u0003",
  "+\u0003+\u0003,\u0003,\u0005,\u0218\n,\u0003,\u0003,\u0007,\u021c\n",
  ",\f,\u000e,\u021f\u000b,\u0003,\u0003,\u0003-\u0007-\u0224\n-\f-\u000e",
  "-\u0227\u000b-\u0003-\u0003-\u0003-\u0005-\u022c\n-\u0003-\u0003-\u0003",
  "-\u0003-\u0005-\u0232\n-\u0003.\u0005.\u0235\n.\u0003.\u0005.\u0238",
  "\n.\u0003.\u0003.\u0003.\u0005.\u023d\n.\u0003.\u0003.\u0003.\u0003",
  ".\u0003.\u0003.\u0005.\u0245\n.\u0003.\u0005.\u0248\n.\u0003.\u0003",
  ".\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0005.\u0252\n.\u0003.\u0005",
  ".\u0255\n.\u0003.\u0003.\u0003.\u0005.\u025a\n.\u0003.\u0003.\u0003",
  ".\u0003.\u0003.\u0005.\u0261\n.\u0003/\u0003/\u0003/\u0007/\u0266\n",
  "/\f/\u000e/\u0269\u000b/\u0003/\u0003/\u0005/\u026d\n/\u0003/\u0005",
  "/\u0270\n/\u00030\u00030\u00030\u00050\u0275\n0\u00031\u00031\u0003",
  "1\u00032\u00052\u027b\n2\u00033\u00063\u027e\n3\r3\u000e3\u027f\u0003",
  "4\u00034\u00034\u00034\u00035\u00075\u0287\n5\f5\u000e5\u028a\u000b",
  "5\u00035\u00055\u028d\n5\u00035\u00065\u0290\n5\r5\u000e5\u0291\u0003",
  "5\u00075\u0295\n5\f5\u000e5\u0298\u000b5\u00035\u00075\u029b\n5\f5\u000e",
  "5\u029e\u000b5\u00036\u00056\u02a1\n6\u00036\u00036\u00037\u00037\u0003",
  "7\u00037\u00077\u02a9\n7\f7\u000e7\u02ac\u000b7\u00057\u02ae\n7\u0003",
  "7\u00057\u02b1\n7\u00037\u00037\u00038\u00038\u00038\u00038\u00038\u0003",
  "8\u00038\u00038\u00038\u00038\u00038\u00058\u02c0\n8\u00038\u00058\u02c3",
  "\n8\u00038\u00038\u00038\u00058\u02c8\n8\u00038\u00038\u00038\u0003",
  "8\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u0003",
  "8\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00058\u02df\n8\u0003",
  "8\u00058\u02e2\n8\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u0005",
  "9\u02eb\n9\u0003:\u0003:\u0003:\u0003:\u0007:\u02f1\n:\f:\u000e:\u02f4",
  "\u000b:\u0003:\u0005:\u02f7\n:\u0005:\u02f9\n:\u0003:\u0003:\u0003;",
  "\u0005;\u02fe\n;\u0003;\u0003;\u0005;\u0302\n;\u0003<\u0003<\u0003<",
  "\u0007<\u0307\n<\f<\u000e<\u030a\u000b<\u0003=\u0003=\u0003=\u0003=",
  "\u0005=\u0310\n=\u0003=\u0003=\u0003=\u0003=\u0005=\u0316\n=\u0003=",
  "\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003",
  "=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003",
  "=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003",
  "=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0005=\u033f",
  "\n=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003",
  "=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003",
  "=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003",
  "=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003",
  "=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003",
  "=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003",
  "=\u0003=\u0003=\u0005=\u037f\n=\u0003=\u0003=\u0005=\u0383\n=\u0003",
  "=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0007=\u038e",
  "\n=\f=\u000e=\u0391\u000b=\u0003>\u0003>\u0003>\u0005>\u0396\n>\u0003",
  "?\u0003?\u0005?\u039a\n?\u0003?\u0003?\u0005?\u039e\n?\u0003?\u0003",
  "?\u0005?\u03a2\n?\u0003?\u0003?\u0003?\u0003?\u0003?\u0003?\u0005?\u03aa",
  "\n?\u0003?\u0003?\u0003?\u0003?\u0005?\u03b0\n?\u0003@\u0003@\u0003",
  "@\u0005@\u03b5\n@\u0003@\u0005@\u03b8\n@\u0003A\u0003A\u0003A\u0003",
  "A\u0003A\u0005A\u03bf\nA\u0003B\u0003B\u0003C\u0003C\u0003C\u0003C\u0003",
  "C\u0003C\u0003C\u0005C\u03ca\nC\u0003D\u0003D\u0003E\u0003E\u0003F\u0003",
  "F\u0005F\u03d2\nF\u0003G\u0003G\u0003G\u0005G\u03d7\nG\u0003H\u0003",
  "H\u0003I\u0003I\u0003I\u0003J\u0003J\u0003J\u0003K\u0003K\u0003K\u0002",
  "\u0003xL\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018",
  "\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|",
  "~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094",
  "\u0002\u000e\u0005\u0002QQllrr\u0005\u0002ooxxzz\u0003\u0002\u001a\u001c",
  "\u0003\u0002\u0016\u0017\u0003\u0002 \"\u0003\u0002#&\u0003\u0002\'",
  "*\u0003\u00020;\u0003\u0002?C\u0003\u0002DG\u0006\u0002HILWYacy\u0003",
  "\u0003\r\r\u0002\u045f\u0002\u0097\u0003\u0002\u0002\u0002\u0004\u009e",
  "\u0003\u0002\u0002\u0002\u0006\u00b4\u0003\u0002\u0002\u0002\b\u00b6",
  "\u0003\u0002\u0002\u0002\n\u00bd\u0003\u0002\u0002\u0002\f\u00cb\u0003",
  "\u0002\u0002\u0002\u000e\u00d9\u0003\u0002\u0002\u0002\u0010\u00db\u0003",
  "\u0002\u0002\u0002\u0012\u00ec\u0003\u0002\u0002\u0002\u0014\u00ef\u0003",
  "\u0002\u0002\u0002\u0016\u00f4\u0003\u0002\u0002\u0002\u0018\u00f7\u0003",
  "\u0002\u0002\u0002\u001a\u0108\u0003\u0002\u0002\u0002\u001c\u0114\u0003",
  "\u0002\u0002\u0002\u001e\u0119\u0003\u0002\u0002\u0002 \u011b\u0003",
  "\u0002\u0002\u0002\"\u011f\u0003\u0002\u0002\u0002$\u0127\u0003\u0002",
  "\u0002\u0002&\u0131\u0003\u0002\u0002\u0002(\u0138\u0003\u0002\u0002",
  "\u0002*\u013a\u0003\u0002\u0002\u0002,\u013d\u0003\u0002\u0002\u0002",
  ".\u0186\u0003\u0002\u0002\u00020\u0188\u0003\u0002\u0002\u00022\u018a",
  "\u0003\u0002\u0002\u00024\u0190\u0003\u0002\u0002\u00026\u0196\u0003",
  "\u0002\u0002\u00028\u019c\u0003\u0002\u0002\u0002:\u01a2\u0003\u0002",
  "\u0002\u0002<\u01a8\u0003\u0002\u0002\u0002>\u01ae\u0003\u0002\u0002",
  "\u0002@\u01bb\u0003\u0002\u0002\u0002B\u01d0\u0003\u0002\u0002\u0002",
  "D\u01d2\u0003\u0002\u0002\u0002F\u01d9\u0003\u0002\u0002\u0002H\u01e5",
  "\u0003\u0002\u0002\u0002J\u01e7\u0003\u0002\u0002\u0002L\u01f0\u0003",
  "\u0002\u0002\u0002N\u01fa\u0003\u0002\u0002\u0002P\u01fd\u0003\u0002",
  "\u0002\u0002R\u0201\u0003\u0002\u0002\u0002T\u0211\u0003\u0002\u0002",
  "\u0002V\u0217\u0003\u0002\u0002\u0002X\u0231\u0003\u0002\u0002\u0002",
  "Z\u0260\u0003\u0002\u0002\u0002\\\u026f\u0003\u0002\u0002\u0002^\u0271",
  "\u0003\u0002\u0002\u0002`\u0276\u0003\u0002\u0002\u0002b\u027a\u0003",
  "\u0002\u0002\u0002d\u027d\u0003\u0002\u0002\u0002f\u0281\u0003\u0002",
  "\u0002\u0002h\u0288\u0003\u0002\u0002\u0002j\u02a0\u0003\u0002\u0002",
  "\u0002l\u02a4\u0003\u0002\u0002\u0002n\u02e1\u0003\u0002\u0002\u0002",
  "p\u02ea\u0003\u0002\u0002\u0002r\u02ec\u0003\u0002\u0002\u0002t\u02fd",
  "\u0003\u0002\u0002\u0002v\u0303\u0003\u0002\u0002\u0002x\u033e\u0003",
  "\u0002\u0002\u0002z\u0395\u0003\u0002\u0002\u0002|\u03af\u0003\u0002",
  "\u0002\u0002~\u03b7\u0003\u0002\u0002\u0002\u0080\u03be\u0003\u0002",
  "\u0002\u0002\u0082\u03c0\u0003\u0002\u0002\u0002\u0084\u03c9\u0003\u0002",
  "\u0002\u0002\u0086\u03cb\u0003\u0002\u0002\u0002\u0088\u03cd\u0003\u0002",
  "\u0002\u0002\u008a\u03d1\u0003\u0002\u0002\u0002\u008c\u03d6\u0003\u0002",
  "\u0002\u0002\u008e\u03d8\u0003\u0002\u0002\u0002\u0090\u03da\u0003\u0002",
  "\u0002\u0002\u0092\u03dd\u0003\u0002\u0002\u0002\u0094\u03e0\u0003\u0002",
  "\u0002\u0002\u0096\u0098\u0007\u0003\u0002\u0002\u0097\u0096\u0003\u0002",
  "\u0002\u0002\u0097\u0098\u0003\u0002\u0002\u0002\u0098\u009a\u0003\u0002",
  "\u0002\u0002\u0099\u009b\u0005d3\u0002\u009a\u0099\u0003\u0002\u0002",
  "\u0002\u009a\u009b\u0003\u0002\u0002\u0002\u009b\u009c\u0003\u0002\u0002",
  "\u0002\u009c\u009d\u0007\u0002\u0002\u0003\u009d\u0003\u0003\u0002\u0002",
  "\u0002\u009e\u009f\u0005\u0006\u0004\u0002\u009f\u0005\u0003\u0002\u0002",
  "\u0002\u00a0\u00b5\u0005\b\u0005\u0002\u00a1\u00b5\u0005 \u0011\u0002",
  "\u00a2\u00b5\u0005\f\u0007\u0002\u00a3\u00b5\u0005\u001a\u000e\u0002",
  "\u00a4\u00b5\u0005(\u0015\u0002\u00a5\u00b5\u0005T+\u0002\u00a6\u00b5",
  "\u0005*\u0016\u0002\u00a7\u00b5\u0005,\u0017\u0002\u00a8\u00b5\u0005",
  ".\u0018\u0002\u00a9\u00b5\u00052\u001a\u0002\u00aa\u00b5\u00054\u001b",
  "\u0002\u00ab\u00b5\u00056\u001c\u0002\u00ac\u00b5\u00058\u001d\u0002",
  "\u00ad\u00b5\u0005:\u001e\u0002\u00ae\u00b5\u0005F$\u0002\u00af\u00b5",
  "\u0005<\u001f\u0002\u00b0\u00b5\u0005H%\u0002\u00b1\u00b5\u0005J&\u0002",
  "\u00b2\u00b5\u0005P)\u0002\u00b3\u00b5\u0005R*\u0002\u00b4\u00a0\u0003",
  "\u0002\u0002\u0002\u00b4\u00a1\u0003\u0002\u0002\u0002\u00b4\u00a2\u0003",
  "\u0002\u0002\u0002\u00b4\u00a3\u0003\u0002\u0002\u0002\u00b4\u00a4\u0003",
  "\u0002\u0002\u0002\u00b4\u00a5\u0003\u0002\u0002\u0002\u00b4\u00a6\u0003",
  "\u0002\u0002\u0002\u00b4\u00a7\u0003\u0002\u0002\u0002\u00b4\u00a8\u0003",
  "\u0002\u0002\u0002\u00b4\u00a9\u0003\u0002\u0002\u0002\u00b4\u00aa\u0003",
  "\u0002\u0002\u0002\u00b4\u00ab\u0003\u0002\u0002\u0002\u00b4\u00ac\u0003",
  "\u0002\u0002\u0002\u00b4\u00ad\u0003\u0002\u0002\u0002\u00b4\u00ae\u0003",
  "\u0002\u0002\u0002\u00b4\u00af\u0003\u0002\u0002\u0002\u00b4\u00b0\u0003",
  "\u0002\u0002\u0002\u00b4\u00b1\u0003\u0002\u0002\u0002\u00b4\u00b2\u0003",
  "\u0002\u0002\u0002\u00b4\u00b3\u0003\u0002\u0002\u0002\u00b5\u0007\u0003",
  "\u0002\u0002\u0002\u00b6\u00b8\u0007\u000b\u0002\u0002\u00b7\u00b9\u0005",
  "\n\u0006\u0002\u00b8\u00b7\u0003\u0002\u0002\u0002\u00b8\u00b9\u0003",
  "\u0002\u0002\u0002\u00b9\u00ba\u0003\u0002\u0002\u0002\u00ba\u00bb\u0007",
  "\f\u0002\u0002\u00bb\t\u0003\u0002\u0002\u0002\u00bc\u00be\u0005\u0006",
  "\u0004\u0002\u00bd\u00bc\u0003\u0002\u0002\u0002\u00be\u00bf\u0003\u0002",
  "\u0002\u0002\u00bf\u00bd\u0003\u0002\u0002\u0002\u00bf\u00c0\u0003\u0002",
  "\u0002\u0002\u00c0\u000b\u0003\u0002\u0002\u0002\u00c1\u00c2\u0007n",
  "\u0002\u0002\u00c2\u00cc\u0005\u000e\b\u0002\u00c3\u00c4\u0007n\u0002",
  "\u0002\u00c4\u00c6\u0005x=\u0002\u00c5\u00c7\u0007f\u0002\u0002\u00c6",
  "\u00c5\u0003\u0002\u0002\u0002\u00c6\u00c7\u0003\u0002\u0002\u0002\u00c7",
  "\u00c9\u0003\u0002\u0002\u0002\u00c8\u00ca\u0007z\u0002\u0002\u00c9",
  "\u00c8\u0003\u0002\u0002\u0002\u00c9\u00ca\u0003\u0002\u0002\u0002\u00ca",
  "\u00cc\u0003\u0002\u0002\u0002\u00cb\u00c1\u0003\u0002\u0002\u0002\u00cb",
  "\u00c3\u0003\u0002\u0002\u0002\u00cc\r\u0003\u0002\u0002\u0002\u00cd",
  "\u00cf\u0005\u0012\n\u0002\u00ce\u00cd\u0003\u0002\u0002\u0002\u00ce",
  "\u00cf\u0003\u0002\u0002\u0002\u00cf\u00d2\u0003\u0002\u0002\u0002\u00d0",
  "\u00d3\u0005\u0014\u000b\u0002\u00d1\u00d3\u0005\u0010\t\u0002\u00d2",
  "\u00d0\u0003\u0002\u0002\u0002\u00d2\u00d1\u0003\u0002\u0002\u0002\u00d3",
  "\u00d4\u0003\u0002\u0002\u0002\u00d4\u00d5\u0005\u0016\f\u0002\u00d5",
  "\u00d6\u0005\u0094K\u0002\u00d6\u00da\u0003\u0002\u0002\u0002\u00d7",
  "\u00d8\u0007{\u0002\u0002\u00d8\u00da\u0005\u0094K\u0002\u00d9\u00ce",
  "\u0003\u0002\u0002\u0002\u00d9\u00d7\u0003\u0002\u0002\u0002\u00da\u000f",
  "\u0003\u0002\u0002\u0002\u00db\u00e1\u0007\u000b\u0002\u0002\u00dc\u00dd",
  "\u0005\u0018\r\u0002\u00dd\u00de\u0007\u000e\u0002\u0002\u00de\u00e0",
  "\u0003\u0002\u0002\u0002\u00df\u00dc\u0003\u0002\u0002\u0002\u00e0\u00e3",
  "\u0003\u0002\u0002\u0002\u00e1\u00df\u0003\u0002\u0002\u0002\u00e1\u00e2",
  "\u0003\u0002\u0002\u0002\u00e2\u00e8\u0003\u0002\u0002\u0002\u00e3\u00e1",
  "\u0003\u0002\u0002\u0002\u00e4\u00e6\u0005\u0018\r\u0002\u00e5\u00e7",
  "\u0007\u000e\u0002\u0002\u00e6\u00e5\u0003\u0002\u0002\u0002\u00e6\u00e7",
  "\u0003\u0002\u0002\u0002\u00e7\u00e9\u0003\u0002\u0002\u0002\u00e8\u00e4",
  "\u0003\u0002\u0002\u0002\u00e8\u00e9\u0003\u0002\u0002\u0002\u00e9\u00ea",
  "\u0003\u0002\u0002\u0002\u00ea\u00eb\u0007\f\u0002\u0002\u00eb\u0011",
  "\u0003\u0002\u0002\u0002\u00ec\u00ed\u0005\u0018\r\u0002\u00ed\u00ee",
  "\u0007\u000e\u0002\u0002\u00ee\u0013\u0003\u0002\u0002\u0002\u00ef\u00f2",
  "\u0007\u001a\u0002\u0002\u00f0\u00f1\u0007f\u0002\u0002\u00f1\u00f3",
  "\u0005\u008aF\u0002\u00f2\u00f0\u0003\u0002\u0002\u0002\u00f2\u00f3",
  "\u0003\u0002\u0002\u0002\u00f3\u0015\u0003\u0002\u0002\u0002\u00f4\u00f5",
  "\u0007g\u0002\u0002\u00f5\u00f6\u0007{\u0002\u0002\u00f6\u0017\u0003",
  "\u0002\u0002\u0002\u00f7\u00fa\u0005\u008aF\u0002\u00f8\u00f9\u0007",
  "f\u0002\u0002\u00f9\u00fb\u0005\u008aF\u0002\u00fa\u00f8\u0003\u0002",
  "\u0002\u0002\u00fa\u00fb\u0003\u0002\u0002\u0002\u00fb\u0019\u0003\u0002",
  "\u0002\u0002\u00fc\u00ff\u0007m\u0002\u0002\u00fd\u0100\u0005\u001c",
  "\u000f\u0002\u00fe\u0100\u0005\u001e\u0010\u0002\u00ff\u00fd\u0003\u0002",
  "\u0002\u0002\u00ff\u00fe\u0003\u0002\u0002\u0002\u0100\u0101\u0003\u0002",
  "\u0002\u0002\u0101\u0102\u0005\u0094K\u0002\u0102\u0109\u0003\u0002",
  "\u0002\u0002\u0103\u0104\u0007m\u0002\u0002\u0104\u0105\u0007_\u0002",
  "\u0002\u0105\u0106\u0005x=\u0002\u0106\u0107\u0005\u0094K\u0002\u0107",
  "\u0109\u0003\u0002\u0002\u0002\u0108\u00fc\u0003\u0002\u0002\u0002\u0108",
  "\u0103\u0003\u0002\u0002\u0002\u0109\u001b\u0003\u0002\u0002\u0002\u010a",
  "\u010b\u0005\u0014\u000b\u0002\u010b\u010c\u0005\u0016\f\u0002\u010c",
  "\u010d\u0005\u0094K\u0002\u010d\u0115\u0003\u0002\u0002\u0002\u010e",
  "\u0110\u0005\u0010\t\u0002\u010f\u0111\u0005\u0016\f\u0002\u0110\u010f",
  "\u0003\u0002\u0002\u0002\u0110\u0111\u0003\u0002\u0002\u0002\u0111\u0112",
  "\u0003\u0002\u0002\u0002\u0112\u0113\u0005\u0094K\u0002\u0113\u0115",
  "\u0003\u0002\u0002\u0002\u0114\u010a\u0003\u0002\u0002\u0002\u0114\u010e",
  "\u0003\u0002\u0002\u0002\u0115\u001d\u0003\u0002\u0002\u0002\u0116\u011a",
  "\u0005 \u0011\u0002\u0117\u011a\u0005T+\u0002\u0118\u011a\u0005R*\u0002",
  "\u0119\u0116\u0003\u0002\u0002\u0002\u0119\u0117\u0003\u0002\u0002\u0002",
  "\u0119\u0118\u0003\u0002\u0002\u0002\u011a\u001f\u0003\u0002\u0002\u0002",
  "\u011b\u011c\u00050\u0019\u0002\u011c\u011d\u0005\"\u0012\u0002\u011d",
  "\u011e\u0005\u0094K\u0002\u011e!\u0003\u0002\u0002\u0002\u011f\u0124",
  "\u0005$\u0013\u0002\u0120\u0121\u0007\u000e\u0002\u0002\u0121\u0123",
  "\u0005$\u0013\u0002\u0122\u0120\u0003\u0002\u0002\u0002\u0123\u0126",
  "\u0003\u0002\u0002\u0002\u0124\u0122\u0003\u0002\u0002\u0002\u0124\u0125",
  "\u0003\u0002\u0002\u0002\u0125#\u0003\u0002\u0002\u0002\u0126\u0124",
  "\u0003\u0002\u0002\u0002\u0127\u012a\u0005z>\u0002\u0128\u0129\u0007",
  "\u0011\u0002\u0002\u0129\u012b\u0005&\u0014\u0002\u012a\u0128\u0003",
  "\u0002\u0002\u0002\u012a\u012b\u0003\u0002\u0002\u0002\u012b\u012e\u0003",
  "\u0002\u0002\u0002\u012c\u012d\u0007\u000f\u0002\u0002\u012d\u012f\u0005",
  "x=\u0002\u012e\u012c\u0003\u0002\u0002\u0002\u012e\u012f\u0003\u0002",
  "\u0002\u0002\u012f%\u0003\u0002\u0002\u0002\u0130\u0132\u0007J\u0002",
  "\u0002\u0131\u0130\u0003\u0002\u0002\u0002\u0131\u0132\u0003\u0002\u0002",
  "\u0002\u0132\u0134\u0003\u0002\u0002\u0002\u0133\u0135\u0007K\u0002",
  "\u0002\u0134\u0133\u0003\u0002\u0002\u0002\u0134\u0135\u0003\u0002\u0002",
  "\u0002\u0135\u0136\u0003\u0002\u0002\u0002\u0136\u0137\u0005x=\u0002",
  "\u0137\'\u0003\u0002\u0002\u0002\u0138\u0139\u0007\r\u0002\u0002\u0139",
  ")\u0003\u0002\u0002\u0002\u013a\u013b\u0005v<\u0002\u013b\u013c\u0005",
  "\u0094K\u0002\u013c+\u0003\u0002\u0002\u0002\u013d\u013e\u0007`\u0002",
  "\u0002\u013e\u013f\u0007\t\u0002\u0002\u013f\u0140\u0005v<\u0002\u0140",
  "\u0141\u0007\n\u0002\u0002\u0141\u0144\u0005\u0006\u0004\u0002\u0142",
  "\u0143\u0007O\u0002\u0002\u0143\u0145\u0005\u0006\u0004\u0002\u0144",
  "\u0142\u0003\u0002\u0002\u0002\u0144\u0145\u0003\u0002\u0002\u0002\u0145",
  "-\u0003\u0002\u0002\u0002\u0146\u0147\u0007I\u0002\u0002\u0147\u0148",
  "\u0005\u0006\u0004\u0002\u0148\u0149\u0007Z\u0002\u0002\u0149\u014a",
  "\u0007\t\u0002\u0002\u014a\u014b\u0005v<\u0002\u014b\u014c\u0007\n\u0002",
  "\u0002\u014c\u014d\u0005\u0094K\u0002\u014d\u0187\u0003\u0002\u0002",
  "\u0002\u014e\u014f\u0007Z\u0002\u0002\u014f\u0150\u0007\t\u0002\u0002",
  "\u0150\u0151\u0005v<\u0002\u0151\u0152\u0007\n\u0002\u0002\u0152\u0153",
  "\u0005\u0006\u0004\u0002\u0153\u0187\u0003\u0002\u0002\u0002\u0154\u0155",
  "\u0007W\u0002\u0002\u0155\u0158\u0007\t\u0002\u0002\u0156\u0159\u0005",
  "v<\u0002\u0157\u0159\u0005 \u0011\u0002\u0158\u0156\u0003\u0002\u0002",
  "\u0002\u0158\u0157\u0003\u0002\u0002\u0002\u0158\u0159\u0003\u0002\u0002",
  "\u0002\u0159\u015a\u0003\u0002\u0002\u0002\u015a\u015c\u0007\r\u0002",
  "\u0002\u015b\u015d\u0005v<\u0002\u015c\u015b\u0003\u0002\u0002\u0002",
  "\u015c\u015d\u0003\u0002\u0002\u0002\u015d\u015e\u0003\u0002\u0002\u0002",
  "\u015e\u0160\u0007\r\u0002\u0002\u015f\u0161\u0005v<\u0002\u0160\u015f",
  "\u0003\u0002\u0002\u0002\u0160\u0161\u0003\u0002\u0002\u0002\u0161\u0162",
  "\u0003\u0002\u0002\u0002\u0162\u0163\u0007\n\u0002\u0002\u0163\u0187",
  "\u0005\u0006\u0004\u0002\u0164\u0165\u0007W\u0002\u0002\u0165\u0168",
  "\u0007\t\u0002\u0002\u0166\u0169\u0005x=\u0002\u0167\u0169\u0005 \u0011",
  "\u0002\u0168\u0166\u0003\u0002\u0002\u0002\u0168\u0167\u0003\u0002\u0002",
  "\u0002\u0169\u016a\u0003\u0002\u0002\u0002\u016a\u016b\u0007d\u0002",
  "\u0002\u016b\u016c\u0005v<\u0002\u016c\u016d\u0007\n\u0002\u0002\u016d",
  "\u016e\u0005\u0006\u0004\u0002\u016e\u0187\u0003\u0002\u0002\u0002\u016f",
  "\u0171\u0007W\u0002\u0002\u0170\u0172\u0007p\u0002\u0002\u0171\u0170",
  "\u0003\u0002\u0002\u0002\u0171\u0172\u0003\u0002\u0002\u0002\u0172\u0173",
  "\u0003\u0002\u0002\u0002\u0173\u0176\u0007\t\u0002\u0002\u0174\u0177",
  "\u0005x=\u0002\u0175\u0177\u0005 \u0011\u0002\u0176\u0174\u0003\u0002",
  "\u0002\u0002\u0176\u0175\u0003\u0002\u0002\u0002\u0177\u0178\u0003\u0002",
  "\u0002\u0002\u0178\u0179\u0007z\u0002\u0002\u0179\u017a\u0005v<\u0002",
  "\u017a\u017b\u0007\n\u0002\u0002\u017b\u017c\u0005\u0006\u0004\u0002",
  "\u017c\u0187\u0003\u0002\u0002\u0002\u017d\u017e\u0007X\u0002\u0002",
  "\u017e\u017f\u0007\t\u0002\u0002\u017f\u0180\u0007Q\u0002\u0002\u0180",
  "\u0181\u0007z\u0002\u0002\u0181\u0182\u0007d\u0002\u0002\u0182\u0183",
  "\u0005x=\u0002\u0183\u0184\u0007\n\u0002\u0002\u0184\u0185\u0005\u0006",
  "\u0004\u0002\u0185\u0187\u0003\u0002\u0002\u0002\u0186\u0146\u0003\u0002",
  "\u0002\u0002\u0186\u014e\u0003\u0002\u0002\u0002\u0186\u0154\u0003\u0002",
  "\u0002\u0002\u0186\u0164\u0003\u0002\u0002\u0002\u0186\u016f\u0003\u0002",
  "\u0002\u0002\u0186\u017d\u0003\u0002\u0002\u0002\u0187/\u0003\u0002",
  "\u0002\u0002\u0188\u0189\t\u0002\u0002\u0002\u01891\u0003\u0002\u0002",
  "\u0002\u018a\u018c\u0007V\u0002\u0002\u018b\u018d\u0007z\u0002\u0002",
  "\u018c\u018b\u0003\u0002\u0002\u0002\u018c\u018d\u0003\u0002\u0002\u0002",
  "\u018d\u018e\u0003\u0002\u0002\u0002\u018e\u018f\u0005\u0094K\u0002",
  "\u018f3\u0003\u0002\u0002\u0002\u0190\u0192\u0007H\u0002\u0002\u0191",
  "\u0193\u0007z\u0002\u0002\u0192\u0191\u0003\u0002\u0002\u0002\u0192",
  "\u0193\u0003\u0002\u0002\u0002\u0193\u0194\u0003\u0002\u0002\u0002\u0194",
  "\u0195\u0005\u0094K\u0002\u01955\u0003\u0002\u0002\u0002\u0196\u0198",
  "\u0007T\u0002\u0002\u0197\u0199\u0005v<\u0002\u0198\u0197\u0003\u0002",
  "\u0002\u0002\u0198\u0199\u0003\u0002\u0002\u0002\u0199\u019a\u0003\u0002",
  "\u0002\u0002\u019a\u019b\u0005\u0094K\u0002\u019b7\u0003\u0002\u0002",
  "\u0002\u019c\u019e\u0007y\u0002\u0002\u019d\u019f\u0005v<\u0002\u019e",
  "\u019d\u0003\u0002\u0002\u0002\u019e\u019f\u0003\u0002\u0002\u0002\u019f",
  "\u01a0\u0003\u0002\u0002\u0002\u01a0\u01a1\u0005\u0094K\u0002\u01a1",
  "9\u0003\u0002\u0002\u0002\u01a2\u01a3\u0007^\u0002\u0002\u01a3\u01a4",
  "\u0007\t\u0002\u0002\u01a4\u01a5\u0005v<\u0002\u01a5\u01a6\u0007\n\u0002",
  "\u0002\u01a6\u01a7\u0005\u0006\u0004\u0002\u01a7;\u0003\u0002\u0002",
  "\u0002\u01a8\u01a9\u0007Y\u0002\u0002\u01a9\u01aa\u0007\t\u0002\u0002",
  "\u01aa\u01ab\u0005v<\u0002\u01ab\u01ac\u0007\n\u0002\u0002\u01ac\u01ad",
  "\u0005> \u0002\u01ad=\u0003\u0002\u0002\u0002\u01ae\u01b0\u0007\u000b",
  "\u0002\u0002\u01af\u01b1\u0005@!\u0002\u01b0\u01af\u0003\u0002\u0002",
  "\u0002\u01b0\u01b1\u0003\u0002\u0002\u0002\u01b1\u01b6\u0003\u0002\u0002",
  "\u0002\u01b2\u01b4\u0005D#\u0002\u01b3\u01b5\u0005@!\u0002\u01b4\u01b3",
  "\u0003\u0002\u0002\u0002\u01b4\u01b5\u0003\u0002\u0002\u0002\u01b5\u01b7",
  "\u0003\u0002\u0002\u0002\u01b6\u01b2\u0003\u0002\u0002\u0002\u01b6\u01b7",
  "\u0003\u0002\u0002\u0002\u01b7\u01b8\u0003\u0002\u0002\u0002\u01b8\u01b9",
  "\u0007\f\u0002\u0002\u01b9?\u0003\u0002\u0002\u0002\u01ba\u01bc\u0005",
  "B\"\u0002\u01bb\u01ba\u0003\u0002\u0002\u0002\u01bc\u01bd\u0003\u0002",
  "\u0002\u0002\u01bd\u01bb\u0003\u0002\u0002\u0002\u01bd\u01be\u0003\u0002",
  "\u0002\u0002\u01beA\u0003\u0002\u0002\u0002\u01bf\u01c0\u0007N\u0002",
  "\u0002\u01c0\u01c1\u0005v<\u0002\u01c1\u01c3\u0007\u0011\u0002\u0002",
  "\u01c2\u01c4\u0005\n\u0006\u0002\u01c3\u01c2\u0003\u0002\u0002\u0002",
  "\u01c3\u01c4\u0003\u0002\u0002\u0002\u01c4\u01d1\u0003\u0002\u0002\u0002",
  "\u01c5\u01c7\u0007N\u0002\u0002\u01c6\u01c8\u0007\t\u0002\u0002\u01c7",
  "\u01c6\u0003\u0002\u0002\u0002\u01c7\u01c8\u0003\u0002\u0002\u0002\u01c8",
  "\u01c9\u0003\u0002\u0002\u0002\u01c9\u01cb\u0005x=\u0002\u01ca\u01cc",
  "\u0007\n\u0002\u0002\u01cb\u01ca\u0003\u0002\u0002\u0002\u01cb\u01cc",
  "\u0003\u0002\u0002\u0002\u01cc\u01ce\u0003\u0002\u0002\u0002\u01cd\u01cf",
  "\u0005\n\u0006\u0002\u01ce\u01cd\u0003\u0002\u0002\u0002\u01ce\u01cf",
  "\u0003\u0002\u0002\u0002\u01cf\u01d1\u0003\u0002\u0002\u0002\u01d0\u01bf",
  "\u0003\u0002\u0002\u0002\u01d0\u01c5\u0003\u0002\u0002\u0002\u01d1C",
  "\u0003\u0002\u0002\u0002\u01d2\u01d4\u0007_\u0002\u0002\u01d3\u01d5",
  "\u0007\u0011\u0002\u0002\u01d4\u01d3\u0003\u0002\u0002\u0002\u01d4\u01d5",
  "\u0003\u0002\u0002\u0002\u01d5\u01d7\u0003\u0002\u0002\u0002\u01d6\u01d8",
  "\u0005\n\u0006\u0002\u01d7\u01d6\u0003\u0002\u0002\u0002\u01d7\u01d8",
  "\u0003\u0002\u0002\u0002\u01d8E\u0003\u0002\u0002\u0002\u01d9\u01da",
  "\u0007z\u0002\u0002\u01da\u01db\u0007\u0011\u0002\u0002\u01db\u01dc",
  "\u0005\u0006\u0004\u0002\u01dcG\u0003\u0002\u0002\u0002\u01dd\u01de",
  "\u0007a\u0002\u0002\u01de\u01df\u0005v<\u0002\u01df\u01e0\u0005\u0094",
  "K\u0002\u01e0\u01e6\u0003\u0002\u0002\u0002\u01e1\u01e2\u0007b\u0002",
  "\u0002\u01e2\u01e3\u0005v<\u0002\u01e3\u01e4\u0005\u0094K\u0002\u01e4",
  "\u01e6\u0003\u0002\u0002\u0002\u01e5\u01dd\u0003\u0002\u0002\u0002\u01e5",
  "\u01e1\u0003\u0002\u0002\u0002\u01e6I\u0003\u0002\u0002\u0002\u01e7",
  "\u01e8\u0007e\u0002\u0002\u01e8\u01ee\u0005\b\u0005\u0002\u01e9\u01eb",
  "\u0005L\'\u0002\u01ea\u01ec\u0005N(\u0002\u01eb\u01ea\u0003\u0002\u0002",
  "\u0002\u01eb\u01ec\u0003\u0002\u0002\u0002\u01ec\u01ef\u0003\u0002\u0002",
  "\u0002\u01ed\u01ef\u0005N(\u0002\u01ee\u01e9\u0003\u0002\u0002\u0002",
  "\u01ee\u01ed\u0003\u0002\u0002\u0002\u01efK\u0003\u0002\u0002\u0002",
  "\u01f0\u01f6\u0007R\u0002\u0002\u01f1\u01f3\u0007\t\u0002\u0002\u01f2",
  "\u01f4\u0005z>\u0002\u01f3\u01f2\u0003\u0002\u0002\u0002\u01f3\u01f4",
  "\u0003\u0002\u0002\u0002\u01f4\u01f5\u0003\u0002\u0002\u0002\u01f5\u01f7",
  "\u0007\n\u0002\u0002\u01f6\u01f1\u0003\u0002\u0002\u0002\u01f6\u01f7",
  "\u0003\u0002\u0002\u0002\u01f7\u01f8\u0003\u0002\u0002\u0002\u01f8\u01f9",
  "\u0005\b\u0005\u0002\u01f9M\u0003\u0002\u0002\u0002\u01fa\u01fb\u0007",
  "S\u0002\u0002\u01fb\u01fc\u0005\b\u0005\u0002\u01fcO\u0003\u0002\u0002",
  "\u0002\u01fd\u01fe\u0007[\u0002\u0002\u01fe\u01ff\u0005\u0094K\u0002",
  "\u01ffQ\u0003\u0002\u0002\u0002\u0200\u0202\u0007o\u0002\u0002\u0201",
  "\u0200\u0003\u0002\u0002\u0002\u0201\u0202\u0003\u0002\u0002\u0002\u0202",
  "\u0203\u0003\u0002\u0002\u0002\u0203\u0205\u0007\\\u0002\u0002\u0204",
  "\u0206\u0007\u001a\u0002\u0002\u0205\u0204\u0003\u0002\u0002\u0002\u0205",
  "\u0206\u0003\u0002\u0002\u0002\u0206\u0207\u0003\u0002\u0002\u0002\u0207",
  "\u0208\u0007z\u0002\u0002\u0208\u020a\u0007\t\u0002\u0002\u0209\u020b",
  "\u0005\\/\u0002\u020a\u0209\u0003\u0002\u0002\u0002\u020a\u020b\u0003",
  "\u0002\u0002\u0002\u020b\u020c\u0003\u0002\u0002\u0002\u020c\u020d\u0007",
  "\n\u0002\u0002\u020d\u020e\u0007\u000b\u0002\u0002\u020e\u020f\u0005",
  "b2\u0002\u020f\u0210\u0007\f\u0002\u0002\u0210S\u0003\u0002\u0002\u0002",
  "\u0211\u0212\u0007h\u0002\u0002\u0212\u0213\u0007z\u0002\u0002\u0213",
  "\u0214\u0005V,\u0002\u0214U\u0003\u0002\u0002\u0002\u0215\u0216\u0007",
  "j\u0002\u0002\u0216\u0218\u0005x=\u0002\u0217\u0215\u0003\u0002\u0002",
  "\u0002\u0217\u0218\u0003\u0002\u0002\u0002\u0218\u0219\u0003\u0002\u0002",
  "\u0002\u0219\u021d\u0007\u000b\u0002\u0002\u021a\u021c\u0005X-\u0002",
  "\u021b\u021a\u0003\u0002\u0002\u0002\u021c\u021f\u0003\u0002\u0002\u0002",
  "\u021d\u021b\u0003\u0002\u0002\u0002\u021d\u021e\u0003\u0002\u0002\u0002",
  "\u021e\u0220\u0003\u0002\u0002\u0002\u021f\u021d\u0003\u0002\u0002\u0002",
  "\u0220\u0221\u0007\f\u0002\u0002\u0221W\u0003\u0002\u0002\u0002\u0222",
  "\u0224\t\u0003\u0002\u0002\u0223\u0222\u0003\u0002\u0002\u0002\u0224",
  "\u0227\u0003\u0002\u0002\u0002\u0225\u0223\u0003\u0002\u0002\u0002\u0225",
  "\u0226\u0003\u0002\u0002\u0002\u0226\u0228\u0003\u0002\u0002\u0002\u0227",
  "\u0225\u0003\u0002\u0002\u0002\u0228\u0232\u0005Z.\u0002\u0229\u0232",
  "\u0005(\u0015\u0002\u022a\u022c\u0007\u001f\u0002\u0002\u022b\u022a",
  "\u0003\u0002\u0002\u0002\u022b\u022c\u0003\u0002\u0002\u0002\u022c\u022d",
  "\u0003\u0002\u0002\u0002\u022d\u022e\u0005p9\u0002\u022e\u022f\u0007",
  "\u000f\u0002\u0002\u022f\u0230\u0005x=\u0002\u0230\u0232\u0003\u0002",
  "\u0002\u0002\u0231\u0225\u0003\u0002\u0002\u0002\u0231\u0229\u0003\u0002",
  "\u0002\u0002\u0231\u022b\u0003\u0002\u0002\u0002\u0232Y\u0003\u0002",
  "\u0002\u0002\u0233\u0235\u0007\u001a\u0002\u0002\u0234\u0233\u0003\u0002",
  "\u0002\u0002\u0234\u0235\u0003\u0002\u0002\u0002\u0235\u0237\u0003\u0002",
  "\u0002\u0002\u0236\u0238\u0007\u001f\u0002\u0002\u0237\u0236\u0003\u0002",
  "\u0002\u0002\u0237\u0238\u0003\u0002\u0002\u0002\u0238\u0239\u0003\u0002",
  "\u0002\u0002\u0239\u023a\u0005p9\u0002\u023a\u023c\u0007\t\u0002\u0002",
  "\u023b\u023d\u0005\\/\u0002\u023c\u023b\u0003\u0002\u0002\u0002\u023c",
  "\u023d\u0003\u0002\u0002\u0002\u023d\u023e\u0003\u0002\u0002\u0002\u023e",
  "\u023f\u0007\n\u0002\u0002\u023f\u0240\u0007\u000b\u0002\u0002\u0240",
  "\u0241\u0005b2\u0002\u0241\u0242\u0007\f\u0002\u0002\u0242\u0261\u0003",
  "\u0002\u0002\u0002\u0243\u0245\u0007\u001a\u0002\u0002\u0244\u0243\u0003",
  "\u0002\u0002\u0002\u0244\u0245\u0003\u0002\u0002\u0002\u0245\u0247\u0003",
  "\u0002\u0002\u0002\u0246\u0248\u0007\u001f\u0002\u0002\u0247\u0246\u0003",
  "\u0002\u0002\u0002\u0247\u0248\u0003\u0002\u0002\u0002\u0248\u0249\u0003",
  "\u0002\u0002\u0002\u0249\u024a\u0005\u0090I\u0002\u024a\u024b\u0007",
  "\t\u0002\u0002\u024b\u024c\u0007\n\u0002\u0002\u024c\u024d\u0007\u000b",
  "\u0002\u0002\u024d\u024e\u0005b2\u0002\u024e\u024f\u0007\f\u0002\u0002",
  "\u024f\u0261\u0003\u0002\u0002\u0002\u0250\u0252\u0007\u001a\u0002\u0002",
  "\u0251\u0250\u0003\u0002\u0002\u0002\u0251\u0252\u0003\u0002\u0002\u0002",
  "\u0252\u0254\u0003\u0002\u0002\u0002\u0253\u0255\u0007\u001f\u0002\u0002",
  "\u0254\u0253\u0003\u0002\u0002\u0002\u0254\u0255\u0003\u0002\u0002\u0002",
  "\u0255\u0256\u0003\u0002\u0002\u0002\u0256\u0257\u0005\u0092J\u0002",
  "\u0257\u0259\u0007\t\u0002\u0002\u0258\u025a\u0005\\/\u0002\u0259\u0258",
  "\u0003\u0002\u0002\u0002\u0259\u025a\u0003\u0002\u0002\u0002\u025a\u025b",
  "\u0003\u0002\u0002\u0002\u025b\u025c\u0007\n\u0002\u0002\u025c\u025d",
  "\u0007\u000b\u0002\u0002\u025d\u025e\u0005b2\u0002\u025e\u025f\u0007",
  "\f\u0002\u0002\u025f\u0261\u0003\u0002\u0002\u0002\u0260\u0234\u0003",
  "\u0002\u0002\u0002\u0260\u0244\u0003\u0002\u0002\u0002\u0260\u0251\u0003",
  "\u0002\u0002\u0002\u0261[\u0003\u0002\u0002\u0002\u0262\u0267\u0005",
  "^0\u0002\u0263\u0264\u0007\u000e\u0002\u0002\u0264\u0266\u0005^0\u0002",
  "\u0265\u0263\u0003\u0002\u0002\u0002\u0266\u0269\u0003\u0002\u0002\u0002",
  "\u0267\u0265\u0003\u0002\u0002\u0002\u0267\u0268\u0003\u0002\u0002\u0002",
  "\u0268\u026c\u0003\u0002\u0002\u0002\u0269\u0267\u0003\u0002\u0002\u0002",
  "\u026a\u026b\u0007\u000e\u0002\u0002\u026b\u026d\u0005`1\u0002\u026c",
  "\u026a\u0003\u0002\u0002\u0002\u026c\u026d\u0003\u0002\u0002\u0002\u026d",
  "\u0270\u0003\u0002\u0002\u0002\u026e\u0270\u0005`1\u0002\u026f\u0262",
  "\u0003\u0002\u0002\u0002\u026f\u026e\u0003\u0002\u0002\u0002\u0270]",
  "\u0003\u0002\u0002\u0002\u0271\u0274\u0005z>\u0002\u0272\u0273\u0007",
  "\u000f\u0002\u0002\u0273\u0275\u0005x=\u0002\u0274\u0272\u0003\u0002",
  "\u0002\u0002\u0274\u0275\u0003\u0002\u0002\u0002\u0275_\u0003\u0002",
  "\u0002\u0002\u0276\u0277\u0007\u0012\u0002\u0002\u0277\u0278\u0005x",
  "=\u0002\u0278a\u0003\u0002\u0002\u0002\u0279\u027b\u0005d3\u0002\u027a",
  "\u0279\u0003\u0002\u0002\u0002\u027a\u027b\u0003\u0002\u0002\u0002\u027b",
  "c\u0003\u0002\u0002\u0002\u027c\u027e\u0005\u0004\u0003\u0002\u027d",
  "\u027c\u0003\u0002\u0002\u0002\u027e\u027f\u0003\u0002\u0002\u0002\u027f",
  "\u027d\u0003\u0002\u0002\u0002\u027f\u0280\u0003\u0002\u0002\u0002\u0280",
  "e\u0003\u0002\u0002\u0002\u0281\u0282\u0007\u0007\u0002\u0002\u0282",
  "\u0283\u0005h5\u0002\u0283\u0284\u0007\b\u0002\u0002\u0284g\u0003\u0002",
  "\u0002\u0002\u0285\u0287\u0007\u000e\u0002\u0002\u0286\u0285\u0003\u0002",
  "\u0002\u0002\u0287\u028a\u0003\u0002\u0002\u0002\u0288\u0286\u0003\u0002",
  "\u0002\u0002\u0288\u0289\u0003\u0002\u0002\u0002\u0289\u028c\u0003\u0002",
  "\u0002\u0002\u028a\u0288\u0003\u0002\u0002\u0002\u028b\u028d\u0005j",
  "6\u0002\u028c\u028b\u0003\u0002\u0002\u0002\u028c\u028d\u0003\u0002",
  "\u0002\u0002\u028d\u0296\u0003\u0002\u0002\u0002\u028e\u0290\u0007\u000e",
  "\u0002\u0002\u028f\u028e\u0003\u0002\u0002\u0002\u0290\u0291\u0003\u0002",
  "\u0002\u0002\u0291\u028f\u0003\u0002\u0002\u0002\u0291\u0292\u0003\u0002",
  "\u0002\u0002\u0292\u0293\u0003\u0002\u0002\u0002\u0293\u0295\u0005j",
  "6\u0002\u0294\u028f\u0003\u0002\u0002\u0002\u0295\u0298\u0003\u0002",
  "\u0002\u0002\u0296\u0294\u0003\u0002\u0002\u0002\u0296\u0297\u0003\u0002",
  "\u0002\u0002\u0297\u029c\u0003\u0002\u0002\u0002\u0298\u0296\u0003\u0002",
  "\u0002\u0002\u0299\u029b\u0007\u000e\u0002\u0002\u029a\u0299\u0003\u0002",
  "\u0002\u0002\u029b\u029e\u0003\u0002\u0002\u0002\u029c\u029a\u0003\u0002",
  "\u0002\u0002\u029c\u029d\u0003\u0002\u0002\u0002\u029di\u0003\u0002",
  "\u0002\u0002\u029e\u029c\u0003\u0002\u0002\u0002\u029f\u02a1\u0007\u0012",
  "\u0002\u0002\u02a0\u029f\u0003\u0002\u0002\u0002\u02a0\u02a1\u0003\u0002",
  "\u0002\u0002\u02a1\u02a2\u0003\u0002\u0002\u0002\u02a2\u02a3\u0005x",
  "=\u0002\u02a3k\u0003\u0002\u0002\u0002\u02a4\u02ad\u0007\u000b\u0002",
  "\u0002\u02a5\u02aa\u0005n8\u0002\u02a6\u02a7\u0007\u000e\u0002\u0002",
  "\u02a7\u02a9\u0005n8\u0002\u02a8\u02a6\u0003\u0002\u0002\u0002\u02a9",
  "\u02ac\u0003\u0002\u0002\u0002\u02aa\u02a8\u0003\u0002\u0002\u0002\u02aa",
  "\u02ab\u0003\u0002\u0002\u0002\u02ab\u02ae\u0003\u0002\u0002\u0002\u02ac",
  "\u02aa\u0003\u0002\u0002\u0002\u02ad\u02a5\u0003\u0002\u0002\u0002\u02ad",
  "\u02ae\u0003\u0002\u0002\u0002\u02ae\u02b0\u0003\u0002\u0002\u0002\u02af",
  "\u02b1\u0007\u000e\u0002\u0002\u02b0\u02af\u0003\u0002\u0002\u0002\u02b0",
  "\u02b1\u0003\u0002\u0002\u0002\u02b1\u02b2\u0003\u0002\u0002\u0002\u02b2",
  "\u02b3\u0007\f\u0002\u0002\u02b3m\u0003\u0002\u0002\u0002\u02b4\u02b5",
  "\u0005p9\u0002\u02b5\u02b6\u0007\u0011\u0002\u0002\u02b6\u02b7\u0005",
  "x=\u0002\u02b7\u02e2\u0003\u0002\u0002\u0002\u02b8\u02b9\u0007\u0007",
  "\u0002\u0002\u02b9\u02ba\u0005x=\u0002\u02ba\u02bb\u0007\b\u0002\u0002",
  "\u02bb\u02bc\u0007\u0011\u0002\u0002\u02bc\u02bd\u0005x=\u0002\u02bd",
  "\u02e2\u0003\u0002\u0002\u0002\u02be\u02c0\u0007o\u0002\u0002\u02bf",
  "\u02be\u0003\u0002\u0002\u0002\u02bf\u02c0\u0003\u0002\u0002\u0002\u02c0",
  "\u02c2\u0003\u0002\u0002\u0002\u02c1\u02c3\u0007\u001a\u0002\u0002\u02c2",
  "\u02c1\u0003\u0002\u0002\u0002\u02c2\u02c3\u0003\u0002\u0002\u0002\u02c3",
  "\u02c4\u0003\u0002\u0002\u0002\u02c4\u02c5\u0005p9\u0002\u02c5\u02c7",
  "\u0007\t\u0002\u0002\u02c6\u02c8\u0005\\/\u0002\u02c7\u02c6\u0003\u0002",
  "\u0002\u0002\u02c7\u02c8\u0003\u0002\u0002\u0002\u02c8\u02c9\u0003\u0002",
  "\u0002\u0002\u02c9\u02ca\u0007\n\u0002\u0002\u02ca\u02cb\u0007\u000b",
  "\u0002\u0002\u02cb\u02cc\u0005b2\u0002\u02cc\u02cd\u0007\f\u0002\u0002",
  "\u02cd\u02e2\u0003\u0002\u0002\u0002\u02ce\u02cf\u0005\u0090I\u0002",
  "\u02cf\u02d0\u0007\t\u0002\u0002\u02d0\u02d1\u0007\n\u0002\u0002\u02d1",
  "\u02d2\u0007\u000b\u0002\u0002\u02d2\u02d3\u0005b2\u0002\u02d3\u02d4",
  "\u0007\f\u0002\u0002\u02d4\u02e2\u0003\u0002\u0002\u0002\u02d5\u02d6",
  "\u0005\u0092J\u0002\u02d6\u02d7\u0007\t\u0002\u0002\u02d7\u02d8\u0005",
  "^0\u0002\u02d8\u02d9\u0007\n\u0002\u0002\u02d9\u02da\u0007\u000b\u0002",
  "\u0002\u02da\u02db\u0005b2\u0002\u02db\u02dc\u0007\f\u0002\u0002\u02dc",
  "\u02e2\u0003\u0002\u0002\u0002\u02dd\u02df\u0007\u0012\u0002\u0002\u02de",
  "\u02dd\u0003\u0002\u0002\u0002\u02de\u02df\u0003\u0002\u0002\u0002\u02df",
  "\u02e0\u0003\u0002\u0002\u0002\u02e0\u02e2\u0005x=\u0002\u02e1\u02b4",
  "\u0003\u0002\u0002\u0002\u02e1\u02b8\u0003\u0002\u0002\u0002\u02e1\u02bf",
  "\u0003\u0002\u0002\u0002\u02e1\u02ce\u0003\u0002\u0002\u0002\u02e1\u02d5",
  "\u0003\u0002\u0002\u0002\u02e1\u02de\u0003\u0002\u0002\u0002\u02e2o",
  "\u0003\u0002\u0002\u0002\u02e3\u02eb\u0005\u008aF\u0002\u02e4\u02eb",
  "\u0007{\u0002\u0002\u02e5\u02eb\u0005\u0086D\u0002\u02e6\u02e7\u0007",
  "\u0007\u0002\u0002\u02e7\u02e8\u0005x=\u0002\u02e8\u02e9\u0007\b\u0002",
  "\u0002\u02e9\u02eb\u0003\u0002\u0002\u0002\u02ea\u02e3\u0003\u0002\u0002",
  "\u0002\u02ea\u02e4\u0003\u0002\u0002\u0002\u02ea\u02e5\u0003\u0002\u0002",
  "\u0002\u02ea\u02e6\u0003\u0002\u0002\u0002\u02ebq\u0003\u0002\u0002",
  "\u0002\u02ec\u02f8\u0007\t\u0002\u0002\u02ed\u02f2\u0005t;\u0002\u02ee",
  "\u02ef\u0007\u000e\u0002\u0002\u02ef\u02f1\u0005t;\u0002\u02f0\u02ee",
  "\u0003\u0002\u0002\u0002\u02f1\u02f4\u0003\u0002\u0002\u0002\u02f2\u02f0",
  "\u0003\u0002\u0002\u0002\u02f2\u02f3\u0003\u0002\u0002\u0002\u02f3\u02f6",
  "\u0003\u0002\u0002\u0002\u02f4\u02f2\u0003\u0002\u0002\u0002\u02f5\u02f7",
  "\u0007\u000e\u0002\u0002\u02f6\u02f5\u0003\u0002\u0002\u0002\u02f6\u02f7",
  "\u0003\u0002\u0002\u0002\u02f7\u02f9\u0003\u0002\u0002\u0002\u02f8\u02ed",
  "\u0003\u0002\u0002\u0002\u02f8\u02f9\u0003\u0002\u0002\u0002\u02f9\u02fa",
  "\u0003\u0002\u0002\u0002\u02fa\u02fb\u0007\n\u0002\u0002\u02fbs\u0003",
  "\u0002\u0002\u0002\u02fc\u02fe\u0007\u0012\u0002\u0002\u02fd\u02fc\u0003",
  "\u0002\u0002\u0002\u02fd\u02fe\u0003\u0002\u0002\u0002\u02fe\u0301\u0003",
  "\u0002\u0002\u0002\u02ff\u0302\u0005x=\u0002\u0300\u0302\u0007z\u0002",
  "\u0002\u0301\u02ff\u0003\u0002\u0002\u0002\u0301\u0300\u0003\u0002\u0002",
  "\u0002\u0302u\u0003\u0002\u0002\u0002\u0303\u0308\u0005x=\u0002\u0304",
  "\u0305\u0007\u000e\u0002\u0002\u0305\u0307\u0005x=\u0002\u0306\u0304",
  "\u0003\u0002\u0002\u0002\u0307\u030a\u0003\u0002\u0002\u0002\u0308\u0306",
  "\u0003\u0002\u0002\u0002\u0308\u0309\u0003\u0002\u0002\u0002\u0309w",
  "\u0003\u0002\u0002\u0002\u030a\u0308\u0003\u0002\u0002\u0002\u030b\u030c",
  "\b=\u0001\u0002\u030c\u033f\u0005|?\u0002\u030d\u030f\u0007h\u0002\u0002",
  "\u030e\u0310\u0007z\u0002\u0002\u030f\u030e\u0003\u0002\u0002\u0002",
  "\u030f\u0310\u0003\u0002\u0002\u0002\u0310\u0311\u0003\u0002\u0002\u0002",
  "\u0311\u033f\u0005V,\u0002\u0312\u0313\u0007P\u0002\u0002\u0313\u0315",
  "\u0005x=\u0002\u0314\u0316\u0005r:\u0002\u0315\u0314\u0003\u0002\u0002",
  "\u0002\u0315\u0316\u0003\u0002\u0002\u0002\u0316\u033f\u0003\u0002\u0002",
  "\u0002\u0317\u0318\u0007P\u0002\u0002\u0318\u0319\u0007\u0013\u0002",
  "\u0002\u0319\u033f\u0007z\u0002\u0002\u031a\u031b\u0007c\u0002\u0002",
  "\u031b\u033f\u0005x=\'\u031c\u031d\u0007U\u0002\u0002\u031d\u033f\u0005",
  "x=&\u031e\u031f\u0007M\u0002\u0002\u031f\u033f\u0005x=%\u0320\u0321",
  "\u0007\u0014\u0002\u0002\u0321\u033f\u0005x=$\u0322\u0323\u0007\u0015",
  "\u0002\u0002\u0323\u033f\u0005x=#\u0324\u0325\u0007\u0016\u0002\u0002",
  "\u0325\u033f\u0005x=\"\u0326\u0327\u0007\u0017\u0002\u0002\u0327\u033f",
  "\u0005x=!\u0328\u0329\u0007\u0018\u0002\u0002\u0329\u033f\u0005x= \u032a",
  "\u032b\u0007\u0019\u0002\u0002\u032b\u033f\u0005x=\u001f\u032c\u032d",
  "\u0007p\u0002\u0002\u032d\u033f\u0005x=\u001e\u032e\u032f\u0007n\u0002",
  "\u0002\u032f\u0330\u0007\t\u0002\u0002\u0330\u0331\u0005x=\u0002\u0331",
  "\u0332\u0007\n\u0002\u0002\u0332\u033f\u0003\u0002\u0002\u0002\u0333",
  "\u033f\u00058\u001d\u0002\u0334\u033f\u0007]\u0002\u0002\u0335\u033f",
  "\u0007z\u0002\u0002\u0336\u033f\u0007k\u0002\u0002\u0337\u033f\u0005",
  "\u0084C\u0002\u0338\u033f\u0005f4\u0002\u0339\u033f\u0005l7\u0002\u033a",
  "\u033b\u0007\t\u0002\u0002\u033b\u033c\u0005v<\u0002\u033c\u033d\u0007",
  "\n\u0002\u0002\u033d\u033f\u0003\u0002\u0002\u0002\u033e\u030b\u0003",
  "\u0002\u0002\u0002\u033e\u030d\u0003\u0002\u0002\u0002\u033e\u0312\u0003",
  "\u0002\u0002\u0002\u033e\u0317\u0003\u0002\u0002\u0002\u033e\u031a\u0003",
  "\u0002\u0002\u0002\u033e\u031c\u0003\u0002\u0002\u0002\u033e\u031e\u0003",
  "\u0002\u0002\u0002\u033e\u0320\u0003\u0002\u0002\u0002\u033e\u0322\u0003",
  "\u0002\u0002\u0002\u033e\u0324\u0003\u0002\u0002\u0002\u033e\u0326\u0003",
  "\u0002\u0002\u0002\u033e\u0328\u0003\u0002\u0002\u0002\u033e\u032a\u0003",
  "\u0002\u0002\u0002\u033e\u032c\u0003\u0002\u0002\u0002\u033e\u032e\u0003",
  "\u0002\u0002\u0002\u033e\u0333\u0003\u0002\u0002\u0002\u033e\u0334\u0003",
  "\u0002\u0002\u0002\u033e\u0335\u0003\u0002\u0002\u0002\u033e\u0336\u0003",
  "\u0002\u0002\u0002\u033e\u0337\u0003\u0002\u0002\u0002\u033e\u0338\u0003",
  "\u0002\u0002\u0002\u033e\u0339\u0003\u0002\u0002\u0002\u033e\u033a\u0003",
  "\u0002\u0002\u0002\u033f\u038f\u0003\u0002\u0002\u0002\u0340\u0341\f",
  "\u001d\u0002\u0002\u0341\u0342\u0007\u001d\u0002\u0002\u0342\u038e\u0005",
  "x=\u001d\u0343\u0344\f\u001c\u0002\u0002\u0344\u0345\t\u0004\u0002\u0002",
  "\u0345\u038e\u0005x=\u001d\u0346\u0347\f\u001b\u0002\u0002\u0347\u0348",
  "\t\u0005\u0002\u0002\u0348\u038e\u0005x=\u001c\u0349\u034a\f\u001a\u0002",
  "\u0002\u034a\u034b\u0007\u001e\u0002\u0002\u034b\u038e\u0005x=\u001b",
  "\u034c\u034d\f\u0019\u0002\u0002\u034d\u034e\t\u0006\u0002\u0002\u034e",
  "\u038e\u0005x=\u001a\u034f\u0350\f\u0018\u0002\u0002\u0350\u0351\t\u0007",
  "\u0002\u0002\u0351\u038e\u0005x=\u0019\u0352\u0353\f\u0017\u0002\u0002",
  "\u0353\u0354\u0007L\u0002\u0002\u0354\u038e\u0005x=\u0018\u0355\u0356",
  "\f\u0016\u0002\u0002\u0356\u0357\u0007d\u0002\u0002\u0357\u038e\u0005",
  "x=\u0017\u0358\u0359\f\u0015\u0002\u0002\u0359\u035a\t\b\u0002\u0002",
  "\u035a\u038e\u0005x=\u0016\u035b\u035c\f\u0014\u0002\u0002\u035c\u035d",
  "\u0007+\u0002\u0002\u035d\u038e\u0005x=\u0015\u035e\u035f\f\u0013\u0002",
  "\u0002\u035f\u0360\u0007,\u0002\u0002\u0360\u038e\u0005x=\u0014\u0361",
  "\u0362\f\u0012\u0002\u0002\u0362\u0363\u0007-\u0002\u0002\u0363\u038e",
  "\u0005x=\u0013\u0364\u0365\f\u0011\u0002\u0002\u0365\u0366\u0007.\u0002",
  "\u0002\u0366\u038e\u0005x=\u0012\u0367\u0368\f\u0010\u0002\u0002\u0368",
  "\u0369\u0007/\u0002\u0002\u0369\u038e\u0005x=\u0011\u036a\u036b\f\u000f",
  "\u0002\u0002\u036b\u036c\u0007\u0010\u0002\u0002\u036c\u036d\u0005x",
  "=\u0002\u036d\u036e\u0007\u0011\u0002\u0002\u036e\u036f\u0005x=\u0010",
  "\u036f\u038e\u0003\u0002\u0002\u0002\u0370\u0371\f\u000e\u0002\u0002",
  "\u0371\u0372\u0007\u000f\u0002\u0002\u0372\u038e\u0005x=\u000e\u0373",
  "\u0374\f\r\u0002\u0002\u0374\u0375\u0005\u0082B\u0002\u0375\u0376\u0005",
  "x=\r\u0376\u038e\u0003\u0002\u0002\u0002\u0377\u0378\f.\u0002\u0002",
  "\u0378\u0379\u0007\u0007\u0002\u0002\u0379\u037a\u0005v<\u0002\u037a",
  "\u037b\u0007\b\u0002\u0002\u037b\u038e\u0003\u0002\u0002\u0002\u037c",
  "\u037e\f-\u0002\u0002\u037d\u037f\u0007\u0010\u0002\u0002\u037e\u037d",
  "\u0003\u0002\u0002\u0002\u037e\u037f\u0003\u0002\u0002\u0002\u037f\u0380",
  "\u0003\u0002\u0002\u0002\u0380\u0382\u0007\u0013\u0002\u0002\u0381\u0383",
  "\u0007\u001f\u0002\u0002\u0382\u0381\u0003\u0002\u0002\u0002\u0382\u0383",
  "\u0003\u0002\u0002\u0002\u0383\u0384\u0003\u0002\u0002\u0002\u0384\u038e",
  "\u0005\u008aF\u0002\u0385\u0386\f,\u0002\u0002\u0386\u038e\u0005r:\u0002",
  "\u0387\u0388\f)\u0002\u0002\u0388\u038e\u0007\u0014\u0002\u0002\u0389",
  "\u038a\f(\u0002\u0002\u038a\u038e\u0007\u0015\u0002\u0002\u038b\u038c",
  "\f\u000b\u0002\u0002\u038c\u038e\u0007|\u0002\u0002\u038d\u0340\u0003",
  "\u0002\u0002\u0002\u038d\u0343\u0003\u0002\u0002\u0002\u038d\u0346\u0003",
  "\u0002\u0002\u0002\u038d\u0349\u0003\u0002\u0002\u0002\u038d\u034c\u0003",
  "\u0002\u0002\u0002\u038d\u034f\u0003\u0002\u0002\u0002\u038d\u0352\u0003",
  "\u0002\u0002\u0002\u038d\u0355\u0003\u0002\u0002\u0002\u038d\u0358\u0003",
  "\u0002\u0002\u0002\u038d\u035b\u0003\u0002\u0002\u0002\u038d\u035e\u0003",
  "\u0002\u0002\u0002\u038d\u0361\u0003\u0002\u0002\u0002\u038d\u0364\u0003",
  "\u0002\u0002\u0002\u038d\u0367\u0003\u0002\u0002\u0002\u038d\u036a\u0003",
  "\u0002\u0002\u0002\u038d\u0370\u0003\u0002\u0002\u0002\u038d\u0373\u0003",
  "\u0002\u0002\u0002\u038d\u0377\u0003\u0002\u0002\u0002\u038d\u037c\u0003",
  "\u0002\u0002\u0002\u038d\u0385\u0003\u0002\u0002\u0002\u038d\u0387\u0003",
  "\u0002\u0002\u0002\u038d\u0389\u0003\u0002\u0002\u0002\u038d\u038b\u0003",
  "\u0002\u0002\u0002\u038e\u0391\u0003\u0002\u0002\u0002\u038f\u038d\u0003",
  "\u0002\u0002\u0002\u038f\u0390\u0003\u0002\u0002\u0002\u0390y\u0003",
  "\u0002\u0002\u0002\u0391\u038f\u0003\u0002\u0002\u0002\u0392\u0396\u0007",
  "z\u0002\u0002\u0393\u0396\u0005f4\u0002\u0394\u0396\u0005l7\u0002\u0395",
  "\u0392\u0003\u0002\u0002\u0002\u0395\u0393\u0003\u0002\u0002\u0002\u0395",
  "\u0394\u0003\u0002\u0002\u0002\u0396{\u0003\u0002\u0002\u0002\u0397",
  "\u03b0\u0005R*\u0002\u0398\u039a\u0007o\u0002\u0002\u0399\u0398\u0003",
  "\u0002\u0002\u0002\u0399\u039a\u0003\u0002\u0002\u0002\u039a\u039b\u0003",
  "\u0002\u0002\u0002\u039b\u039d\u0007\\\u0002\u0002\u039c\u039e\u0007",
  "\u001a\u0002\u0002\u039d\u039c\u0003\u0002\u0002\u0002\u039d\u039e\u0003",
  "\u0002\u0002\u0002\u039e\u039f\u0003\u0002\u0002\u0002\u039f\u03a1\u0007",
  "\t\u0002\u0002\u03a0\u03a2\u0005\\/\u0002\u03a1\u03a0\u0003\u0002\u0002",
  "\u0002\u03a1\u03a2\u0003\u0002\u0002\u0002\u03a2\u03a3\u0003\u0002\u0002",
  "\u0002\u03a3\u03a4\u0007\n\u0002\u0002\u03a4\u03a5\u0007\u000b\u0002",
  "\u0002\u03a5\u03a6\u0005b2\u0002\u03a6\u03a7\u0007\f\u0002\u0002\u03a7",
  "\u03b0\u0003\u0002\u0002\u0002\u03a8\u03aa\u0007o\u0002\u0002\u03a9",
  "\u03a8\u0003\u0002\u0002\u0002\u03a9\u03aa\u0003\u0002\u0002\u0002\u03aa",
  "\u03ab\u0003\u0002\u0002\u0002\u03ab\u03ac\u0005~@\u0002\u03ac\u03ad",
  "\u0007<\u0002\u0002\u03ad\u03ae\u0005\u0080A\u0002\u03ae\u03b0\u0003",
  "\u0002\u0002\u0002\u03af\u0397\u0003\u0002\u0002\u0002\u03af\u0399\u0003",
  "\u0002\u0002\u0002\u03af\u03a9\u0003\u0002\u0002\u0002\u03b0}\u0003",
  "\u0002\u0002\u0002\u03b1\u03b8\u0007z\u0002\u0002\u03b2\u03b4\u0007",
  "\t\u0002\u0002\u03b3\u03b5\u0005\\/\u0002\u03b4\u03b3\u0003\u0002\u0002",
  "\u0002\u03b4\u03b5\u0003\u0002\u0002\u0002\u03b5\u03b6\u0003\u0002\u0002",
  "\u0002\u03b6\u03b8\u0007\n\u0002\u0002\u03b7\u03b1\u0003\u0002\u0002",
  "\u0002\u03b7\u03b2\u0003\u0002\u0002\u0002\u03b8\u007f\u0003\u0002\u0002",
  "\u0002\u03b9\u03bf\u0005x=\u0002\u03ba\u03bb\u0007\u000b\u0002\u0002",
  "\u03bb\u03bc\u0005b2\u0002\u03bc\u03bd\u0007\f\u0002\u0002\u03bd\u03bf",
  "\u0003\u0002\u0002\u0002\u03be\u03b9\u0003\u0002\u0002\u0002\u03be\u03ba",
  "\u0003\u0002\u0002\u0002\u03bf\u0081\u0003\u0002\u0002\u0002\u03c0\u03c1",
  "\t\t\u0002\u0002\u03c1\u0083\u0003\u0002\u0002\u0002\u03c2\u03ca\u0007",
  "=\u0002\u0002\u03c3\u03ca\u0007>\u0002\u0002\u03c4\u03ca\u0007{\u0002",
  "\u0002\u03c5\u03ca\u0007|\u0002\u0002\u03c6\u03ca\u0007\u0006\u0002",
  "\u0002\u03c7\u03ca\u0005\u0086D\u0002\u03c8\u03ca\u0005\u0088E\u0002",
  "\u03c9\u03c2\u0003\u0002\u0002\u0002\u03c9\u03c3\u0003\u0002\u0002\u0002",
  "\u03c9\u03c4\u0003\u0002\u0002\u0002\u03c9\u03c5\u0003\u0002\u0002\u0002",
  "\u03c9\u03c6\u0003\u0002\u0002\u0002\u03c9\u03c7\u0003\u0002\u0002\u0002",
  "\u03c9\u03c8\u0003\u0002\u0002\u0002\u03ca\u0085\u0003\u0002\u0002\u0002",
  "\u03cb\u03cc\t\n\u0002\u0002\u03cc\u0087\u0003\u0002\u0002\u0002\u03cd",
  "\u03ce\t\u000b\u0002\u0002\u03ce\u0089\u0003\u0002\u0002\u0002\u03cf",
  "\u03d2\u0007z\u0002\u0002\u03d0\u03d2\u0005\u008cG\u0002\u03d1\u03cf",
  "\u0003\u0002\u0002\u0002\u03d1\u03d0\u0003\u0002\u0002\u0002\u03d2\u008b",
  "\u0003\u0002\u0002\u0002\u03d3\u03d7\u0005\u008eH\u0002\u03d4\u03d7",
  "\u0007=\u0002\u0002\u03d5\u03d7\u0007>\u0002\u0002\u03d6\u03d3\u0003",
  "\u0002\u0002\u0002\u03d6\u03d4\u0003\u0002\u0002\u0002\u03d6\u03d5\u0003",
  "\u0002\u0002\u0002\u03d7\u008d\u0003\u0002\u0002\u0002\u03d8\u03d9\t",
  "\f\u0002\u0002\u03d9\u008f\u0003\u0002\u0002\u0002\u03da\u03db\u0007",
  "z\u0002\u0002\u03db\u03dc\u0005p9\u0002\u03dc\u0091\u0003\u0002\u0002",
  "\u0002\u03dd\u03de\u0007z\u0002\u0002\u03de\u03df\u0005p9\u0002\u03df",
  "\u0093\u0003\u0002\u0002\u0002\u03e0\u03e1\t\r\u0002\u0002\u03e1\u0095",
  "\u0003\u0002\u0002\u0002w\u0097\u009a\u00b4\u00b8\u00bf\u00c6\u00c9",
  "\u00cb\u00ce\u00d2\u00d9\u00e1\u00e6\u00e8\u00f2\u00fa\u00ff\u0108\u0110",
  "\u0114\u0119\u0124\u012a\u012e\u0131\u0134\u0144\u0158\u015c\u0160\u0168",
  "\u0171\u0176\u0186\u018c\u0192\u0198\u019e\u01b0\u01b4\u01b6\u01bd\u01c3",
  "\u01c7\u01cb\u01ce\u01d0\u01d4\u01d7\u01e5\u01eb\u01ee\u01f3\u01f6\u0201",
  "\u0205\u020a\u0217\u021d\u0225\u022b\u0231\u0234\u0237\u023c\u0244\u0247",
  "\u0251\u0254\u0259\u0260\u0267\u026c\u026f\u0274\u027a\u027f\u0288\u028c",
  "\u0291\u0296\u029c\u02a0\u02aa\u02ad\u02b0\u02bf\u02c2\u02c7\u02de\u02e1",
  "\u02ea\u02f2\u02f6\u02f8\u02fd\u0301\u0308\u030f\u0315\u033e\u037e\u0382",
  "\u038d\u038f\u0395\u0399\u039d\u03a1\u03a9\u03af\u03b4\u03b7\u03be\u03c9",
  "\u03d1\u03d6"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, null, null, null, null, "'['", "']'", "'('",
  "')'", "'{'", "'}'", "';'", "','", "'='", "'?'", "':'",
  "'...'", "'.'", "'++'", "'--'", "'+'", "'-'", "'~'",
  "'!'", "'*'", "'/'", "'%'", "'**'", "'??'", "'#'",
  "'>>'", "'<<'", "'>>>'", "'<'", "'>'", "'<='", "'>='",
  "'=='", "'!='", "'==='", "'!=='", "'&'", "'^'", "'|'",
  "'&&'", "'||'", "'*='", "'/='", "'%='", "'+='", "'-='",
  "'<<='", "'>>='", "'>>>='", "'&='", "'^='", "'|='",
  "'**='", "'=>'", "'null'", null, null, null, null,
  null, null, null, null, null, null, "'break'", "'do'",
  "'collectionof'", "'elementsof'", "'instanceof'", "'typeof'",
  "'case'", "'else'", "'new'", "'var'", "'catch'", "'finally'",
  "'return'", "'void'", "'continue'", "'for'", "'foreach'",
  "'switch'", "'while'", "'debugger'", "'function'",
  "'this'", "'with'", "'default'", "'if'", "'throw'",
  "'raise'", "'delete'", "'in'", "'try'", "'as'", "'from'",
  "'class'", "'enum'", "'extends'", "'super'", "'const'",
  "'export'", "'import'", "'async'", "'await'", "'implements'",
  "'let'", "'private'", "'public'", "'interface'", "'package'",
  "'protected'", "'static'", "'yield'" ];

var symbolicNames = [ null, "HashBangLine", "MultiLineComment", "SingleLineComment",
  "RegularExpressionLiteral", "OpenBracket", "CloseBracket",
  "OpenParen", "CloseParen", "OpenBrace", "CloseBrace",
  "SemiColon", "Comma", "Assign", "QuestionMark", "Colon",
  "Ellipsis", "Dot", "PlusPlus", "MinusMinus", "Plus",
  "Minus", "BitNot", "Not", "Multiply", "Divide", "Modulus",
  "Power", "NullCoalesce", "Hashtag", "RightShiftArithmetic",
  "LeftShiftArithmetic", "RightShiftLogical", "LessThan",
  "MoreThan", "LessThanEquals", "GreaterThanEquals",
  "Equals_", "NotEquals", "IdentityEquals", "IdentityNotEquals",
  "BitAnd", "BitXOr", "BitOr", "And", "Or", "MultiplyAssign",
  "DivideAssign", "ModulusAssign", "PlusAssign", "MinusAssign",
  "LeftShiftArithmeticAssign", "RightShiftArithmeticAssign",
  "RightShiftLogicalAssign", "BitAndAssign", "BitXorAssign",
  "BitOrAssign", "PowerAssign", "ARROW", "NullLiteral",
  "BooleanLiteral", "DecimalLiteral", "HexIntegerLiteral",
  "OctalIntegerLiteral", "OctalIntegerLiteral2", "BinaryIntegerLiteral",
  "BigHexIntegerLiteral", "BigOctalIntegerLiteral",
  "BigBinaryIntegerLiteral", "BigDecimalIntegerLiteral",
  "Break", "Do", "CollectionOf", "ElementOf", "Instanceof",
  "Typeof", "Case", "Else", "New", "Var", "Catch", "Finally",
  "Return", "Void", "Continue", "For", "Foreach", "Switch",
  "While", "Debugger", "Function", "This", "With", "Default",
  "If", "Throw", "Raise", "Delete", "In", "Try", "As",
  "From", "Class", "Enum", "Extends", "Super", "Const",
  "Export", "Import", "Async", "Await", "Implements",
  "Let", "Private", "Public", "Interface", "Package",
  "Protected", "Static", "Yield", "Identifier", "StringLiteral",
  "TemplateStringLiteral", "WhiteSpaces", "LineTerminator",
  "HtmlComment", "CDataComment", "UnexpectedCharacter" ];

var ruleNames = [ "program", "sourceElement", "statement", "block", "statementList",
  "importStatement", "importFromBlock", "moduleItems",
  "importDefault", "importNamespace", "importFrom", "aliasName",
  "exportStatement", "exportFromBlock", "declaration",
  "variableStatement", "variableDeclarationList", "variableDeclaration",
  "variableType", "emptyStatement", "expressionStatement",
  "ifStatement", "iterationStatement", "varModifier", "continueStatement",
  "breakStatement", "returnStatement", "yieldStatement",
  "withStatement", "switchStatement", "caseBlock", "caseClauses",
  "caseClause", "defaultClause", "labelledStatement", "throwStatement",
  "tryStatement", "catchProduction", "finallyProduction",
  "debuggerStatement", "functionDeclaration", "classDeclaration",
  "classTail", "classElement", "methodDefinition", "formalParameterList",
  "formalParameterArg", "lastFormalParameterArg", "functionBody",
  "sourceElements", "arrayLiteral", "elementList", "arrayElement",
  "objectLiteral", "propertyAssignment", "propertyName",
  "arguments", "argument", "expressionSequence", "singleExpression",
  "assignable", "anoymousFunction", "arrowFunctionParameters",
  "arrowFunctionBody", "assignmentOperator", "literal",
  "numericLiteral", "bigintLiteral", "identifierName",
  "reservedWord", "keyword", "getter", "setter", "eos" ];

function ABSLParser(input) {
  antlr4.Parser.call(this, input);
  this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
  this.ruleNames = ruleNames;
  this.literalNames = literalNames;
  this.symbolicNames = symbolicNames;
  return this;
}

ABSLParser.prototype = Object.create(antlr4.Parser.prototype);
ABSLParser.prototype.constructor = ABSLParser;

Object.defineProperty(ABSLParser.prototype, "atn", {
  get : function() {
    return atn;
  }
});

ABSLParser.EOF = antlr4.Token.EOF;
ABSLParser.HashBangLine = 1;
ABSLParser.MultiLineComment = 2;
ABSLParser.SingleLineComment = 3;
ABSLParser.RegularExpressionLiteral = 4;
ABSLParser.OpenBracket = 5;
ABSLParser.CloseBracket = 6;
ABSLParser.OpenParen = 7;
ABSLParser.CloseParen = 8;
ABSLParser.OpenBrace = 9;
ABSLParser.CloseBrace = 10;
ABSLParser.SemiColon = 11;
ABSLParser.Comma = 12;
ABSLParser.Assign = 13;
ABSLParser.QuestionMark = 14;
ABSLParser.Colon = 15;
ABSLParser.Ellipsis = 16;
ABSLParser.Dot = 17;
ABSLParser.PlusPlus = 18;
ABSLParser.MinusMinus = 19;
ABSLParser.Plus = 20;
ABSLParser.Minus = 21;
ABSLParser.BitNot = 22;
ABSLParser.Not = 23;
ABSLParser.Multiply = 24;
ABSLParser.Divide = 25;
ABSLParser.Modulus = 26;
ABSLParser.Power = 27;
ABSLParser.NullCoalesce = 28;
ABSLParser.Hashtag = 29;
ABSLParser.RightShiftArithmetic = 30;
ABSLParser.LeftShiftArithmetic = 31;
ABSLParser.RightShiftLogical = 32;
ABSLParser.LessThan = 33;
ABSLParser.MoreThan = 34;
ABSLParser.LessThanEquals = 35;
ABSLParser.GreaterThanEquals = 36;
ABSLParser.Equals_ = 37;
ABSLParser.NotEquals = 38;
ABSLParser.IdentityEquals = 39;
ABSLParser.IdentityNotEquals = 40;
ABSLParser.BitAnd = 41;
ABSLParser.BitXOr = 42;
ABSLParser.BitOr = 43;
ABSLParser.And = 44;
ABSLParser.Or = 45;
ABSLParser.MultiplyAssign = 46;
ABSLParser.DivideAssign = 47;
ABSLParser.ModulusAssign = 48;
ABSLParser.PlusAssign = 49;
ABSLParser.MinusAssign = 50;
ABSLParser.LeftShiftArithmeticAssign = 51;
ABSLParser.RightShiftArithmeticAssign = 52;
ABSLParser.RightShiftLogicalAssign = 53;
ABSLParser.BitAndAssign = 54;
ABSLParser.BitXorAssign = 55;
ABSLParser.BitOrAssign = 56;
ABSLParser.PowerAssign = 57;
ABSLParser.ARROW = 58;
ABSLParser.NullLiteral = 59;
ABSLParser.BooleanLiteral = 60;
ABSLParser.DecimalLiteral = 61;
ABSLParser.HexIntegerLiteral = 62;
ABSLParser.OctalIntegerLiteral = 63;
ABSLParser.OctalIntegerLiteral2 = 64;
ABSLParser.BinaryIntegerLiteral = 65;
ABSLParser.BigHexIntegerLiteral = 66;
ABSLParser.BigOctalIntegerLiteral = 67;
ABSLParser.BigBinaryIntegerLiteral = 68;
ABSLParser.BigDecimalIntegerLiteral = 69;
ABSLParser.Break = 70;
ABSLParser.Do = 71;
ABSLParser.CollectionOf = 72;
ABSLParser.ElementOf = 73;
ABSLParser.Instanceof = 74;
ABSLParser.Typeof = 75;
ABSLParser.Case = 76;
ABSLParser.Else = 77;
ABSLParser.New = 78;
ABSLParser.Var = 79;
ABSLParser.Catch = 80;
ABSLParser.Finally = 81;
ABSLParser.Return = 82;
ABSLParser.Void = 83;
ABSLParser.Continue = 84;
ABSLParser.For = 85;
ABSLParser.Foreach = 86;
ABSLParser.Switch = 87;
ABSLParser.While = 88;
ABSLParser.Debugger = 89;
ABSLParser.Function = 90;
ABSLParser.This = 91;
ABSLParser.With = 92;
ABSLParser.Default = 93;
ABSLParser.If = 94;
ABSLParser.Throw = 95;
ABSLParser.Raise = 96;
ABSLParser.Delete = 97;
ABSLParser.In = 98;
ABSLParser.Try = 99;
ABSLParser.As = 100;
ABSLParser.From = 101;
ABSLParser.Class = 102;
ABSLParser.Enum = 103;
ABSLParser.Extends = 104;
ABSLParser.Super = 105;
ABSLParser.Const = 106;
ABSLParser.Export = 107;
ABSLParser.Import = 108;
ABSLParser.Async = 109;
ABSLParser.Await = 110;
ABSLParser.Implements = 111;
ABSLParser.Let = 112;
ABSLParser.Private = 113;
ABSLParser.Public = 114;
ABSLParser.Interface = 115;
ABSLParser.Package = 116;
ABSLParser.Protected = 117;
ABSLParser.Static = 118;
ABSLParser.Yield = 119;
ABSLParser.Identifier = 120;
ABSLParser.StringLiteral = 121;
ABSLParser.TemplateStringLiteral = 122;
ABSLParser.WhiteSpaces = 123;
ABSLParser.LineTerminator = 124;
ABSLParser.HtmlComment = 125;
ABSLParser.CDataComment = 126;
ABSLParser.UnexpectedCharacter = 127;

ABSLParser.RULE_program = 0;
ABSLParser.RULE_sourceElement = 1;
ABSLParser.RULE_statement = 2;
ABSLParser.RULE_block = 3;
ABSLParser.RULE_statementList = 4;
ABSLParser.RULE_importStatement = 5;
ABSLParser.RULE_importFromBlock = 6;
ABSLParser.RULE_moduleItems = 7;
ABSLParser.RULE_importDefault = 8;
ABSLParser.RULE_importNamespace = 9;
ABSLParser.RULE_importFrom = 10;
ABSLParser.RULE_aliasName = 11;
ABSLParser.RULE_exportStatement = 12;
ABSLParser.RULE_exportFromBlock = 13;
ABSLParser.RULE_declaration = 14;
ABSLParser.RULE_variableStatement = 15;
ABSLParser.RULE_variableDeclarationList = 16;
ABSLParser.RULE_variableDeclaration = 17;
ABSLParser.RULE_variableType = 18;
ABSLParser.RULE_emptyStatement = 19;
ABSLParser.RULE_expressionStatement = 20;
ABSLParser.RULE_ifStatement = 21;
ABSLParser.RULE_iterationStatement = 22;
ABSLParser.RULE_varModifier = 23;
ABSLParser.RULE_continueStatement = 24;
ABSLParser.RULE_breakStatement = 25;
ABSLParser.RULE_returnStatement = 26;
ABSLParser.RULE_yieldStatement = 27;
ABSLParser.RULE_withStatement = 28;
ABSLParser.RULE_switchStatement = 29;
ABSLParser.RULE_caseBlock = 30;
ABSLParser.RULE_caseClauses = 31;
ABSLParser.RULE_caseClause = 32;
ABSLParser.RULE_defaultClause = 33;
ABSLParser.RULE_labelledStatement = 34;
ABSLParser.RULE_throwStatement = 35;
ABSLParser.RULE_tryStatement = 36;
ABSLParser.RULE_catchProduction = 37;
ABSLParser.RULE_finallyProduction = 38;
ABSLParser.RULE_debuggerStatement = 39;
ABSLParser.RULE_functionDeclaration = 40;
ABSLParser.RULE_classDeclaration = 41;
ABSLParser.RULE_classTail = 42;
ABSLParser.RULE_classElement = 43;
ABSLParser.RULE_methodDefinition = 44;
ABSLParser.RULE_formalParameterList = 45;
ABSLParser.RULE_formalParameterArg = 46;
ABSLParser.RULE_lastFormalParameterArg = 47;
ABSLParser.RULE_functionBody = 48;
ABSLParser.RULE_sourceElements = 49;
ABSLParser.RULE_arrayLiteral = 50;
ABSLParser.RULE_elementList = 51;
ABSLParser.RULE_arrayElement = 52;
ABSLParser.RULE_objectLiteral = 53;
ABSLParser.RULE_propertyAssignment = 54;
ABSLParser.RULE_propertyName = 55;
ABSLParser.RULE_arguments = 56;
ABSLParser.RULE_argument = 57;
ABSLParser.RULE_expressionSequence = 58;
ABSLParser.RULE_singleExpression = 59;
ABSLParser.RULE_assignable = 60;
ABSLParser.RULE_anoymousFunction = 61;
ABSLParser.RULE_arrowFunctionParameters = 62;
ABSLParser.RULE_arrowFunctionBody = 63;
ABSLParser.RULE_assignmentOperator = 64;
ABSLParser.RULE_literal = 65;
ABSLParser.RULE_numericLiteral = 66;
ABSLParser.RULE_bigintLiteral = 67;
ABSLParser.RULE_identifierName = 68;
ABSLParser.RULE_reservedWord = 69;
ABSLParser.RULE_keyword = 70;
ABSLParser.RULE_getter = 71;
ABSLParser.RULE_setter = 72;
ABSLParser.RULE_eos = 73;


function ProgramContext(parser, parent, invokingState) {
  if(parent === undefined) {
	    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = ABSLParser.RULE_program;
  return this;
}

ProgramContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProgramContext.prototype.constructor = ProgramContext;

ProgramContext.prototype.EOF = function() {
  return this.getToken(ABSLParser.EOF, 0);
};

ProgramContext.prototype.HashBangLine = function() {
  return this.getToken(ABSLParser.HashBangLine, 0);
};

ProgramContext.prototype.sourceElements = function() {
  return this.getTypedRuleContext(SourceElementsContext, 0);
};

ProgramContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterProgram(this);
  }
};

ProgramContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitProgram(this);
  }
};

ProgramContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitProgram(this);
  } else {
    return visitor.visitChildren(this);
  }
};




ABSLParser.ProgramContext = ProgramContext;

ABSLParser.prototype.program = function() {

  var localctx = new ProgramContext(this, this._ctx, this.state);
  this.enterRule(localctx, 0, ABSLParser.RULE_program);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 149;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if(_la === ABSLParser.HashBangLine) {
      this.state = 148;
      this.match(ABSLParser.HashBangLine);
    }

    this.state = 152;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ABSLParser.RegularExpressionLiteral) | (1 << ABSLParser.OpenBracket) | (1 << ABSLParser.OpenParen) | (1 << ABSLParser.OpenBrace) | (1 << ABSLParser.SemiColon) | (1 << ABSLParser.PlusPlus) | (1 << ABSLParser.MinusMinus) | (1 << ABSLParser.Plus) | (1 << ABSLParser.Minus) | (1 << ABSLParser.BitNot) | (1 << ABSLParser.Not))) !== 0) || ((((_la - 59)) & ~0x1f) == 0 && ((1 << (_la - 59)) & ((1 << (ABSLParser.NullLiteral - 59)) | (1 << (ABSLParser.BooleanLiteral - 59)) | (1 << (ABSLParser.DecimalLiteral - 59)) | (1 << (ABSLParser.HexIntegerLiteral - 59)) | (1 << (ABSLParser.OctalIntegerLiteral - 59)) | (1 << (ABSLParser.OctalIntegerLiteral2 - 59)) | (1 << (ABSLParser.BinaryIntegerLiteral - 59)) | (1 << (ABSLParser.BigHexIntegerLiteral - 59)) | (1 << (ABSLParser.BigOctalIntegerLiteral - 59)) | (1 << (ABSLParser.BigBinaryIntegerLiteral - 59)) | (1 << (ABSLParser.BigDecimalIntegerLiteral - 59)) | (1 << (ABSLParser.Break - 59)) | (1 << (ABSLParser.Do - 59)) | (1 << (ABSLParser.Typeof - 59)) | (1 << (ABSLParser.New - 59)) | (1 << (ABSLParser.Var - 59)) | (1 << (ABSLParser.Return - 59)) | (1 << (ABSLParser.Void - 59)) | (1 << (ABSLParser.Continue - 59)) | (1 << (ABSLParser.For - 59)) | (1 << (ABSLParser.Foreach - 59)) | (1 << (ABSLParser.Switch - 59)) | (1 << (ABSLParser.While - 59)) | (1 << (ABSLParser.Debugger - 59)) | (1 << (ABSLParser.Function - 59)))) !== 0) || ((((_la - 91)) & ~0x1f) == 0 && ((1 << (_la - 91)) & ((1 << (ABSLParser.This - 91)) | (1 << (ABSLParser.With - 91)) | (1 << (ABSLParser.If - 91)) | (1 << (ABSLParser.Throw - 91)) | (1 << (ABSLParser.Raise - 91)) | (1 << (ABSLParser.Delete - 91)) | (1 << (ABSLParser.Try - 91)) | (1 << (ABSLParser.Class - 91)) | (1 << (ABSLParser.Super - 91)) | (1 << (ABSLParser.Const - 91)) | (1 << (ABSLParser.Export - 91)) | (1 << (ABSLParser.Import - 91)) | (1 << (ABSLParser.Async - 91)) | (1 << (ABSLParser.Await - 91)) | (1 << (ABSLParser.Let - 91)) | (1 << (ABSLParser.Yield - 91)) | (1 << (ABSLParser.Identifier - 91)) | (1 << (ABSLParser.StringLiteral - 91)) | (1 << (ABSLParser.TemplateStringLiteral - 91)))) !== 0)) {
      this.state = 151;
      this.sourceElements();
    }

    this.state = 154;
    this.match(ABSLParser.EOF);
  } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
  } finally {
    this.exitRule();
  }
  return localctx;
};


function SourceElementContext(parser, parent, invokingState) {
  if(parent === undefined) {
	    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = ABSLParser.RULE_sourceElement;
  return this;
}

SourceElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SourceElementContext.prototype.constructor = SourceElementContext;

SourceElementContext.prototype.statement = function() {
  return this.getTypedRuleContext(StatementContext, 0);
};

SourceElementContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterSourceElement(this);
  }
};

SourceElementContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitSourceElement(this);
  }
};

SourceElementContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitSourceElement(this);
  } else {
    return visitor.visitChildren(this);
  }
};




ABSLParser.SourceElementContext = SourceElementContext;

ABSLParser.prototype.sourceElement = function() {

  var localctx = new SourceElementContext(this, this._ctx, this.state);
  this.enterRule(localctx, 2, ABSLParser.RULE_sourceElement);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 156;
    this.statement();
  } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
  } finally {
    this.exitRule();
  }
  return localctx;
};


function StatementContext(parser, parent, invokingState) {
  if(parent === undefined) {
	    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = ABSLParser.RULE_statement;
  return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;

StatementContext.prototype.block = function() {
  return this.getTypedRuleContext(BlockContext, 0);
};

StatementContext.prototype.variableStatement = function() {
  return this.getTypedRuleContext(VariableStatementContext, 0);
};

StatementContext.prototype.importStatement = function() {
  return this.getTypedRuleContext(ImportStatementContext, 0);
};

StatementContext.prototype.exportStatement = function() {
  return this.getTypedRuleContext(ExportStatementContext, 0);
};

StatementContext.prototype.emptyStatement = function() {
  return this.getTypedRuleContext(EmptyStatementContext, 0);
};

StatementContext.prototype.classDeclaration = function() {
  return this.getTypedRuleContext(ClassDeclarationContext, 0);
};

StatementContext.prototype.expressionStatement = function() {
  return this.getTypedRuleContext(ExpressionStatementContext, 0);
};

StatementContext.prototype.ifStatement = function() {
  return this.getTypedRuleContext(IfStatementContext, 0);
};

StatementContext.prototype.iterationStatement = function() {
  return this.getTypedRuleContext(IterationStatementContext, 0);
};

StatementContext.prototype.continueStatement = function() {
  return this.getTypedRuleContext(ContinueStatementContext, 0);
};

StatementContext.prototype.breakStatement = function() {
  return this.getTypedRuleContext(BreakStatementContext, 0);
};

StatementContext.prototype.returnStatement = function() {
  return this.getTypedRuleContext(ReturnStatementContext, 0);
};

StatementContext.prototype.yieldStatement = function() {
  return this.getTypedRuleContext(YieldStatementContext, 0);
};

StatementContext.prototype.withStatement = function() {
  return this.getTypedRuleContext(WithStatementContext, 0);
};

StatementContext.prototype.labelledStatement = function() {
  return this.getTypedRuleContext(LabelledStatementContext, 0);
};

StatementContext.prototype.switchStatement = function() {
  return this.getTypedRuleContext(SwitchStatementContext, 0);
};

StatementContext.prototype.throwStatement = function() {
  return this.getTypedRuleContext(ThrowStatementContext, 0);
};

StatementContext.prototype.tryStatement = function() {
  return this.getTypedRuleContext(TryStatementContext, 0);
};

StatementContext.prototype.debuggerStatement = function() {
  return this.getTypedRuleContext(DebuggerStatementContext, 0);
};

StatementContext.prototype.functionDeclaration = function() {
  return this.getTypedRuleContext(FunctionDeclarationContext, 0);
};

StatementContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterStatement(this);
  }
};

StatementContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitStatement(this);
  }
};

StatementContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitStatement(this);
  } else {
    return visitor.visitChildren(this);
  }
};




ABSLParser.StatementContext = StatementContext;

ABSLParser.prototype.statement = function() {

  var localctx = new StatementContext(this, this._ctx, this.state);
  this.enterRule(localctx, 4, ABSLParser.RULE_statement);
  try {
    this.state = 178;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 2, this._ctx);
    switch(la_) {
    case 1:
      this.enterOuterAlt(localctx, 1);
      this.state = 158;
      this.block();
      break;

    case 2:
      this.enterOuterAlt(localctx, 2);
      this.state = 159;
      this.variableStatement();
      break;

    case 3:
      this.enterOuterAlt(localctx, 3);
      this.state = 160;
      this.importStatement();
      break;

    case 4:
      this.enterOuterAlt(localctx, 4);
      this.state = 161;
      this.exportStatement();
      break;

    case 5:
      this.enterOuterAlt(localctx, 5);
      this.state = 162;
      this.emptyStatement();
      break;

    case 6:
      this.enterOuterAlt(localctx, 6);
      this.state = 163;
      this.classDeclaration();
      break;

    case 7:
      this.enterOuterAlt(localctx, 7);
      this.state = 164;
      this.expressionStatement();
      break;

    case 8:
      this.enterOuterAlt(localctx, 8);
      this.state = 165;
      this.ifStatement();
      break;

    case 9:
      this.enterOuterAlt(localctx, 9);
      this.state = 166;
      this.iterationStatement();
      break;

    case 10:
      this.enterOuterAlt(localctx, 10);
      this.state = 167;
      this.continueStatement();
      break;

    case 11:
      this.enterOuterAlt(localctx, 11);
      this.state = 168;
      this.breakStatement();
      break;

    case 12:
      this.enterOuterAlt(localctx, 12);
      this.state = 169;
      this.returnStatement();
      break;

    case 13:
      this.enterOuterAlt(localctx, 13);
      this.state = 170;
      this.yieldStatement();
      break;

    case 14:
      this.enterOuterAlt(localctx, 14);
      this.state = 171;
      this.withStatement();
      break;

    case 15:
      this.enterOuterAlt(localctx, 15);
      this.state = 172;
      this.labelledStatement();
      break;

    case 16:
      this.enterOuterAlt(localctx, 16);
      this.state = 173;
      this.switchStatement();
      break;

    case 17:
      this.enterOuterAlt(localctx, 17);
      this.state = 174;
      this.throwStatement();
      break;

    case 18:
      this.enterOuterAlt(localctx, 18);
      this.state = 175;
      this.tryStatement();
      break;

    case 19:
      this.enterOuterAlt(localctx, 19);
      this.state = 176;
      this.debuggerStatement();
      break;

    case 20:
      this.enterOuterAlt(localctx, 20);
      this.state = 177;
      this.functionDeclaration();
      break;

    }
  } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
  } finally {
    this.exitRule();
  }
  return localctx;
};


function BlockContext(parser, parent, invokingState) {
  if(parent === undefined) {
	    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = ABSLParser.RULE_block;
  return this;
}

BlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockContext.prototype.constructor = BlockContext;

BlockContext.prototype.OpenBrace = function() {
  return this.getToken(ABSLParser.OpenBrace, 0);
};

BlockContext.prototype.CloseBrace = function() {
  return this.getToken(ABSLParser.CloseBrace, 0);
};

BlockContext.prototype.statementList = function() {
  return this.getTypedRuleContext(StatementListContext, 0);
};

BlockContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterBlock(this);
  }
};

BlockContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitBlock(this);
  }
};

BlockContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitBlock(this);
  } else {
    return visitor.visitChildren(this);
  }
};




ABSLParser.BlockContext = BlockContext;

ABSLParser.prototype.block = function() {

  var localctx = new BlockContext(this, this._ctx, this.state);
  this.enterRule(localctx, 6, ABSLParser.RULE_block);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 180;
    this.match(ABSLParser.OpenBrace);
    this.state = 182;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ABSLParser.RegularExpressionLiteral) | (1 << ABSLParser.OpenBracket) | (1 << ABSLParser.OpenParen) | (1 << ABSLParser.OpenBrace) | (1 << ABSLParser.SemiColon) | (1 << ABSLParser.PlusPlus) | (1 << ABSLParser.MinusMinus) | (1 << ABSLParser.Plus) | (1 << ABSLParser.Minus) | (1 << ABSLParser.BitNot) | (1 << ABSLParser.Not))) !== 0) || ((((_la - 59)) & ~0x1f) == 0 && ((1 << (_la - 59)) & ((1 << (ABSLParser.NullLiteral - 59)) | (1 << (ABSLParser.BooleanLiteral - 59)) | (1 << (ABSLParser.DecimalLiteral - 59)) | (1 << (ABSLParser.HexIntegerLiteral - 59)) | (1 << (ABSLParser.OctalIntegerLiteral - 59)) | (1 << (ABSLParser.OctalIntegerLiteral2 - 59)) | (1 << (ABSLParser.BinaryIntegerLiteral - 59)) | (1 << (ABSLParser.BigHexIntegerLiteral - 59)) | (1 << (ABSLParser.BigOctalIntegerLiteral - 59)) | (1 << (ABSLParser.BigBinaryIntegerLiteral - 59)) | (1 << (ABSLParser.BigDecimalIntegerLiteral - 59)) | (1 << (ABSLParser.Break - 59)) | (1 << (ABSLParser.Do - 59)) | (1 << (ABSLParser.Typeof - 59)) | (1 << (ABSLParser.New - 59)) | (1 << (ABSLParser.Var - 59)) | (1 << (ABSLParser.Return - 59)) | (1 << (ABSLParser.Void - 59)) | (1 << (ABSLParser.Continue - 59)) | (1 << (ABSLParser.For - 59)) | (1 << (ABSLParser.Foreach - 59)) | (1 << (ABSLParser.Switch - 59)) | (1 << (ABSLParser.While - 59)) | (1 << (ABSLParser.Debugger - 59)) | (1 << (ABSLParser.Function - 59)))) !== 0) || ((((_la - 91)) & ~0x1f) == 0 && ((1 << (_la - 91)) & ((1 << (ABSLParser.This - 91)) | (1 << (ABSLParser.With - 91)) | (1 << (ABSLParser.If - 91)) | (1 << (ABSLParser.Throw - 91)) | (1 << (ABSLParser.Raise - 91)) | (1 << (ABSLParser.Delete - 91)) | (1 << (ABSLParser.Try - 91)) | (1 << (ABSLParser.Class - 91)) | (1 << (ABSLParser.Super - 91)) | (1 << (ABSLParser.Const - 91)) | (1 << (ABSLParser.Export - 91)) | (1 << (ABSLParser.Import - 91)) | (1 << (ABSLParser.Async - 91)) | (1 << (ABSLParser.Await - 91)) | (1 << (ABSLParser.Let - 91)) | (1 << (ABSLParser.Yield - 91)) | (1 << (ABSLParser.Identifier - 91)) | (1 << (ABSLParser.StringLiteral - 91)) | (1 << (ABSLParser.TemplateStringLiteral - 91)))) !== 0)) {
      this.state = 181;
      this.statementList();
    }

    this.state = 184;
    this.match(ABSLParser.CloseBrace);
  } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
  } finally {
    this.exitRule();
  }
  return localctx;
};


function StatementListContext(parser, parent, invokingState) {
  if(parent === undefined) {
	    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = ABSLParser.RULE_statementList;
  return this;
}

StatementListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementListContext.prototype.constructor = StatementListContext;

StatementListContext.prototype.statement = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(StatementContext);
  } else {
    return this.getTypedRuleContext(StatementContext, i);
  }
};

StatementListContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterStatementList(this);
  }
};

StatementListContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitStatementList(this);
  }
};

StatementListContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitStatementList(this);
  } else {
    return visitor.visitChildren(this);
  }
};




ABSLParser.StatementListContext = StatementListContext;

ABSLParser.prototype.statementList = function() {

  var localctx = new StatementListContext(this, this._ctx, this.state);
  this.enterRule(localctx, 8, ABSLParser.RULE_statementList);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 187;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    do {
      this.state = 186;
      this.statement();
      this.state = 189;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ABSLParser.RegularExpressionLiteral) | (1 << ABSLParser.OpenBracket) | (1 << ABSLParser.OpenParen) | (1 << ABSLParser.OpenBrace) | (1 << ABSLParser.SemiColon) | (1 << ABSLParser.PlusPlus) | (1 << ABSLParser.MinusMinus) | (1 << ABSLParser.Plus) | (1 << ABSLParser.Minus) | (1 << ABSLParser.BitNot) | (1 << ABSLParser.Not))) !== 0) || ((((_la - 59)) & ~0x1f) == 0 && ((1 << (_la - 59)) & ((1 << (ABSLParser.NullLiteral - 59)) | (1 << (ABSLParser.BooleanLiteral - 59)) | (1 << (ABSLParser.DecimalLiteral - 59)) | (1 << (ABSLParser.HexIntegerLiteral - 59)) | (1 << (ABSLParser.OctalIntegerLiteral - 59)) | (1 << (ABSLParser.OctalIntegerLiteral2 - 59)) | (1 << (ABSLParser.BinaryIntegerLiteral - 59)) | (1 << (ABSLParser.BigHexIntegerLiteral - 59)) | (1 << (ABSLParser.BigOctalIntegerLiteral - 59)) | (1 << (ABSLParser.BigBinaryIntegerLiteral - 59)) | (1 << (ABSLParser.BigDecimalIntegerLiteral - 59)) | (1 << (ABSLParser.Break - 59)) | (1 << (ABSLParser.Do - 59)) | (1 << (ABSLParser.Typeof - 59)) | (1 << (ABSLParser.New - 59)) | (1 << (ABSLParser.Var - 59)) | (1 << (ABSLParser.Return - 59)) | (1 << (ABSLParser.Void - 59)) | (1 << (ABSLParser.Continue - 59)) | (1 << (ABSLParser.For - 59)) | (1 << (ABSLParser.Foreach - 59)) | (1 << (ABSLParser.Switch - 59)) | (1 << (ABSLParser.While - 59)) | (1 << (ABSLParser.Debugger - 59)) | (1 << (ABSLParser.Function - 59)))) !== 0) || ((((_la - 91)) & ~0x1f) == 0 && ((1 << (_la - 91)) & ((1 << (ABSLParser.This - 91)) | (1 << (ABSLParser.With - 91)) | (1 << (ABSLParser.If - 91)) | (1 << (ABSLParser.Throw - 91)) | (1 << (ABSLParser.Raise - 91)) | (1 << (ABSLParser.Delete - 91)) | (1 << (ABSLParser.Try - 91)) | (1 << (ABSLParser.Class - 91)) | (1 << (ABSLParser.Super - 91)) | (1 << (ABSLParser.Const - 91)) | (1 << (ABSLParser.Export - 91)) | (1 << (ABSLParser.Import - 91)) | (1 << (ABSLParser.Async - 91)) | (1 << (ABSLParser.Await - 91)) | (1 << (ABSLParser.Let - 91)) | (1 << (ABSLParser.Yield - 91)) | (1 << (ABSLParser.Identifier - 91)) | (1 << (ABSLParser.StringLiteral - 91)) | (1 << (ABSLParser.TemplateStringLiteral - 91)))) !== 0));
  } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
  } finally {
    this.exitRule();
  }
  return localctx;
};


function ImportStatementContext(parser, parent, invokingState) {
  if(parent === undefined) {
	    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = ABSLParser.RULE_importStatement;
  return this;
}

ImportStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportStatementContext.prototype.constructor = ImportStatementContext;

ImportStatementContext.prototype.Import = function() {
  return this.getToken(ABSLParser.Import, 0);
};

ImportStatementContext.prototype.importFromBlock = function() {
  return this.getTypedRuleContext(ImportFromBlockContext, 0);
};

ImportStatementContext.prototype.singleExpression = function() {
  return this.getTypedRuleContext(SingleExpressionContext, 0);
};

ImportStatementContext.prototype.As = function() {
  return this.getToken(ABSLParser.As, 0);
};

ImportStatementContext.prototype.Identifier = function() {
  return this.getToken(ABSLParser.Identifier, 0);
};

ImportStatementContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterImportStatement(this);
  }
};

ImportStatementContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitImportStatement(this);
  }
};

ImportStatementContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitImportStatement(this);
  } else {
    return visitor.visitChildren(this);
  }
};




ABSLParser.ImportStatementContext = ImportStatementContext;

ABSLParser.prototype.importStatement = function() {

  var localctx = new ImportStatementContext(this, this._ctx, this.state);
  this.enterRule(localctx, 10, ABSLParser.RULE_importStatement);
  var _la = 0; // Token type
  try {
    this.state = 201;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 7, this._ctx);
    switch(la_) {
    case 1:
      this.enterOuterAlt(localctx, 1);
      this.state = 191;
      this.match(ABSLParser.Import);
      this.state = 192;
      this.importFromBlock();
      break;

    case 2:
      this.enterOuterAlt(localctx, 2);
      this.state = 193;
      this.match(ABSLParser.Import);
      this.state = 194;
      this.singleExpression(0);
      this.state = 196;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if(_la === ABSLParser.As) {
        this.state = 195;
        this.match(ABSLParser.As);
      }

      this.state = 199;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 6, this._ctx);
      if(la_ === 1) {
        this.state = 198;
        this.match(ABSLParser.Identifier);

      }
      break;

    }
  } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
  } finally {
    this.exitRule();
  }
  return localctx;
};


function ImportFromBlockContext(parser, parent, invokingState) {
  if(parent === undefined) {
	    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = ABSLParser.RULE_importFromBlock;
  return this;
}

ImportFromBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportFromBlockContext.prototype.constructor = ImportFromBlockContext;

ImportFromBlockContext.prototype.importFrom = function() {
  return this.getTypedRuleContext(ImportFromContext, 0);
};

ImportFromBlockContext.prototype.eos = function() {
  return this.getTypedRuleContext(EosContext, 0);
};

ImportFromBlockContext.prototype.importNamespace = function() {
  return this.getTypedRuleContext(ImportNamespaceContext, 0);
};

ImportFromBlockContext.prototype.moduleItems = function() {
  return this.getTypedRuleContext(ModuleItemsContext, 0);
};

ImportFromBlockContext.prototype.importDefault = function() {
  return this.getTypedRuleContext(ImportDefaultContext, 0);
};

ImportFromBlockContext.prototype.StringLiteral = function() {
  return this.getToken(ABSLParser.StringLiteral, 0);
};

ImportFromBlockContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterImportFromBlock(this);
  }
};

ImportFromBlockContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitImportFromBlock(this);
  }
};

ImportFromBlockContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitImportFromBlock(this);
  } else {
    return visitor.visitChildren(this);
  }
};




ABSLParser.ImportFromBlockContext = ImportFromBlockContext;

ABSLParser.prototype.importFromBlock = function() {

  var localctx = new ImportFromBlockContext(this, this._ctx, this.state);
  this.enterRule(localctx, 12, ABSLParser.RULE_importFromBlock);
  var _la = 0; // Token type
  try {
    this.state = 215;
    this._errHandler.sync(this);
    switch(this._input.LA(1)) {
    case ABSLParser.OpenBrace:
    case ABSLParser.Multiply:
    case ABSLParser.NullLiteral:
    case ABSLParser.BooleanLiteral:
    case ABSLParser.Break:
    case ABSLParser.Do:
    case ABSLParser.Instanceof:
    case ABSLParser.Typeof:
    case ABSLParser.Case:
    case ABSLParser.Else:
    case ABSLParser.New:
    case ABSLParser.Var:
    case ABSLParser.Catch:
    case ABSLParser.Finally:
    case ABSLParser.Return:
    case ABSLParser.Void:
    case ABSLParser.Continue:
    case ABSLParser.For:
    case ABSLParser.Switch:
    case ABSLParser.While:
    case ABSLParser.Debugger:
    case ABSLParser.Function:
    case ABSLParser.This:
    case ABSLParser.With:
    case ABSLParser.Default:
    case ABSLParser.If:
    case ABSLParser.Throw:
    case ABSLParser.Delete:
    case ABSLParser.In:
    case ABSLParser.Try:
    case ABSLParser.As:
    case ABSLParser.From:
    case ABSLParser.Class:
    case ABSLParser.Enum:
    case ABSLParser.Extends:
    case ABSLParser.Super:
    case ABSLParser.Const:
    case ABSLParser.Export:
    case ABSLParser.Import:
    case ABSLParser.Async:
    case ABSLParser.Await:
    case ABSLParser.Implements:
    case ABSLParser.Let:
    case ABSLParser.Private:
    case ABSLParser.Public:
    case ABSLParser.Interface:
    case ABSLParser.Package:
    case ABSLParser.Protected:
    case ABSLParser.Static:
    case ABSLParser.Yield:
    case ABSLParser.Identifier:
      this.enterOuterAlt(localctx, 1);
      this.state = 204;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if(((((_la - 59)) & ~0x1f) == 0 && ((1 << (_la - 59)) & ((1 << (ABSLParser.NullLiteral - 59)) | (1 << (ABSLParser.BooleanLiteral - 59)) | (1 << (ABSLParser.Break - 59)) | (1 << (ABSLParser.Do - 59)) | (1 << (ABSLParser.Instanceof - 59)) | (1 << (ABSLParser.Typeof - 59)) | (1 << (ABSLParser.Case - 59)) | (1 << (ABSLParser.Else - 59)) | (1 << (ABSLParser.New - 59)) | (1 << (ABSLParser.Var - 59)) | (1 << (ABSLParser.Catch - 59)) | (1 << (ABSLParser.Finally - 59)) | (1 << (ABSLParser.Return - 59)) | (1 << (ABSLParser.Void - 59)) | (1 << (ABSLParser.Continue - 59)) | (1 << (ABSLParser.For - 59)) | (1 << (ABSLParser.Switch - 59)) | (1 << (ABSLParser.While - 59)) | (1 << (ABSLParser.Debugger - 59)) | (1 << (ABSLParser.Function - 59)))) !== 0) || ((((_la - 91)) & ~0x1f) == 0 && ((1 << (_la - 91)) & ((1 << (ABSLParser.This - 91)) | (1 << (ABSLParser.With - 91)) | (1 << (ABSLParser.Default - 91)) | (1 << (ABSLParser.If - 91)) | (1 << (ABSLParser.Throw - 91)) | (1 << (ABSLParser.Delete - 91)) | (1 << (ABSLParser.In - 91)) | (1 << (ABSLParser.Try - 91)) | (1 << (ABSLParser.As - 91)) | (1 << (ABSLParser.From - 91)) | (1 << (ABSLParser.Class - 91)) | (1 << (ABSLParser.Enum - 91)) | (1 << (ABSLParser.Extends - 91)) | (1 << (ABSLParser.Super - 91)) | (1 << (ABSLParser.Const - 91)) | (1 << (ABSLParser.Export - 91)) | (1 << (ABSLParser.Import - 91)) | (1 << (ABSLParser.Async - 91)) | (1 << (ABSLParser.Await - 91)) | (1 << (ABSLParser.Implements - 91)) | (1 << (ABSLParser.Let - 91)) | (1 << (ABSLParser.Private - 91)) | (1 << (ABSLParser.Public - 91)) | (1 << (ABSLParser.Interface - 91)) | (1 << (ABSLParser.Package - 91)) | (1 << (ABSLParser.Protected - 91)) | (1 << (ABSLParser.Static - 91)) | (1 << (ABSLParser.Yield - 91)) | (1 << (ABSLParser.Identifier - 91)))) !== 0)) {
        this.state = 203;
        this.importDefault();
      }

      this.state = 208;
      this._errHandler.sync(this);
      switch(this._input.LA(1)) {
      case ABSLParser.Multiply:
        this.state = 206;
        this.importNamespace();
        break;
      case ABSLParser.OpenBrace:
        this.state = 207;
        this.moduleItems();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
      }
      this.state = 210;
      this.importFrom();
      this.state = 211;
      this.eos();
      break;
    case ABSLParser.StringLiteral:
      this.enterOuterAlt(localctx, 2);
      this.state = 213;
      this.match(ABSLParser.StringLiteral);
      this.state = 214;
      this.eos();
      break;
    default:
      throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
  } finally {
    this.exitRule();
  }
  return localctx;
};


function ModuleItemsContext(parser, parent, invokingState) {
  if(parent === undefined) {
	    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = ABSLParser.RULE_moduleItems;
  return this;
}

ModuleItemsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModuleItemsContext.prototype.constructor = ModuleItemsContext;

ModuleItemsContext.prototype.OpenBrace = function() {
  return this.getToken(ABSLParser.OpenBrace, 0);
};

ModuleItemsContext.prototype.CloseBrace = function() {
  return this.getToken(ABSLParser.CloseBrace, 0);
};

ModuleItemsContext.prototype.aliasName = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(AliasNameContext);
  } else {
    return this.getTypedRuleContext(AliasNameContext, i);
  }
};

ModuleItemsContext.prototype.Comma = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTokens(ABSLParser.Comma);
  } else {
    return this.getToken(ABSLParser.Comma, i);
  }
};


ModuleItemsContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterModuleItems(this);
  }
};

ModuleItemsContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitModuleItems(this);
  }
};

ModuleItemsContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitModuleItems(this);
  } else {
    return visitor.visitChildren(this);
  }
};




ABSLParser.ModuleItemsContext = ModuleItemsContext;

ABSLParser.prototype.moduleItems = function() {

  var localctx = new ModuleItemsContext(this, this._ctx, this.state);
  this.enterRule(localctx, 14, ABSLParser.RULE_moduleItems);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 217;
    this.match(ABSLParser.OpenBrace);
    this.state = 223;
    this._errHandler.sync(this);
    var _alt = this._interp.adaptivePredict(this._input, 11, this._ctx);
    while(_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
      if(_alt === 1) {
        this.state = 218;
        this.aliasName();
        this.state = 219;
        this.match(ABSLParser.Comma);
      }
      this.state = 225;
      this._errHandler.sync(this);
      _alt = this._interp.adaptivePredict(this._input, 11, this._ctx);
    }

    this.state = 230;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if(((((_la - 59)) & ~0x1f) == 0 && ((1 << (_la - 59)) & ((1 << (ABSLParser.NullLiteral - 59)) | (1 << (ABSLParser.BooleanLiteral - 59)) | (1 << (ABSLParser.Break - 59)) | (1 << (ABSLParser.Do - 59)) | (1 << (ABSLParser.Instanceof - 59)) | (1 << (ABSLParser.Typeof - 59)) | (1 << (ABSLParser.Case - 59)) | (1 << (ABSLParser.Else - 59)) | (1 << (ABSLParser.New - 59)) | (1 << (ABSLParser.Var - 59)) | (1 << (ABSLParser.Catch - 59)) | (1 << (ABSLParser.Finally - 59)) | (1 << (ABSLParser.Return - 59)) | (1 << (ABSLParser.Void - 59)) | (1 << (ABSLParser.Continue - 59)) | (1 << (ABSLParser.For - 59)) | (1 << (ABSLParser.Switch - 59)) | (1 << (ABSLParser.While - 59)) | (1 << (ABSLParser.Debugger - 59)) | (1 << (ABSLParser.Function - 59)))) !== 0) || ((((_la - 91)) & ~0x1f) == 0 && ((1 << (_la - 91)) & ((1 << (ABSLParser.This - 91)) | (1 << (ABSLParser.With - 91)) | (1 << (ABSLParser.Default - 91)) | (1 << (ABSLParser.If - 91)) | (1 << (ABSLParser.Throw - 91)) | (1 << (ABSLParser.Delete - 91)) | (1 << (ABSLParser.In - 91)) | (1 << (ABSLParser.Try - 91)) | (1 << (ABSLParser.As - 91)) | (1 << (ABSLParser.From - 91)) | (1 << (ABSLParser.Class - 91)) | (1 << (ABSLParser.Enum - 91)) | (1 << (ABSLParser.Extends - 91)) | (1 << (ABSLParser.Super - 91)) | (1 << (ABSLParser.Const - 91)) | (1 << (ABSLParser.Export - 91)) | (1 << (ABSLParser.Import - 91)) | (1 << (ABSLParser.Async - 91)) | (1 << (ABSLParser.Await - 91)) | (1 << (ABSLParser.Implements - 91)) | (1 << (ABSLParser.Let - 91)) | (1 << (ABSLParser.Private - 91)) | (1 << (ABSLParser.Public - 91)) | (1 << (ABSLParser.Interface - 91)) | (1 << (ABSLParser.Package - 91)) | (1 << (ABSLParser.Protected - 91)) | (1 << (ABSLParser.Static - 91)) | (1 << (ABSLParser.Yield - 91)) | (1 << (ABSLParser.Identifier - 91)))) !== 0)) {
      this.state = 226;
      this.aliasName();
      this.state = 228;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if(_la === ABSLParser.Comma) {
        this.state = 227;
        this.match(ABSLParser.Comma);
      }

    }

    this.state = 232;
    this.match(ABSLParser.CloseBrace);
  } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
  } finally {
    this.exitRule();
  }
  return localctx;
};


function ImportDefaultContext(parser, parent, invokingState) {
  if(parent === undefined) {
	    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = ABSLParser.RULE_importDefault;
  return this;
}

ImportDefaultContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportDefaultContext.prototype.constructor = ImportDefaultContext;

ImportDefaultContext.prototype.aliasName = function() {
  return this.getTypedRuleContext(AliasNameContext, 0);
};

ImportDefaultContext.prototype.Comma = function() {
  return this.getToken(ABSLParser.Comma, 0);
};

ImportDefaultContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterImportDefault(this);
  }
};

ImportDefaultContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitImportDefault(this);
  }
};

ImportDefaultContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitImportDefault(this);
  } else {
    return visitor.visitChildren(this);
  }
};




ABSLParser.ImportDefaultContext = ImportDefaultContext;

ABSLParser.prototype.importDefault = function() {

  var localctx = new ImportDefaultContext(this, this._ctx, this.state);
  this.enterRule(localctx, 16, ABSLParser.RULE_importDefault);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 234;
    this.aliasName();
    this.state = 235;
    this.match(ABSLParser.Comma);
  } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
  } finally {
    this.exitRule();
  }
  return localctx;
};


function ImportNamespaceContext(parser, parent, invokingState) {
  if(parent === undefined) {
	    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = ABSLParser.RULE_importNamespace;
  return this;
}

ImportNamespaceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportNamespaceContext.prototype.constructor = ImportNamespaceContext;

ImportNamespaceContext.prototype.Multiply = function() {
  return this.getToken(ABSLParser.Multiply, 0);
};

ImportNamespaceContext.prototype.As = function() {
  return this.getToken(ABSLParser.As, 0);
};

ImportNamespaceContext.prototype.identifierName = function() {
  return this.getTypedRuleContext(IdentifierNameContext, 0);
};

ImportNamespaceContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterImportNamespace(this);
  }
};

ImportNamespaceContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitImportNamespace(this);
  }
};

ImportNamespaceContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitImportNamespace(this);
  } else {
    return visitor.visitChildren(this);
  }
};




ABSLParser.ImportNamespaceContext = ImportNamespaceContext;

ABSLParser.prototype.importNamespace = function() {

  var localctx = new ImportNamespaceContext(this, this._ctx, this.state);
  this.enterRule(localctx, 18, ABSLParser.RULE_importNamespace);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 237;
    this.match(ABSLParser.Multiply);
    this.state = 240;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if(_la === ABSLParser.As) {
      this.state = 238;
      this.match(ABSLParser.As);
      this.state = 239;
      this.identifierName();
    }

  } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
  } finally {
    this.exitRule();
  }
  return localctx;
};


function ImportFromContext(parser, parent, invokingState) {
  if(parent === undefined) {
	    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = ABSLParser.RULE_importFrom;
  return this;
}

ImportFromContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportFromContext.prototype.constructor = ImportFromContext;

ImportFromContext.prototype.From = function() {
  return this.getToken(ABSLParser.From, 0);
};

ImportFromContext.prototype.StringLiteral = function() {
  return this.getToken(ABSLParser.StringLiteral, 0);
};

ImportFromContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterImportFrom(this);
  }
};

ImportFromContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitImportFrom(this);
  }
};

ImportFromContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitImportFrom(this);
  } else {
    return visitor.visitChildren(this);
  }
};




ABSLParser.ImportFromContext = ImportFromContext;

ABSLParser.prototype.importFrom = function() {

  var localctx = new ImportFromContext(this, this._ctx, this.state);
  this.enterRule(localctx, 20, ABSLParser.RULE_importFrom);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 242;
    this.match(ABSLParser.From);
    this.state = 243;
    this.match(ABSLParser.StringLiteral);
  } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
  } finally {
    this.exitRule();
  }
  return localctx;
};


function AliasNameContext(parser, parent, invokingState) {
  if(parent === undefined) {
	    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = ABSLParser.RULE_aliasName;
  return this;
}

AliasNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AliasNameContext.prototype.constructor = AliasNameContext;

AliasNameContext.prototype.identifierName = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(IdentifierNameContext);
  } else {
    return this.getTypedRuleContext(IdentifierNameContext, i);
  }
};

AliasNameContext.prototype.As = function() {
  return this.getToken(ABSLParser.As, 0);
};

AliasNameContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterAliasName(this);
  }
};

AliasNameContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitAliasName(this);
  }
};

AliasNameContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitAliasName(this);
  } else {
    return visitor.visitChildren(this);
  }
};




ABSLParser.AliasNameContext = AliasNameContext;

ABSLParser.prototype.aliasName = function() {

  var localctx = new AliasNameContext(this, this._ctx, this.state);
  this.enterRule(localctx, 22, ABSLParser.RULE_aliasName);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 245;
    this.identifierName();
    this.state = 248;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if(_la === ABSLParser.As) {
      this.state = 246;
      this.match(ABSLParser.As);
      this.state = 247;
      this.identifierName();
    }

  } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
  } finally {
    this.exitRule();
  }
  return localctx;
};


function ExportStatementContext(parser, parent, invokingState) {
  if(parent === undefined) {
	    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = ABSLParser.RULE_exportStatement;
  return this;
}

ExportStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExportStatementContext.prototype.constructor = ExportStatementContext;



ExportStatementContext.prototype.copyFrom = function(ctx) {
  antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ExportDefaultDeclarationContext(parser, ctx) {
  ExportStatementContext.call(this, parser);
  ExportStatementContext.prototype.copyFrom.call(this, ctx);
  return this;
}

ExportDefaultDeclarationContext.prototype = Object.create(ExportStatementContext.prototype);
ExportDefaultDeclarationContext.prototype.constructor = ExportDefaultDeclarationContext;

ABSLParser.ExportDefaultDeclarationContext = ExportDefaultDeclarationContext;

ExportDefaultDeclarationContext.prototype.Export = function() {
  return this.getToken(ABSLParser.Export, 0);
};

ExportDefaultDeclarationContext.prototype.Default = function() {
  return this.getToken(ABSLParser.Default, 0);
};

ExportDefaultDeclarationContext.prototype.singleExpression = function() {
  return this.getTypedRuleContext(SingleExpressionContext, 0);
};

ExportDefaultDeclarationContext.prototype.eos = function() {
  return this.getTypedRuleContext(EosContext, 0);
};
ExportDefaultDeclarationContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterExportDefaultDeclaration(this);
  }
};

ExportDefaultDeclarationContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitExportDefaultDeclaration(this);
  }
};

ExportDefaultDeclarationContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitExportDefaultDeclaration(this);
  } else {
    return visitor.visitChildren(this);
  }
};


function ExportDeclarationContext(parser, ctx) {
  ExportStatementContext.call(this, parser);
  ExportStatementContext.prototype.copyFrom.call(this, ctx);
  return this;
}

ExportDeclarationContext.prototype = Object.create(ExportStatementContext.prototype);
ExportDeclarationContext.prototype.constructor = ExportDeclarationContext;

ABSLParser.ExportDeclarationContext = ExportDeclarationContext;

ExportDeclarationContext.prototype.Export = function() {
  return this.getToken(ABSLParser.Export, 0);
};

ExportDeclarationContext.prototype.eos = function() {
  return this.getTypedRuleContext(EosContext, 0);
};

ExportDeclarationContext.prototype.exportFromBlock = function() {
  return this.getTypedRuleContext(ExportFromBlockContext, 0);
};

ExportDeclarationContext.prototype.declaration = function() {
  return this.getTypedRuleContext(DeclarationContext, 0);
};
ExportDeclarationContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterExportDeclaration(this);
  }
};

ExportDeclarationContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitExportDeclaration(this);
  }
};

ExportDeclarationContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitExportDeclaration(this);
  } else {
    return visitor.visitChildren(this);
  }
};



ABSLParser.ExportStatementContext = ExportStatementContext;

ABSLParser.prototype.exportStatement = function() {

  var localctx = new ExportStatementContext(this, this._ctx, this.state);
  this.enterRule(localctx, 24, ABSLParser.RULE_exportStatement);
  try {
    this.state = 262;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 17, this._ctx);
    switch(la_) {
    case 1:
      localctx = new ExportDeclarationContext(this, localctx);
      this.enterOuterAlt(localctx, 1);
      this.state = 250;
      this.match(ABSLParser.Export);
      this.state = 253;
      this._errHandler.sync(this);
      switch(this._input.LA(1)) {
      case ABSLParser.OpenBrace:
      case ABSLParser.Multiply:
        this.state = 251;
        this.exportFromBlock();
        break;
      case ABSLParser.Var:
      case ABSLParser.Function:
      case ABSLParser.Class:
      case ABSLParser.Const:
      case ABSLParser.Async:
      case ABSLParser.Let:
        this.state = 252;
        this.declaration();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
      }
      this.state = 255;
      this.eos();
      break;

    case 2:
      localctx = new ExportDefaultDeclarationContext(this, localctx);
      this.enterOuterAlt(localctx, 2);
      this.state = 257;
      this.match(ABSLParser.Export);
      this.state = 258;
      this.match(ABSLParser.Default);
      this.state = 259;
      this.singleExpression(0);
      this.state = 260;
      this.eos();
      break;

    }
  } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
  } finally {
    this.exitRule();
  }
  return localctx;
};


function ExportFromBlockContext(parser, parent, invokingState) {
  if(parent === undefined) {
	    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = ABSLParser.RULE_exportFromBlock;
  return this;
}

ExportFromBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExportFromBlockContext.prototype.constructor = ExportFromBlockContext;

ExportFromBlockContext.prototype.importNamespace = function() {
  return this.getTypedRuleContext(ImportNamespaceContext, 0);
};

ExportFromBlockContext.prototype.importFrom = function() {
  return this.getTypedRuleContext(ImportFromContext, 0);
};

ExportFromBlockContext.prototype.eos = function() {
  return this.getTypedRuleContext(EosContext, 0);
};

ExportFromBlockContext.prototype.moduleItems = function() {
  return this.getTypedRuleContext(ModuleItemsContext, 0);
};

ExportFromBlockContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterExportFromBlock(this);
  }
};

ExportFromBlockContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitExportFromBlock(this);
  }
};

ExportFromBlockContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitExportFromBlock(this);
  } else {
    return visitor.visitChildren(this);
  }
};




ABSLParser.ExportFromBlockContext = ExportFromBlockContext;

ABSLParser.prototype.exportFromBlock = function() {

  var localctx = new ExportFromBlockContext(this, this._ctx, this.state);
  this.enterRule(localctx, 26, ABSLParser.RULE_exportFromBlock);
  var _la = 0; // Token type
  try {
    this.state = 274;
    this._errHandler.sync(this);
    switch(this._input.LA(1)) {
    case ABSLParser.Multiply:
      this.enterOuterAlt(localctx, 1);
      this.state = 264;
      this.importNamespace();
      this.state = 265;
      this.importFrom();
      this.state = 266;
      this.eos();
      break;
    case ABSLParser.OpenBrace:
      this.enterOuterAlt(localctx, 2);
      this.state = 268;
      this.moduleItems();
      this.state = 270;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if(_la === ABSLParser.From) {
        this.state = 269;
        this.importFrom();
      }

      this.state = 272;
      this.eos();
      break;
    default:
      throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
  } finally {
    this.exitRule();
  }
  return localctx;
};


function DeclarationContext(parser, parent, invokingState) {
  if(parent === undefined) {
	    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = ABSLParser.RULE_declaration;
  return this;
}

DeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationContext.prototype.constructor = DeclarationContext;

DeclarationContext.prototype.variableStatement = function() {
  return this.getTypedRuleContext(VariableStatementContext, 0);
};

DeclarationContext.prototype.classDeclaration = function() {
  return this.getTypedRuleContext(ClassDeclarationContext, 0);
};

DeclarationContext.prototype.functionDeclaration = function() {
  return this.getTypedRuleContext(FunctionDeclarationContext, 0);
};

DeclarationContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterDeclaration(this);
  }
};

DeclarationContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitDeclaration(this);
  }
};

DeclarationContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitDeclaration(this);
  } else {
    return visitor.visitChildren(this);
  }
};




ABSLParser.DeclarationContext = DeclarationContext;

ABSLParser.prototype.declaration = function() {

  var localctx = new DeclarationContext(this, this._ctx, this.state);
  this.enterRule(localctx, 28, ABSLParser.RULE_declaration);
  try {
    this.state = 279;
    this._errHandler.sync(this);
    switch(this._input.LA(1)) {
    case ABSLParser.Var:
    case ABSLParser.Const:
    case ABSLParser.Let:
      this.enterOuterAlt(localctx, 1);
      this.state = 276;
      this.variableStatement();
      break;
    case ABSLParser.Class:
      this.enterOuterAlt(localctx, 2);
      this.state = 277;
      this.classDeclaration();
      break;
    case ABSLParser.Function:
    case ABSLParser.Async:
      this.enterOuterAlt(localctx, 3);
      this.state = 278;
      this.functionDeclaration();
      break;
    default:
      throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
  } finally {
    this.exitRule();
  }
  return localctx;
};


function VariableStatementContext(parser, parent, invokingState) {
  if(parent === undefined) {
	    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = ABSLParser.RULE_variableStatement;
  return this;
}

VariableStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableStatementContext.prototype.constructor = VariableStatementContext;

VariableStatementContext.prototype.varModifier = function() {
  return this.getTypedRuleContext(VarModifierContext, 0);
};

VariableStatementContext.prototype.variableDeclarationList = function() {
  return this.getTypedRuleContext(VariableDeclarationListContext, 0);
};

VariableStatementContext.prototype.eos = function() {
  return this.getTypedRuleContext(EosContext, 0);
};

VariableStatementContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterVariableStatement(this);
  }
};

VariableStatementContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitVariableStatement(this);
  }
};

VariableStatementContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitVariableStatement(this);
  } else {
    return visitor.visitChildren(this);
  }
};




ABSLParser.VariableStatementContext = VariableStatementContext;

ABSLParser.prototype.variableStatement = function() {

  var localctx = new VariableStatementContext(this, this._ctx, this.state);
  this.enterRule(localctx, 30, ABSLParser.RULE_variableStatement);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 281;
    this.varModifier();
    this.state = 282;
    this.variableDeclarationList();
    this.state = 283;
    this.eos();
  } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
  } finally {
    this.exitRule();
  }
  return localctx;
};


function VariableDeclarationListContext(parser, parent, invokingState) {
  if(parent === undefined) {
	    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = ABSLParser.RULE_variableDeclarationList;
  return this;
}

VariableDeclarationListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclarationListContext.prototype.constructor = VariableDeclarationListContext;

VariableDeclarationListContext.prototype.variableDeclaration = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(VariableDeclarationContext);
  } else {
    return this.getTypedRuleContext(VariableDeclarationContext, i);
  }
};

VariableDeclarationListContext.prototype.Comma = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTokens(ABSLParser.Comma);
  } else {
    return this.getToken(ABSLParser.Comma, i);
  }
};


VariableDeclarationListContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterVariableDeclarationList(this);
  }
};

VariableDeclarationListContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitVariableDeclarationList(this);
  }
};

VariableDeclarationListContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitVariableDeclarationList(this);
  } else {
    return visitor.visitChildren(this);
  }
};




ABSLParser.VariableDeclarationListContext = VariableDeclarationListContext;

ABSLParser.prototype.variableDeclarationList = function() {

  var localctx = new VariableDeclarationListContext(this, this._ctx, this.state);
  this.enterRule(localctx, 32, ABSLParser.RULE_variableDeclarationList);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 285;
    this.variableDeclaration();
    this.state = 290;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    while(_la === ABSLParser.Comma) {
      this.state = 286;
      this.match(ABSLParser.Comma);
      this.state = 287;
      this.variableDeclaration();
      this.state = 292;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    }
  } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
  } finally {
    this.exitRule();
  }
  return localctx;
};


function VariableDeclarationContext(parser, parent, invokingState) {
  if(parent === undefined) {
	    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = ABSLParser.RULE_variableDeclaration;
  return this;
}

VariableDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclarationContext.prototype.constructor = VariableDeclarationContext;

VariableDeclarationContext.prototype.assignable = function() {
  return this.getTypedRuleContext(AssignableContext, 0);
};

VariableDeclarationContext.prototype.Colon = function() {
  return this.getToken(ABSLParser.Colon, 0);
};

VariableDeclarationContext.prototype.variableType = function() {
  return this.getTypedRuleContext(VariableTypeContext, 0);
};

VariableDeclarationContext.prototype.Assign = function() {
  return this.getToken(ABSLParser.Assign, 0);
};

VariableDeclarationContext.prototype.singleExpression = function() {
  return this.getTypedRuleContext(SingleExpressionContext, 0);
};

VariableDeclarationContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterVariableDeclaration(this);
  }
};

VariableDeclarationContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitVariableDeclaration(this);
  }
};

VariableDeclarationContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitVariableDeclaration(this);
  } else {
    return visitor.visitChildren(this);
  }
};




ABSLParser.VariableDeclarationContext = VariableDeclarationContext;

ABSLParser.prototype.variableDeclaration = function() {

  var localctx = new VariableDeclarationContext(this, this._ctx, this.state);
  this.enterRule(localctx, 34, ABSLParser.RULE_variableDeclaration);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 293;
    this.assignable();
    this.state = 296;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if(_la === ABSLParser.Colon) {
      this.state = 294;
      this.match(ABSLParser.Colon);
      this.state = 295;
      this.variableType();
    }

    this.state = 300;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if(_la === ABSLParser.Assign) {
      this.state = 298;
      this.match(ABSLParser.Assign);
      this.state = 299;
      this.singleExpression(0);
    }

  } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
  } finally {
    this.exitRule();
  }
  return localctx;
};


function VariableTypeContext(parser, parent, invokingState) {
  if(parent === undefined) {
	    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = ABSLParser.RULE_variableType;
  return this;
}

VariableTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableTypeContext.prototype.constructor = VariableTypeContext;

VariableTypeContext.prototype.singleExpression = function() {
  return this.getTypedRuleContext(SingleExpressionContext, 0);
};

VariableTypeContext.prototype.CollectionOf = function() {
  return this.getToken(ABSLParser.CollectionOf, 0);
};

VariableTypeContext.prototype.ElementOf = function() {
  return this.getToken(ABSLParser.ElementOf, 0);
};

VariableTypeContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterVariableType(this);
  }
};

VariableTypeContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitVariableType(this);
  }
};

VariableTypeContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitVariableType(this);
  } else {
    return visitor.visitChildren(this);
  }
};




ABSLParser.VariableTypeContext = VariableTypeContext;

ABSLParser.prototype.variableType = function() {

  var localctx = new VariableTypeContext(this, this._ctx, this.state);
  this.enterRule(localctx, 36, ABSLParser.RULE_variableType);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 303;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if(_la === ABSLParser.CollectionOf) {
      this.state = 302;
      this.match(ABSLParser.CollectionOf);
    }

    this.state = 306;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if(_la === ABSLParser.ElementOf) {
      this.state = 305;
      this.match(ABSLParser.ElementOf);
    }

    this.state = 308;
    this.singleExpression(0);
  } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
  } finally {
    this.exitRule();
  }
  return localctx;
};


function EmptyStatementContext(parser, parent, invokingState) {
  if(parent === undefined) {
	    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = ABSLParser.RULE_emptyStatement;
  return this;
}

EmptyStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EmptyStatementContext.prototype.constructor = EmptyStatementContext;

EmptyStatementContext.prototype.SemiColon = function() {
  return this.getToken(ABSLParser.SemiColon, 0);
};

EmptyStatementContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterEmptyStatement(this);
  }
};

EmptyStatementContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitEmptyStatement(this);
  }
};

EmptyStatementContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitEmptyStatement(this);
  } else {
    return visitor.visitChildren(this);
  }
};




ABSLParser.EmptyStatementContext = EmptyStatementContext;

ABSLParser.prototype.emptyStatement = function() {

  var localctx = new EmptyStatementContext(this, this._ctx, this.state);
  this.enterRule(localctx, 38, ABSLParser.RULE_emptyStatement);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 310;
    this.match(ABSLParser.SemiColon);
  } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
  } finally {
    this.exitRule();
  }
  return localctx;
};


function ExpressionStatementContext(parser, parent, invokingState) {
  if(parent === undefined) {
	    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = ABSLParser.RULE_expressionStatement;
  return this;
}

ExpressionStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionStatementContext.prototype.constructor = ExpressionStatementContext;

ExpressionStatementContext.prototype.expressionSequence = function() {
  return this.getTypedRuleContext(ExpressionSequenceContext, 0);
};

ExpressionStatementContext.prototype.eos = function() {
  return this.getTypedRuleContext(EosContext, 0);
};

ExpressionStatementContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterExpressionStatement(this);
  }
};

ExpressionStatementContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitExpressionStatement(this);
  }
};

ExpressionStatementContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitExpressionStatement(this);
  } else {
    return visitor.visitChildren(this);
  }
};




ABSLParser.ExpressionStatementContext = ExpressionStatementContext;

ABSLParser.prototype.expressionStatement = function() {

  var localctx = new ExpressionStatementContext(this, this._ctx, this.state);
  this.enterRule(localctx, 40, ABSLParser.RULE_expressionStatement);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 312;
    this.expressionSequence();
    this.state = 313;
    this.eos();
  } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
  } finally {
    this.exitRule();
  }
  return localctx;
};


function IfStatementContext(parser, parent, invokingState) {
  if(parent === undefined) {
	    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = ABSLParser.RULE_ifStatement;
  return this;
}

IfStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfStatementContext.prototype.constructor = IfStatementContext;

IfStatementContext.prototype.If = function() {
  return this.getToken(ABSLParser.If, 0);
};

IfStatementContext.prototype.OpenParen = function() {
  return this.getToken(ABSLParser.OpenParen, 0);
};

IfStatementContext.prototype.expressionSequence = function() {
  return this.getTypedRuleContext(ExpressionSequenceContext, 0);
};

IfStatementContext.prototype.CloseParen = function() {
  return this.getToken(ABSLParser.CloseParen, 0);
};

IfStatementContext.prototype.statement = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(StatementContext);
  } else {
    return this.getTypedRuleContext(StatementContext, i);
  }
};

IfStatementContext.prototype.Else = function() {
  return this.getToken(ABSLParser.Else, 0);
};

IfStatementContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterIfStatement(this);
  }
};

IfStatementContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitIfStatement(this);
  }
};

IfStatementContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitIfStatement(this);
  } else {
    return visitor.visitChildren(this);
  }
};




ABSLParser.IfStatementContext = IfStatementContext;

ABSLParser.prototype.ifStatement = function() {

  var localctx = new IfStatementContext(this, this._ctx, this.state);
  this.enterRule(localctx, 42, ABSLParser.RULE_ifStatement);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 315;
    this.match(ABSLParser.If);
    this.state = 316;
    this.match(ABSLParser.OpenParen);
    this.state = 317;
    this.expressionSequence();
    this.state = 318;
    this.match(ABSLParser.CloseParen);
    this.state = 319;
    this.statement();
    this.state = 322;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 26, this._ctx);
    if(la_ === 1) {
      this.state = 320;
      this.match(ABSLParser.Else);
      this.state = 321;
      this.statement();

    }
  } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
  } finally {
    this.exitRule();
  }
  return localctx;
};


function IterationStatementContext(parser, parent, invokingState) {
  if(parent === undefined) {
	    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = ABSLParser.RULE_iterationStatement;
  return this;
}

IterationStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IterationStatementContext.prototype.constructor = IterationStatementContext;



IterationStatementContext.prototype.copyFrom = function(ctx) {
  antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function DoStatementContext(parser, ctx) {
  IterationStatementContext.call(this, parser);
  IterationStatementContext.prototype.copyFrom.call(this, ctx);
  return this;
}

DoStatementContext.prototype = Object.create(IterationStatementContext.prototype);
DoStatementContext.prototype.constructor = DoStatementContext;

ABSLParser.DoStatementContext = DoStatementContext;

DoStatementContext.prototype.Do = function() {
  return this.getToken(ABSLParser.Do, 0);
};

DoStatementContext.prototype.statement = function() {
  return this.getTypedRuleContext(StatementContext, 0);
};

DoStatementContext.prototype.While = function() {
  return this.getToken(ABSLParser.While, 0);
};

DoStatementContext.prototype.OpenParen = function() {
  return this.getToken(ABSLParser.OpenParen, 0);
};

DoStatementContext.prototype.expressionSequence = function() {
  return this.getTypedRuleContext(ExpressionSequenceContext, 0);
};

DoStatementContext.prototype.CloseParen = function() {
  return this.getToken(ABSLParser.CloseParen, 0);
};

DoStatementContext.prototype.eos = function() {
  return this.getTypedRuleContext(EosContext, 0);
};
DoStatementContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterDoStatement(this);
  }
};

DoStatementContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitDoStatement(this);
  }
};

DoStatementContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitDoStatement(this);
  } else {
    return visitor.visitChildren(this);
  }
};


function WhileStatementContext(parser, ctx) {
  IterationStatementContext.call(this, parser);
  IterationStatementContext.prototype.copyFrom.call(this, ctx);
  return this;
}

WhileStatementContext.prototype = Object.create(IterationStatementContext.prototype);
WhileStatementContext.prototype.constructor = WhileStatementContext;

ABSLParser.WhileStatementContext = WhileStatementContext;

WhileStatementContext.prototype.While = function() {
  return this.getToken(ABSLParser.While, 0);
};

WhileStatementContext.prototype.OpenParen = function() {
  return this.getToken(ABSLParser.OpenParen, 0);
};

WhileStatementContext.prototype.expressionSequence = function() {
  return this.getTypedRuleContext(ExpressionSequenceContext, 0);
};

WhileStatementContext.prototype.CloseParen = function() {
  return this.getToken(ABSLParser.CloseParen, 0);
};

WhileStatementContext.prototype.statement = function() {
  return this.getTypedRuleContext(StatementContext, 0);
};
WhileStatementContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterWhileStatement(this);
  }
};

WhileStatementContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitWhileStatement(this);
  }
};

WhileStatementContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitWhileStatement(this);
  } else {
    return visitor.visitChildren(this);
  }
};


function ForStatementContext(parser, ctx) {
  IterationStatementContext.call(this, parser);
  IterationStatementContext.prototype.copyFrom.call(this, ctx);
  return this;
}

ForStatementContext.prototype = Object.create(IterationStatementContext.prototype);
ForStatementContext.prototype.constructor = ForStatementContext;

ABSLParser.ForStatementContext = ForStatementContext;

ForStatementContext.prototype.For = function() {
  return this.getToken(ABSLParser.For, 0);
};

ForStatementContext.prototype.OpenParen = function() {
  return this.getToken(ABSLParser.OpenParen, 0);
};

ForStatementContext.prototype.SemiColon = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTokens(ABSLParser.SemiColon);
  } else {
    return this.getToken(ABSLParser.SemiColon, i);
  }
};


ForStatementContext.prototype.CloseParen = function() {
  return this.getToken(ABSLParser.CloseParen, 0);
};

ForStatementContext.prototype.statement = function() {
  return this.getTypedRuleContext(StatementContext, 0);
};

ForStatementContext.prototype.expressionSequence = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(ExpressionSequenceContext);
  } else {
    return this.getTypedRuleContext(ExpressionSequenceContext, i);
  }
};

ForStatementContext.prototype.variableStatement = function() {
  return this.getTypedRuleContext(VariableStatementContext, 0);
};
ForStatementContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterForStatement(this);
  }
};

ForStatementContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitForStatement(this);
  }
};

ForStatementContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitForStatement(this);
  } else {
    return visitor.visitChildren(this);
  }
};


function ForInStatementContext(parser, ctx) {
  IterationStatementContext.call(this, parser);
  IterationStatementContext.prototype.copyFrom.call(this, ctx);
  return this;
}

ForInStatementContext.prototype = Object.create(IterationStatementContext.prototype);
ForInStatementContext.prototype.constructor = ForInStatementContext;

ABSLParser.ForInStatementContext = ForInStatementContext;

ForInStatementContext.prototype.For = function() {
  return this.getToken(ABSLParser.For, 0);
};

ForInStatementContext.prototype.OpenParen = function() {
  return this.getToken(ABSLParser.OpenParen, 0);
};

ForInStatementContext.prototype.In = function() {
  return this.getToken(ABSLParser.In, 0);
};

ForInStatementContext.prototype.expressionSequence = function() {
  return this.getTypedRuleContext(ExpressionSequenceContext, 0);
};

ForInStatementContext.prototype.CloseParen = function() {
  return this.getToken(ABSLParser.CloseParen, 0);
};

ForInStatementContext.prototype.statement = function() {
  return this.getTypedRuleContext(StatementContext, 0);
};

ForInStatementContext.prototype.singleExpression = function() {
  return this.getTypedRuleContext(SingleExpressionContext, 0);
};

ForInStatementContext.prototype.variableStatement = function() {
  return this.getTypedRuleContext(VariableStatementContext, 0);
};
ForInStatementContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterForInStatement(this);
  }
};

ForInStatementContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitForInStatement(this);
  }
};

ForInStatementContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitForInStatement(this);
  } else {
    return visitor.visitChildren(this);
  }
};


function ForeachStatementContext(parser, ctx) {
  IterationStatementContext.call(this, parser);
  IterationStatementContext.prototype.copyFrom.call(this, ctx);
  return this;
}

ForeachStatementContext.prototype = Object.create(IterationStatementContext.prototype);
ForeachStatementContext.prototype.constructor = ForeachStatementContext;

ABSLParser.ForeachStatementContext = ForeachStatementContext;

ForeachStatementContext.prototype.Foreach = function() {
  return this.getToken(ABSLParser.Foreach, 0);
};

ForeachStatementContext.prototype.OpenParen = function() {
  return this.getToken(ABSLParser.OpenParen, 0);
};

ForeachStatementContext.prototype.Var = function() {
  return this.getToken(ABSLParser.Var, 0);
};

ForeachStatementContext.prototype.Identifier = function() {
  return this.getToken(ABSLParser.Identifier, 0);
};

ForeachStatementContext.prototype.In = function() {
  return this.getToken(ABSLParser.In, 0);
};

ForeachStatementContext.prototype.singleExpression = function() {
  return this.getTypedRuleContext(SingleExpressionContext, 0);
};

ForeachStatementContext.prototype.CloseParen = function() {
  return this.getToken(ABSLParser.CloseParen, 0);
};

ForeachStatementContext.prototype.statement = function() {
  return this.getTypedRuleContext(StatementContext, 0);
};
ForeachStatementContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterForeachStatement(this);
  }
};

ForeachStatementContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitForeachStatement(this);
  }
};

ForeachStatementContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitForeachStatement(this);
  } else {
    return visitor.visitChildren(this);
  }
};


function ForOfStatementContext(parser, ctx) {
  IterationStatementContext.call(this, parser);
  IterationStatementContext.prototype.copyFrom.call(this, ctx);
  return this;
}

ForOfStatementContext.prototype = Object.create(IterationStatementContext.prototype);
ForOfStatementContext.prototype.constructor = ForOfStatementContext;

ABSLParser.ForOfStatementContext = ForOfStatementContext;

ForOfStatementContext.prototype.For = function() {
  return this.getToken(ABSLParser.For, 0);
};

ForOfStatementContext.prototype.OpenParen = function() {
  return this.getToken(ABSLParser.OpenParen, 0);
};

ForOfStatementContext.prototype.Identifier = function() {
  return this.getToken(ABSLParser.Identifier, 0);
};

ForOfStatementContext.prototype.expressionSequence = function() {
  return this.getTypedRuleContext(ExpressionSequenceContext, 0);
};

ForOfStatementContext.prototype.CloseParen = function() {
  return this.getToken(ABSLParser.CloseParen, 0);
};

ForOfStatementContext.prototype.statement = function() {
  return this.getTypedRuleContext(StatementContext, 0);
};

ForOfStatementContext.prototype.singleExpression = function() {
  return this.getTypedRuleContext(SingleExpressionContext, 0);
};

ForOfStatementContext.prototype.variableStatement = function() {
  return this.getTypedRuleContext(VariableStatementContext, 0);
};

ForOfStatementContext.prototype.Await = function() {
  return this.getToken(ABSLParser.Await, 0);
};
ForOfStatementContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterForOfStatement(this);
  }
};

ForOfStatementContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitForOfStatement(this);
  }
};

ForOfStatementContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitForOfStatement(this);
  } else {
    return visitor.visitChildren(this);
  }
};



ABSLParser.IterationStatementContext = IterationStatementContext;

ABSLParser.prototype.iterationStatement = function() {

  var localctx = new IterationStatementContext(this, this._ctx, this.state);
  this.enterRule(localctx, 44, ABSLParser.RULE_iterationStatement);
  var _la = 0; // Token type
  try {
    this.state = 388;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 33, this._ctx);
    switch(la_) {
    case 1:
      localctx = new DoStatementContext(this, localctx);
      this.enterOuterAlt(localctx, 1);
      this.state = 324;
      this.match(ABSLParser.Do);
      this.state = 325;
      this.statement();
      this.state = 326;
      this.match(ABSLParser.While);
      this.state = 327;
      this.match(ABSLParser.OpenParen);
      this.state = 328;
      this.expressionSequence();
      this.state = 329;
      this.match(ABSLParser.CloseParen);
      this.state = 330;
      this.eos();
      break;

    case 2:
      localctx = new WhileStatementContext(this, localctx);
      this.enterOuterAlt(localctx, 2);
      this.state = 332;
      this.match(ABSLParser.While);
      this.state = 333;
      this.match(ABSLParser.OpenParen);
      this.state = 334;
      this.expressionSequence();
      this.state = 335;
      this.match(ABSLParser.CloseParen);
      this.state = 336;
      this.statement();
      break;

    case 3:
      localctx = new ForStatementContext(this, localctx);
      this.enterOuterAlt(localctx, 3);
      this.state = 338;
      this.match(ABSLParser.For);
      this.state = 339;
      this.match(ABSLParser.OpenParen);
      this.state = 342;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
      case ABSLParser.RegularExpressionLiteral:
      case ABSLParser.OpenBracket:
      case ABSLParser.OpenParen:
      case ABSLParser.OpenBrace:
      case ABSLParser.PlusPlus:
      case ABSLParser.MinusMinus:
      case ABSLParser.Plus:
      case ABSLParser.Minus:
      case ABSLParser.BitNot:
      case ABSLParser.Not:
      case ABSLParser.NullLiteral:
      case ABSLParser.BooleanLiteral:
      case ABSLParser.DecimalLiteral:
      case ABSLParser.HexIntegerLiteral:
      case ABSLParser.OctalIntegerLiteral:
      case ABSLParser.OctalIntegerLiteral2:
      case ABSLParser.BinaryIntegerLiteral:
      case ABSLParser.BigHexIntegerLiteral:
      case ABSLParser.BigOctalIntegerLiteral:
      case ABSLParser.BigBinaryIntegerLiteral:
      case ABSLParser.BigDecimalIntegerLiteral:
      case ABSLParser.Typeof:
      case ABSLParser.New:
      case ABSLParser.Void:
      case ABSLParser.Function:
      case ABSLParser.This:
      case ABSLParser.Delete:
      case ABSLParser.Class:
      case ABSLParser.Super:
      case ABSLParser.Import:
      case ABSLParser.Async:
      case ABSLParser.Await:
      case ABSLParser.Yield:
      case ABSLParser.Identifier:
      case ABSLParser.StringLiteral:
      case ABSLParser.TemplateStringLiteral:
            	this.state = 340;
            	this.expressionSequence();
            	break;
      case ABSLParser.Var:
      case ABSLParser.Const:
      case ABSLParser.Let:
            	this.state = 341;
            	this.variableStatement();
            	break;
      case ABSLParser.SemiColon:
            	break;
      default:
            	break;
      }
      this.state = 344;
      this.match(ABSLParser.SemiColon);
      this.state = 346;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ABSLParser.RegularExpressionLiteral) | (1 << ABSLParser.OpenBracket) | (1 << ABSLParser.OpenParen) | (1 << ABSLParser.OpenBrace) | (1 << ABSLParser.PlusPlus) | (1 << ABSLParser.MinusMinus) | (1 << ABSLParser.Plus) | (1 << ABSLParser.Minus) | (1 << ABSLParser.BitNot) | (1 << ABSLParser.Not))) !== 0) || ((((_la - 59)) & ~0x1f) == 0 && ((1 << (_la - 59)) & ((1 << (ABSLParser.NullLiteral - 59)) | (1 << (ABSLParser.BooleanLiteral - 59)) | (1 << (ABSLParser.DecimalLiteral - 59)) | (1 << (ABSLParser.HexIntegerLiteral - 59)) | (1 << (ABSLParser.OctalIntegerLiteral - 59)) | (1 << (ABSLParser.OctalIntegerLiteral2 - 59)) | (1 << (ABSLParser.BinaryIntegerLiteral - 59)) | (1 << (ABSLParser.BigHexIntegerLiteral - 59)) | (1 << (ABSLParser.BigOctalIntegerLiteral - 59)) | (1 << (ABSLParser.BigBinaryIntegerLiteral - 59)) | (1 << (ABSLParser.BigDecimalIntegerLiteral - 59)) | (1 << (ABSLParser.Typeof - 59)) | (1 << (ABSLParser.New - 59)) | (1 << (ABSLParser.Void - 59)) | (1 << (ABSLParser.Function - 59)))) !== 0) || ((((_la - 91)) & ~0x1f) == 0 && ((1 << (_la - 91)) & ((1 << (ABSLParser.This - 91)) | (1 << (ABSLParser.Delete - 91)) | (1 << (ABSLParser.Class - 91)) | (1 << (ABSLParser.Super - 91)) | (1 << (ABSLParser.Import - 91)) | (1 << (ABSLParser.Async - 91)) | (1 << (ABSLParser.Await - 91)) | (1 << (ABSLParser.Yield - 91)) | (1 << (ABSLParser.Identifier - 91)) | (1 << (ABSLParser.StringLiteral - 91)) | (1 << (ABSLParser.TemplateStringLiteral - 91)))) !== 0)) {
        this.state = 345;
        this.expressionSequence();
      }

      this.state = 348;
      this.match(ABSLParser.SemiColon);
      this.state = 350;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ABSLParser.RegularExpressionLiteral) | (1 << ABSLParser.OpenBracket) | (1 << ABSLParser.OpenParen) | (1 << ABSLParser.OpenBrace) | (1 << ABSLParser.PlusPlus) | (1 << ABSLParser.MinusMinus) | (1 << ABSLParser.Plus) | (1 << ABSLParser.Minus) | (1 << ABSLParser.BitNot) | (1 << ABSLParser.Not))) !== 0) || ((((_la - 59)) & ~0x1f) == 0 && ((1 << (_la - 59)) & ((1 << (ABSLParser.NullLiteral - 59)) | (1 << (ABSLParser.BooleanLiteral - 59)) | (1 << (ABSLParser.DecimalLiteral - 59)) | (1 << (ABSLParser.HexIntegerLiteral - 59)) | (1 << (ABSLParser.OctalIntegerLiteral - 59)) | (1 << (ABSLParser.OctalIntegerLiteral2 - 59)) | (1 << (ABSLParser.BinaryIntegerLiteral - 59)) | (1 << (ABSLParser.BigHexIntegerLiteral - 59)) | (1 << (ABSLParser.BigOctalIntegerLiteral - 59)) | (1 << (ABSLParser.BigBinaryIntegerLiteral - 59)) | (1 << (ABSLParser.BigDecimalIntegerLiteral - 59)) | (1 << (ABSLParser.Typeof - 59)) | (1 << (ABSLParser.New - 59)) | (1 << (ABSLParser.Void - 59)) | (1 << (ABSLParser.Function - 59)))) !== 0) || ((((_la - 91)) & ~0x1f) == 0 && ((1 << (_la - 91)) & ((1 << (ABSLParser.This - 91)) | (1 << (ABSLParser.Delete - 91)) | (1 << (ABSLParser.Class - 91)) | (1 << (ABSLParser.Super - 91)) | (1 << (ABSLParser.Import - 91)) | (1 << (ABSLParser.Async - 91)) | (1 << (ABSLParser.Await - 91)) | (1 << (ABSLParser.Yield - 91)) | (1 << (ABSLParser.Identifier - 91)) | (1 << (ABSLParser.StringLiteral - 91)) | (1 << (ABSLParser.TemplateStringLiteral - 91)))) !== 0)) {
        this.state = 349;
        this.expressionSequence();
      }

      this.state = 352;
      this.match(ABSLParser.CloseParen);
      this.state = 353;
      this.statement();
      break;

    case 4:
      localctx = new ForInStatementContext(this, localctx);
      this.enterOuterAlt(localctx, 4);
      this.state = 354;
      this.match(ABSLParser.For);
      this.state = 355;
      this.match(ABSLParser.OpenParen);
      this.state = 358;
      this._errHandler.sync(this);
      switch(this._input.LA(1)) {
      case ABSLParser.RegularExpressionLiteral:
      case ABSLParser.OpenBracket:
      case ABSLParser.OpenParen:
      case ABSLParser.OpenBrace:
      case ABSLParser.PlusPlus:
      case ABSLParser.MinusMinus:
      case ABSLParser.Plus:
      case ABSLParser.Minus:
      case ABSLParser.BitNot:
      case ABSLParser.Not:
      case ABSLParser.NullLiteral:
      case ABSLParser.BooleanLiteral:
      case ABSLParser.DecimalLiteral:
      case ABSLParser.HexIntegerLiteral:
      case ABSLParser.OctalIntegerLiteral:
      case ABSLParser.OctalIntegerLiteral2:
      case ABSLParser.BinaryIntegerLiteral:
      case ABSLParser.BigHexIntegerLiteral:
      case ABSLParser.BigOctalIntegerLiteral:
      case ABSLParser.BigBinaryIntegerLiteral:
      case ABSLParser.BigDecimalIntegerLiteral:
      case ABSLParser.Typeof:
      case ABSLParser.New:
      case ABSLParser.Void:
      case ABSLParser.Function:
      case ABSLParser.This:
      case ABSLParser.Delete:
      case ABSLParser.Class:
      case ABSLParser.Super:
      case ABSLParser.Import:
      case ABSLParser.Async:
      case ABSLParser.Await:
      case ABSLParser.Yield:
      case ABSLParser.Identifier:
      case ABSLParser.StringLiteral:
      case ABSLParser.TemplateStringLiteral:
        this.state = 356;
        this.singleExpression(0);
        break;
      case ABSLParser.Var:
      case ABSLParser.Const:
      case ABSLParser.Let:
        this.state = 357;
        this.variableStatement();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
      }
      this.state = 360;
      this.match(ABSLParser.In);
      this.state = 361;
      this.expressionSequence();
      this.state = 362;
      this.match(ABSLParser.CloseParen);
      this.state = 363;
      this.statement();
      break;

    case 5:
      localctx = new ForOfStatementContext(this, localctx);
      this.enterOuterAlt(localctx, 5);
      this.state = 365;
      this.match(ABSLParser.For);
      this.state = 367;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if(_la === ABSLParser.Await) {
        this.state = 366;
        this.match(ABSLParser.Await);
      }

      this.state = 369;
      this.match(ABSLParser.OpenParen);
      this.state = 372;
      this._errHandler.sync(this);
      switch(this._input.LA(1)) {
      case ABSLParser.RegularExpressionLiteral:
      case ABSLParser.OpenBracket:
      case ABSLParser.OpenParen:
      case ABSLParser.OpenBrace:
      case ABSLParser.PlusPlus:
      case ABSLParser.MinusMinus:
      case ABSLParser.Plus:
      case ABSLParser.Minus:
      case ABSLParser.BitNot:
      case ABSLParser.Not:
      case ABSLParser.NullLiteral:
      case ABSLParser.BooleanLiteral:
      case ABSLParser.DecimalLiteral:
      case ABSLParser.HexIntegerLiteral:
      case ABSLParser.OctalIntegerLiteral:
      case ABSLParser.OctalIntegerLiteral2:
      case ABSLParser.BinaryIntegerLiteral:
      case ABSLParser.BigHexIntegerLiteral:
      case ABSLParser.BigOctalIntegerLiteral:
      case ABSLParser.BigBinaryIntegerLiteral:
      case ABSLParser.BigDecimalIntegerLiteral:
      case ABSLParser.Typeof:
      case ABSLParser.New:
      case ABSLParser.Void:
      case ABSLParser.Function:
      case ABSLParser.This:
      case ABSLParser.Delete:
      case ABSLParser.Class:
      case ABSLParser.Super:
      case ABSLParser.Import:
      case ABSLParser.Async:
      case ABSLParser.Await:
      case ABSLParser.Yield:
      case ABSLParser.Identifier:
      case ABSLParser.StringLiteral:
      case ABSLParser.TemplateStringLiteral:
        this.state = 370;
        this.singleExpression(0);
        break;
      case ABSLParser.Var:
      case ABSLParser.Const:
      case ABSLParser.Let:
        this.state = 371;
        this.variableStatement();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
      }
      this.state = 374;
      this.match(ABSLParser.Identifier);
      this.state = 375;
      this.expressionSequence();
      this.state = 376;
      this.match(ABSLParser.CloseParen);
      this.state = 377;
      this.statement();
      break;

    case 6:
      localctx = new ForeachStatementContext(this, localctx);
      this.enterOuterAlt(localctx, 6);
      this.state = 379;
      this.match(ABSLParser.Foreach);
      this.state = 380;
      this.match(ABSLParser.OpenParen);
      this.state = 381;
      this.match(ABSLParser.Var);
      this.state = 382;
      this.match(ABSLParser.Identifier);
      this.state = 383;
      this.match(ABSLParser.In);
      this.state = 384;
      this.singleExpression(0);
      this.state = 385;
      this.match(ABSLParser.CloseParen);
      this.state = 386;
      this.statement();
      break;

    }
  } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
  } finally {
    this.exitRule();
  }
  return localctx;
};


function VarModifierContext(parser, parent, invokingState) {
  if(parent === undefined) {
	    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = ABSLParser.RULE_varModifier;
  return this;
}

VarModifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VarModifierContext.prototype.constructor = VarModifierContext;

VarModifierContext.prototype.Var = function() {
  return this.getToken(ABSLParser.Var, 0);
};

VarModifierContext.prototype.Let = function() {
  return this.getToken(ABSLParser.Let, 0);
};

VarModifierContext.prototype.Const = function() {
  return this.getToken(ABSLParser.Const, 0);
};

VarModifierContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterVarModifier(this);
  }
};

VarModifierContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitVarModifier(this);
  }
};

VarModifierContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitVarModifier(this);
  } else {
    return visitor.visitChildren(this);
  }
};




ABSLParser.VarModifierContext = VarModifierContext;

ABSLParser.prototype.varModifier = function() {

  var localctx = new VarModifierContext(this, this._ctx, this.state);
  this.enterRule(localctx, 46, ABSLParser.RULE_varModifier);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 390;
    _la = this._input.LA(1);
    if(!(_la === ABSLParser.Var || _la === ABSLParser.Const || _la === ABSLParser.Let)) {
      this._errHandler.recoverInline(this);
    } else {
        	this._errHandler.reportMatch(this);
      this.consume();
    }
  } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
  } finally {
    this.exitRule();
  }
  return localctx;
};


function ContinueStatementContext(parser, parent, invokingState) {
  if(parent === undefined) {
	    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = ABSLParser.RULE_continueStatement;
  return this;
}

ContinueStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ContinueStatementContext.prototype.constructor = ContinueStatementContext;

ContinueStatementContext.prototype.Continue = function() {
  return this.getToken(ABSLParser.Continue, 0);
};

ContinueStatementContext.prototype.eos = function() {
  return this.getTypedRuleContext(EosContext, 0);
};

ContinueStatementContext.prototype.Identifier = function() {
  return this.getToken(ABSLParser.Identifier, 0);
};

ContinueStatementContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterContinueStatement(this);
  }
};

ContinueStatementContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitContinueStatement(this);
  }
};

ContinueStatementContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitContinueStatement(this);
  } else {
    return visitor.visitChildren(this);
  }
};




ABSLParser.ContinueStatementContext = ContinueStatementContext;

ABSLParser.prototype.continueStatement = function() {

  var localctx = new ContinueStatementContext(this, this._ctx, this.state);
  this.enterRule(localctx, 48, ABSLParser.RULE_continueStatement);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 392;
    this.match(ABSLParser.Continue);
    this.state = 394;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if(_la === ABSLParser.Identifier) {
      this.state = 393;
      this.match(ABSLParser.Identifier);
    }

    this.state = 396;
    this.eos();
  } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
  } finally {
    this.exitRule();
  }
  return localctx;
};


function BreakStatementContext(parser, parent, invokingState) {
  if(parent === undefined) {
	    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = ABSLParser.RULE_breakStatement;
  return this;
}

BreakStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BreakStatementContext.prototype.constructor = BreakStatementContext;

BreakStatementContext.prototype.Break = function() {
  return this.getToken(ABSLParser.Break, 0);
};

BreakStatementContext.prototype.eos = function() {
  return this.getTypedRuleContext(EosContext, 0);
};

BreakStatementContext.prototype.Identifier = function() {
  return this.getToken(ABSLParser.Identifier, 0);
};

BreakStatementContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterBreakStatement(this);
  }
};

BreakStatementContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitBreakStatement(this);
  }
};

BreakStatementContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitBreakStatement(this);
  } else {
    return visitor.visitChildren(this);
  }
};




ABSLParser.BreakStatementContext = BreakStatementContext;

ABSLParser.prototype.breakStatement = function() {

  var localctx = new BreakStatementContext(this, this._ctx, this.state);
  this.enterRule(localctx, 50, ABSLParser.RULE_breakStatement);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 398;
    this.match(ABSLParser.Break);
    this.state = 400;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if(_la === ABSLParser.Identifier) {
      this.state = 399;
      this.match(ABSLParser.Identifier);
    }

    this.state = 402;
    this.eos();
  } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
  } finally {
    this.exitRule();
  }
  return localctx;
};


function ReturnStatementContext(parser, parent, invokingState) {
  if(parent === undefined) {
	    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = ABSLParser.RULE_returnStatement;
  return this;
}

ReturnStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReturnStatementContext.prototype.constructor = ReturnStatementContext;

ReturnStatementContext.prototype.Return = function() {
  return this.getToken(ABSLParser.Return, 0);
};

ReturnStatementContext.prototype.eos = function() {
  return this.getTypedRuleContext(EosContext, 0);
};

ReturnStatementContext.prototype.expressionSequence = function() {
  return this.getTypedRuleContext(ExpressionSequenceContext, 0);
};

ReturnStatementContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterReturnStatement(this);
  }
};

ReturnStatementContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitReturnStatement(this);
  }
};

ReturnStatementContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitReturnStatement(this);
  } else {
    return visitor.visitChildren(this);
  }
};




ABSLParser.ReturnStatementContext = ReturnStatementContext;

ABSLParser.prototype.returnStatement = function() {

  var localctx = new ReturnStatementContext(this, this._ctx, this.state);
  this.enterRule(localctx, 52, ABSLParser.RULE_returnStatement);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 404;
    this.match(ABSLParser.Return);
    this.state = 406;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ABSLParser.RegularExpressionLiteral) | (1 << ABSLParser.OpenBracket) | (1 << ABSLParser.OpenParen) | (1 << ABSLParser.OpenBrace) | (1 << ABSLParser.PlusPlus) | (1 << ABSLParser.MinusMinus) | (1 << ABSLParser.Plus) | (1 << ABSLParser.Minus) | (1 << ABSLParser.BitNot) | (1 << ABSLParser.Not))) !== 0) || ((((_la - 59)) & ~0x1f) == 0 && ((1 << (_la - 59)) & ((1 << (ABSLParser.NullLiteral - 59)) | (1 << (ABSLParser.BooleanLiteral - 59)) | (1 << (ABSLParser.DecimalLiteral - 59)) | (1 << (ABSLParser.HexIntegerLiteral - 59)) | (1 << (ABSLParser.OctalIntegerLiteral - 59)) | (1 << (ABSLParser.OctalIntegerLiteral2 - 59)) | (1 << (ABSLParser.BinaryIntegerLiteral - 59)) | (1 << (ABSLParser.BigHexIntegerLiteral - 59)) | (1 << (ABSLParser.BigOctalIntegerLiteral - 59)) | (1 << (ABSLParser.BigBinaryIntegerLiteral - 59)) | (1 << (ABSLParser.BigDecimalIntegerLiteral - 59)) | (1 << (ABSLParser.Typeof - 59)) | (1 << (ABSLParser.New - 59)) | (1 << (ABSLParser.Void - 59)) | (1 << (ABSLParser.Function - 59)))) !== 0) || ((((_la - 91)) & ~0x1f) == 0 && ((1 << (_la - 91)) & ((1 << (ABSLParser.This - 91)) | (1 << (ABSLParser.Delete - 91)) | (1 << (ABSLParser.Class - 91)) | (1 << (ABSLParser.Super - 91)) | (1 << (ABSLParser.Import - 91)) | (1 << (ABSLParser.Async - 91)) | (1 << (ABSLParser.Await - 91)) | (1 << (ABSLParser.Yield - 91)) | (1 << (ABSLParser.Identifier - 91)) | (1 << (ABSLParser.StringLiteral - 91)) | (1 << (ABSLParser.TemplateStringLiteral - 91)))) !== 0)) {
      this.state = 405;
      this.expressionSequence();
    }

    this.state = 408;
    this.eos();
  } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
  } finally {
    this.exitRule();
  }
  return localctx;
};


function YieldStatementContext(parser, parent, invokingState) {
  if(parent === undefined) {
	    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = ABSLParser.RULE_yieldStatement;
  return this;
}

YieldStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
YieldStatementContext.prototype.constructor = YieldStatementContext;

YieldStatementContext.prototype.Yield = function() {
  return this.getToken(ABSLParser.Yield, 0);
};

YieldStatementContext.prototype.eos = function() {
  return this.getTypedRuleContext(EosContext, 0);
};

YieldStatementContext.prototype.expressionSequence = function() {
  return this.getTypedRuleContext(ExpressionSequenceContext, 0);
};

YieldStatementContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterYieldStatement(this);
  }
};

YieldStatementContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitYieldStatement(this);
  }
};

YieldStatementContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitYieldStatement(this);
  } else {
    return visitor.visitChildren(this);
  }
};




ABSLParser.YieldStatementContext = YieldStatementContext;

ABSLParser.prototype.yieldStatement = function() {

  var localctx = new YieldStatementContext(this, this._ctx, this.state);
  this.enterRule(localctx, 54, ABSLParser.RULE_yieldStatement);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 410;
    this.match(ABSLParser.Yield);
    this.state = 412;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ABSLParser.RegularExpressionLiteral) | (1 << ABSLParser.OpenBracket) | (1 << ABSLParser.OpenParen) | (1 << ABSLParser.OpenBrace) | (1 << ABSLParser.PlusPlus) | (1 << ABSLParser.MinusMinus) | (1 << ABSLParser.Plus) | (1 << ABSLParser.Minus) | (1 << ABSLParser.BitNot) | (1 << ABSLParser.Not))) !== 0) || ((((_la - 59)) & ~0x1f) == 0 && ((1 << (_la - 59)) & ((1 << (ABSLParser.NullLiteral - 59)) | (1 << (ABSLParser.BooleanLiteral - 59)) | (1 << (ABSLParser.DecimalLiteral - 59)) | (1 << (ABSLParser.HexIntegerLiteral - 59)) | (1 << (ABSLParser.OctalIntegerLiteral - 59)) | (1 << (ABSLParser.OctalIntegerLiteral2 - 59)) | (1 << (ABSLParser.BinaryIntegerLiteral - 59)) | (1 << (ABSLParser.BigHexIntegerLiteral - 59)) | (1 << (ABSLParser.BigOctalIntegerLiteral - 59)) | (1 << (ABSLParser.BigBinaryIntegerLiteral - 59)) | (1 << (ABSLParser.BigDecimalIntegerLiteral - 59)) | (1 << (ABSLParser.Typeof - 59)) | (1 << (ABSLParser.New - 59)) | (1 << (ABSLParser.Void - 59)) | (1 << (ABSLParser.Function - 59)))) !== 0) || ((((_la - 91)) & ~0x1f) == 0 && ((1 << (_la - 91)) & ((1 << (ABSLParser.This - 91)) | (1 << (ABSLParser.Delete - 91)) | (1 << (ABSLParser.Class - 91)) | (1 << (ABSLParser.Super - 91)) | (1 << (ABSLParser.Import - 91)) | (1 << (ABSLParser.Async - 91)) | (1 << (ABSLParser.Await - 91)) | (1 << (ABSLParser.Yield - 91)) | (1 << (ABSLParser.Identifier - 91)) | (1 << (ABSLParser.StringLiteral - 91)) | (1 << (ABSLParser.TemplateStringLiteral - 91)))) !== 0)) {
      this.state = 411;
      this.expressionSequence();
    }

    this.state = 414;
    this.eos();
  } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
  } finally {
    this.exitRule();
  }
  return localctx;
};


function WithStatementContext(parser, parent, invokingState) {
  if(parent === undefined) {
	    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = ABSLParser.RULE_withStatement;
  return this;
}

WithStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WithStatementContext.prototype.constructor = WithStatementContext;

WithStatementContext.prototype.With = function() {
  return this.getToken(ABSLParser.With, 0);
};

WithStatementContext.prototype.OpenParen = function() {
  return this.getToken(ABSLParser.OpenParen, 0);
};

WithStatementContext.prototype.expressionSequence = function() {
  return this.getTypedRuleContext(ExpressionSequenceContext, 0);
};

WithStatementContext.prototype.CloseParen = function() {
  return this.getToken(ABSLParser.CloseParen, 0);
};

WithStatementContext.prototype.statement = function() {
  return this.getTypedRuleContext(StatementContext, 0);
};

WithStatementContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterWithStatement(this);
  }
};

WithStatementContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitWithStatement(this);
  }
};

WithStatementContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitWithStatement(this);
  } else {
    return visitor.visitChildren(this);
  }
};




ABSLParser.WithStatementContext = WithStatementContext;

ABSLParser.prototype.withStatement = function() {

  var localctx = new WithStatementContext(this, this._ctx, this.state);
  this.enterRule(localctx, 56, ABSLParser.RULE_withStatement);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 416;
    this.match(ABSLParser.With);
    this.state = 417;
    this.match(ABSLParser.OpenParen);
    this.state = 418;
    this.expressionSequence();
    this.state = 419;
    this.match(ABSLParser.CloseParen);
    this.state = 420;
    this.statement();
  } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
  } finally {
    this.exitRule();
  }
  return localctx;
};


function SwitchStatementContext(parser, parent, invokingState) {
  if(parent === undefined) {
	    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = ABSLParser.RULE_switchStatement;
  return this;
}

SwitchStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SwitchStatementContext.prototype.constructor = SwitchStatementContext;

SwitchStatementContext.prototype.Switch = function() {
  return this.getToken(ABSLParser.Switch, 0);
};

SwitchStatementContext.prototype.OpenParen = function() {
  return this.getToken(ABSLParser.OpenParen, 0);
};

SwitchStatementContext.prototype.expressionSequence = function() {
  return this.getTypedRuleContext(ExpressionSequenceContext, 0);
};

SwitchStatementContext.prototype.CloseParen = function() {
  return this.getToken(ABSLParser.CloseParen, 0);
};

SwitchStatementContext.prototype.caseBlock = function() {
  return this.getTypedRuleContext(CaseBlockContext, 0);
};

SwitchStatementContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterSwitchStatement(this);
  }
};

SwitchStatementContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitSwitchStatement(this);
  }
};

SwitchStatementContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitSwitchStatement(this);
  } else {
    return visitor.visitChildren(this);
  }
};




ABSLParser.SwitchStatementContext = SwitchStatementContext;

ABSLParser.prototype.switchStatement = function() {

  var localctx = new SwitchStatementContext(this, this._ctx, this.state);
  this.enterRule(localctx, 58, ABSLParser.RULE_switchStatement);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 422;
    this.match(ABSLParser.Switch);
    this.state = 423;
    this.match(ABSLParser.OpenParen);
    this.state = 424;
    this.expressionSequence();
    this.state = 425;
    this.match(ABSLParser.CloseParen);
    this.state = 426;
    this.caseBlock();
  } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
  } finally {
    this.exitRule();
  }
  return localctx;
};


function CaseBlockContext(parser, parent, invokingState) {
  if(parent === undefined) {
	    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = ABSLParser.RULE_caseBlock;
  return this;
}

CaseBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CaseBlockContext.prototype.constructor = CaseBlockContext;

CaseBlockContext.prototype.OpenBrace = function() {
  return this.getToken(ABSLParser.OpenBrace, 0);
};

CaseBlockContext.prototype.CloseBrace = function() {
  return this.getToken(ABSLParser.CloseBrace, 0);
};

CaseBlockContext.prototype.caseClauses = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(CaseClausesContext);
  } else {
    return this.getTypedRuleContext(CaseClausesContext, i);
  }
};

CaseBlockContext.prototype.defaultClause = function() {
  return this.getTypedRuleContext(DefaultClauseContext, 0);
};

CaseBlockContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterCaseBlock(this);
  }
};

CaseBlockContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitCaseBlock(this);
  }
};

CaseBlockContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitCaseBlock(this);
  } else {
    return visitor.visitChildren(this);
  }
};




ABSLParser.CaseBlockContext = CaseBlockContext;

ABSLParser.prototype.caseBlock = function() {

  var localctx = new CaseBlockContext(this, this._ctx, this.state);
  this.enterRule(localctx, 60, ABSLParser.RULE_caseBlock);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 428;
    this.match(ABSLParser.OpenBrace);
    this.state = 430;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if(_la === ABSLParser.Case) {
      this.state = 429;
      this.caseClauses();
    }

    this.state = 436;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if(_la === ABSLParser.Default) {
      this.state = 432;
      this.defaultClause();
      this.state = 434;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if(_la === ABSLParser.Case) {
        this.state = 433;
        this.caseClauses();
      }

    }

    this.state = 438;
    this.match(ABSLParser.CloseBrace);
  } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
  } finally {
    this.exitRule();
  }
  return localctx;
};


function CaseClausesContext(parser, parent, invokingState) {
  if(parent === undefined) {
	    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = ABSLParser.RULE_caseClauses;
  return this;
}

CaseClausesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CaseClausesContext.prototype.constructor = CaseClausesContext;

CaseClausesContext.prototype.caseClause = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(CaseClauseContext);
  } else {
    return this.getTypedRuleContext(CaseClauseContext, i);
  }
};

CaseClausesContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterCaseClauses(this);
  }
};

CaseClausesContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitCaseClauses(this);
  }
};

CaseClausesContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitCaseClauses(this);
  } else {
    return visitor.visitChildren(this);
  }
};




ABSLParser.CaseClausesContext = CaseClausesContext;

ABSLParser.prototype.caseClauses = function() {

  var localctx = new CaseClausesContext(this, this._ctx, this.state);
  this.enterRule(localctx, 62, ABSLParser.RULE_caseClauses);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 441;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    do {
      this.state = 440;
      this.caseClause();
      this.state = 443;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    } while(_la === ABSLParser.Case);
  } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
  } finally {
    this.exitRule();
  }
  return localctx;
};


function CaseClauseContext(parser, parent, invokingState) {
  if(parent === undefined) {
	    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = ABSLParser.RULE_caseClause;
  return this;
}

CaseClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CaseClauseContext.prototype.constructor = CaseClauseContext;

CaseClauseContext.prototype.Case = function() {
  return this.getToken(ABSLParser.Case, 0);
};

CaseClauseContext.prototype.expressionSequence = function() {
  return this.getTypedRuleContext(ExpressionSequenceContext, 0);
};

CaseClauseContext.prototype.Colon = function() {
  return this.getToken(ABSLParser.Colon, 0);
};

CaseClauseContext.prototype.statementList = function() {
  return this.getTypedRuleContext(StatementListContext, 0);
};

CaseClauseContext.prototype.singleExpression = function() {
  return this.getTypedRuleContext(SingleExpressionContext, 0);
};

CaseClauseContext.prototype.OpenParen = function() {
  return this.getToken(ABSLParser.OpenParen, 0);
};

CaseClauseContext.prototype.CloseParen = function() {
  return this.getToken(ABSLParser.CloseParen, 0);
};

CaseClauseContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterCaseClause(this);
  }
};

CaseClauseContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitCaseClause(this);
  }
};

CaseClauseContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitCaseClause(this);
  } else {
    return visitor.visitChildren(this);
  }
};




ABSLParser.CaseClauseContext = CaseClauseContext;

ABSLParser.prototype.caseClause = function() {

  var localctx = new CaseClauseContext(this, this._ctx, this.state);
  this.enterRule(localctx, 64, ABSLParser.RULE_caseClause);
  var _la = 0; // Token type
  try {
    this.state = 462;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 46, this._ctx);
    switch(la_) {
    case 1:
      this.enterOuterAlt(localctx, 1);
      this.state = 445;
      this.match(ABSLParser.Case);
      this.state = 446;
      this.expressionSequence();
      this.state = 447;
      this.match(ABSLParser.Colon);
      this.state = 449;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ABSLParser.RegularExpressionLiteral) | (1 << ABSLParser.OpenBracket) | (1 << ABSLParser.OpenParen) | (1 << ABSLParser.OpenBrace) | (1 << ABSLParser.SemiColon) | (1 << ABSLParser.PlusPlus) | (1 << ABSLParser.MinusMinus) | (1 << ABSLParser.Plus) | (1 << ABSLParser.Minus) | (1 << ABSLParser.BitNot) | (1 << ABSLParser.Not))) !== 0) || ((((_la - 59)) & ~0x1f) == 0 && ((1 << (_la - 59)) & ((1 << (ABSLParser.NullLiteral - 59)) | (1 << (ABSLParser.BooleanLiteral - 59)) | (1 << (ABSLParser.DecimalLiteral - 59)) | (1 << (ABSLParser.HexIntegerLiteral - 59)) | (1 << (ABSLParser.OctalIntegerLiteral - 59)) | (1 << (ABSLParser.OctalIntegerLiteral2 - 59)) | (1 << (ABSLParser.BinaryIntegerLiteral - 59)) | (1 << (ABSLParser.BigHexIntegerLiteral - 59)) | (1 << (ABSLParser.BigOctalIntegerLiteral - 59)) | (1 << (ABSLParser.BigBinaryIntegerLiteral - 59)) | (1 << (ABSLParser.BigDecimalIntegerLiteral - 59)) | (1 << (ABSLParser.Break - 59)) | (1 << (ABSLParser.Do - 59)) | (1 << (ABSLParser.Typeof - 59)) | (1 << (ABSLParser.New - 59)) | (1 << (ABSLParser.Var - 59)) | (1 << (ABSLParser.Return - 59)) | (1 << (ABSLParser.Void - 59)) | (1 << (ABSLParser.Continue - 59)) | (1 << (ABSLParser.For - 59)) | (1 << (ABSLParser.Foreach - 59)) | (1 << (ABSLParser.Switch - 59)) | (1 << (ABSLParser.While - 59)) | (1 << (ABSLParser.Debugger - 59)) | (1 << (ABSLParser.Function - 59)))) !== 0) || ((((_la - 91)) & ~0x1f) == 0 && ((1 << (_la - 91)) & ((1 << (ABSLParser.This - 91)) | (1 << (ABSLParser.With - 91)) | (1 << (ABSLParser.If - 91)) | (1 << (ABSLParser.Throw - 91)) | (1 << (ABSLParser.Raise - 91)) | (1 << (ABSLParser.Delete - 91)) | (1 << (ABSLParser.Try - 91)) | (1 << (ABSLParser.Class - 91)) | (1 << (ABSLParser.Super - 91)) | (1 << (ABSLParser.Const - 91)) | (1 << (ABSLParser.Export - 91)) | (1 << (ABSLParser.Import - 91)) | (1 << (ABSLParser.Async - 91)) | (1 << (ABSLParser.Await - 91)) | (1 << (ABSLParser.Let - 91)) | (1 << (ABSLParser.Yield - 91)) | (1 << (ABSLParser.Identifier - 91)) | (1 << (ABSLParser.StringLiteral - 91)) | (1 << (ABSLParser.TemplateStringLiteral - 91)))) !== 0)) {
        this.state = 448;
        this.statementList();
      }

      break;

    case 2:
      this.enterOuterAlt(localctx, 2);
      this.state = 451;
      this.match(ABSLParser.Case);
      this.state = 453;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 43, this._ctx);
      if(la_ === 1) {
        this.state = 452;
        this.match(ABSLParser.OpenParen);

      }
      this.state = 455;
      this.singleExpression(0);
      this.state = 457;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if(_la === ABSLParser.CloseParen) {
        this.state = 456;
        this.match(ABSLParser.CloseParen);
      }

      this.state = 460;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ABSLParser.RegularExpressionLiteral) | (1 << ABSLParser.OpenBracket) | (1 << ABSLParser.OpenParen) | (1 << ABSLParser.OpenBrace) | (1 << ABSLParser.SemiColon) | (1 << ABSLParser.PlusPlus) | (1 << ABSLParser.MinusMinus) | (1 << ABSLParser.Plus) | (1 << ABSLParser.Minus) | (1 << ABSLParser.BitNot) | (1 << ABSLParser.Not))) !== 0) || ((((_la - 59)) & ~0x1f) == 0 && ((1 << (_la - 59)) & ((1 << (ABSLParser.NullLiteral - 59)) | (1 << (ABSLParser.BooleanLiteral - 59)) | (1 << (ABSLParser.DecimalLiteral - 59)) | (1 << (ABSLParser.HexIntegerLiteral - 59)) | (1 << (ABSLParser.OctalIntegerLiteral - 59)) | (1 << (ABSLParser.OctalIntegerLiteral2 - 59)) | (1 << (ABSLParser.BinaryIntegerLiteral - 59)) | (1 << (ABSLParser.BigHexIntegerLiteral - 59)) | (1 << (ABSLParser.BigOctalIntegerLiteral - 59)) | (1 << (ABSLParser.BigBinaryIntegerLiteral - 59)) | (1 << (ABSLParser.BigDecimalIntegerLiteral - 59)) | (1 << (ABSLParser.Break - 59)) | (1 << (ABSLParser.Do - 59)) | (1 << (ABSLParser.Typeof - 59)) | (1 << (ABSLParser.New - 59)) | (1 << (ABSLParser.Var - 59)) | (1 << (ABSLParser.Return - 59)) | (1 << (ABSLParser.Void - 59)) | (1 << (ABSLParser.Continue - 59)) | (1 << (ABSLParser.For - 59)) | (1 << (ABSLParser.Foreach - 59)) | (1 << (ABSLParser.Switch - 59)) | (1 << (ABSLParser.While - 59)) | (1 << (ABSLParser.Debugger - 59)) | (1 << (ABSLParser.Function - 59)))) !== 0) || ((((_la - 91)) & ~0x1f) == 0 && ((1 << (_la - 91)) & ((1 << (ABSLParser.This - 91)) | (1 << (ABSLParser.With - 91)) | (1 << (ABSLParser.If - 91)) | (1 << (ABSLParser.Throw - 91)) | (1 << (ABSLParser.Raise - 91)) | (1 << (ABSLParser.Delete - 91)) | (1 << (ABSLParser.Try - 91)) | (1 << (ABSLParser.Class - 91)) | (1 << (ABSLParser.Super - 91)) | (1 << (ABSLParser.Const - 91)) | (1 << (ABSLParser.Export - 91)) | (1 << (ABSLParser.Import - 91)) | (1 << (ABSLParser.Async - 91)) | (1 << (ABSLParser.Await - 91)) | (1 << (ABSLParser.Let - 91)) | (1 << (ABSLParser.Yield - 91)) | (1 << (ABSLParser.Identifier - 91)) | (1 << (ABSLParser.StringLiteral - 91)) | (1 << (ABSLParser.TemplateStringLiteral - 91)))) !== 0)) {
        this.state = 459;
        this.statementList();
      }

      break;

    }
  } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
  } finally {
    this.exitRule();
  }
  return localctx;
};


function DefaultClauseContext(parser, parent, invokingState) {
  if(parent === undefined) {
	    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = ABSLParser.RULE_defaultClause;
  return this;
}

DefaultClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DefaultClauseContext.prototype.constructor = DefaultClauseContext;

DefaultClauseContext.prototype.Default = function() {
  return this.getToken(ABSLParser.Default, 0);
};

DefaultClauseContext.prototype.Colon = function() {
  return this.getToken(ABSLParser.Colon, 0);
};

DefaultClauseContext.prototype.statementList = function() {
  return this.getTypedRuleContext(StatementListContext, 0);
};

DefaultClauseContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterDefaultClause(this);
  }
};

DefaultClauseContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitDefaultClause(this);
  }
};

DefaultClauseContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitDefaultClause(this);
  } else {
    return visitor.visitChildren(this);
  }
};




ABSLParser.DefaultClauseContext = DefaultClauseContext;

ABSLParser.prototype.defaultClause = function() {

  var localctx = new DefaultClauseContext(this, this._ctx, this.state);
  this.enterRule(localctx, 66, ABSLParser.RULE_defaultClause);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 464;
    this.match(ABSLParser.Default);
    this.state = 466;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if(_la === ABSLParser.Colon) {
      this.state = 465;
      this.match(ABSLParser.Colon);
    }

    this.state = 469;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ABSLParser.RegularExpressionLiteral) | (1 << ABSLParser.OpenBracket) | (1 << ABSLParser.OpenParen) | (1 << ABSLParser.OpenBrace) | (1 << ABSLParser.SemiColon) | (1 << ABSLParser.PlusPlus) | (1 << ABSLParser.MinusMinus) | (1 << ABSLParser.Plus) | (1 << ABSLParser.Minus) | (1 << ABSLParser.BitNot) | (1 << ABSLParser.Not))) !== 0) || ((((_la - 59)) & ~0x1f) == 0 && ((1 << (_la - 59)) & ((1 << (ABSLParser.NullLiteral - 59)) | (1 << (ABSLParser.BooleanLiteral - 59)) | (1 << (ABSLParser.DecimalLiteral - 59)) | (1 << (ABSLParser.HexIntegerLiteral - 59)) | (1 << (ABSLParser.OctalIntegerLiteral - 59)) | (1 << (ABSLParser.OctalIntegerLiteral2 - 59)) | (1 << (ABSLParser.BinaryIntegerLiteral - 59)) | (1 << (ABSLParser.BigHexIntegerLiteral - 59)) | (1 << (ABSLParser.BigOctalIntegerLiteral - 59)) | (1 << (ABSLParser.BigBinaryIntegerLiteral - 59)) | (1 << (ABSLParser.BigDecimalIntegerLiteral - 59)) | (1 << (ABSLParser.Break - 59)) | (1 << (ABSLParser.Do - 59)) | (1 << (ABSLParser.Typeof - 59)) | (1 << (ABSLParser.New - 59)) | (1 << (ABSLParser.Var - 59)) | (1 << (ABSLParser.Return - 59)) | (1 << (ABSLParser.Void - 59)) | (1 << (ABSLParser.Continue - 59)) | (1 << (ABSLParser.For - 59)) | (1 << (ABSLParser.Foreach - 59)) | (1 << (ABSLParser.Switch - 59)) | (1 << (ABSLParser.While - 59)) | (1 << (ABSLParser.Debugger - 59)) | (1 << (ABSLParser.Function - 59)))) !== 0) || ((((_la - 91)) & ~0x1f) == 0 && ((1 << (_la - 91)) & ((1 << (ABSLParser.This - 91)) | (1 << (ABSLParser.With - 91)) | (1 << (ABSLParser.If - 91)) | (1 << (ABSLParser.Throw - 91)) | (1 << (ABSLParser.Raise - 91)) | (1 << (ABSLParser.Delete - 91)) | (1 << (ABSLParser.Try - 91)) | (1 << (ABSLParser.Class - 91)) | (1 << (ABSLParser.Super - 91)) | (1 << (ABSLParser.Const - 91)) | (1 << (ABSLParser.Export - 91)) | (1 << (ABSLParser.Import - 91)) | (1 << (ABSLParser.Async - 91)) | (1 << (ABSLParser.Await - 91)) | (1 << (ABSLParser.Let - 91)) | (1 << (ABSLParser.Yield - 91)) | (1 << (ABSLParser.Identifier - 91)) | (1 << (ABSLParser.StringLiteral - 91)) | (1 << (ABSLParser.TemplateStringLiteral - 91)))) !== 0)) {
      this.state = 468;
      this.statementList();
    }

  } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
  } finally {
    this.exitRule();
  }
  return localctx;
};


function LabelledStatementContext(parser, parent, invokingState) {
  if(parent === undefined) {
	    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = ABSLParser.RULE_labelledStatement;
  return this;
}

LabelledStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LabelledStatementContext.prototype.constructor = LabelledStatementContext;

LabelledStatementContext.prototype.Identifier = function() {
  return this.getToken(ABSLParser.Identifier, 0);
};

LabelledStatementContext.prototype.Colon = function() {
  return this.getToken(ABSLParser.Colon, 0);
};

LabelledStatementContext.prototype.statement = function() {
  return this.getTypedRuleContext(StatementContext, 0);
};

LabelledStatementContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterLabelledStatement(this);
  }
};

LabelledStatementContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitLabelledStatement(this);
  }
};

LabelledStatementContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitLabelledStatement(this);
  } else {
    return visitor.visitChildren(this);
  }
};




ABSLParser.LabelledStatementContext = LabelledStatementContext;

ABSLParser.prototype.labelledStatement = function() {

  var localctx = new LabelledStatementContext(this, this._ctx, this.state);
  this.enterRule(localctx, 68, ABSLParser.RULE_labelledStatement);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 471;
    this.match(ABSLParser.Identifier);
    this.state = 472;
    this.match(ABSLParser.Colon);
    this.state = 473;
    this.statement();
  } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
  } finally {
    this.exitRule();
  }
  return localctx;
};


function ThrowStatementContext(parser, parent, invokingState) {
  if(parent === undefined) {
	    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = ABSLParser.RULE_throwStatement;
  return this;
}

ThrowStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ThrowStatementContext.prototype.constructor = ThrowStatementContext;

ThrowStatementContext.prototype.Throw = function() {
  return this.getToken(ABSLParser.Throw, 0);
};

ThrowStatementContext.prototype.expressionSequence = function() {
  return this.getTypedRuleContext(ExpressionSequenceContext, 0);
};

ThrowStatementContext.prototype.eos = function() {
  return this.getTypedRuleContext(EosContext, 0);
};

ThrowStatementContext.prototype.Raise = function() {
  return this.getToken(ABSLParser.Raise, 0);
};

ThrowStatementContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterThrowStatement(this);
  }
};

ThrowStatementContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitThrowStatement(this);
  }
};

ThrowStatementContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitThrowStatement(this);
  } else {
    return visitor.visitChildren(this);
  }
};




ABSLParser.ThrowStatementContext = ThrowStatementContext;

ABSLParser.prototype.throwStatement = function() {

  var localctx = new ThrowStatementContext(this, this._ctx, this.state);
  this.enterRule(localctx, 70, ABSLParser.RULE_throwStatement);
  try {
    this.state = 483;
    this._errHandler.sync(this);
    switch(this._input.LA(1)) {
    case ABSLParser.Throw:
      this.enterOuterAlt(localctx, 1);
      this.state = 475;
      this.match(ABSLParser.Throw);
      this.state = 476;
      this.expressionSequence();
      this.state = 477;
      this.eos();
      break;
    case ABSLParser.Raise:
      this.enterOuterAlt(localctx, 2);
      this.state = 479;
      this.match(ABSLParser.Raise);
      this.state = 480;
      this.expressionSequence();
      this.state = 481;
      this.eos();
      break;
    default:
      throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
  } finally {
    this.exitRule();
  }
  return localctx;
};


function TryStatementContext(parser, parent, invokingState) {
  if(parent === undefined) {
	    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = ABSLParser.RULE_tryStatement;
  return this;
}

TryStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TryStatementContext.prototype.constructor = TryStatementContext;

TryStatementContext.prototype.Try = function() {
  return this.getToken(ABSLParser.Try, 0);
};

TryStatementContext.prototype.block = function() {
  return this.getTypedRuleContext(BlockContext, 0);
};

TryStatementContext.prototype.catchProduction = function() {
  return this.getTypedRuleContext(CatchProductionContext, 0);
};

TryStatementContext.prototype.finallyProduction = function() {
  return this.getTypedRuleContext(FinallyProductionContext, 0);
};

TryStatementContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterTryStatement(this);
  }
};

TryStatementContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitTryStatement(this);
  }
};

TryStatementContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitTryStatement(this);
  } else {
    return visitor.visitChildren(this);
  }
};




ABSLParser.TryStatementContext = TryStatementContext;

ABSLParser.prototype.tryStatement = function() {

  var localctx = new TryStatementContext(this, this._ctx, this.state);
  this.enterRule(localctx, 72, ABSLParser.RULE_tryStatement);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 485;
    this.match(ABSLParser.Try);
    this.state = 486;
    this.block();
    this.state = 492;
    this._errHandler.sync(this);
    switch(this._input.LA(1)) {
    case ABSLParser.Catch:
      this.state = 487;
      this.catchProduction();
      this.state = 489;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if(_la === ABSLParser.Finally) {
        this.state = 488;
        this.finallyProduction();
      }

      break;
    case ABSLParser.Finally:
      this.state = 491;
      this.finallyProduction();
      break;
    default:
      throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
  } finally {
    this.exitRule();
  }
  return localctx;
};


function CatchProductionContext(parser, parent, invokingState) {
  if(parent === undefined) {
	    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = ABSLParser.RULE_catchProduction;
  return this;
}

CatchProductionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CatchProductionContext.prototype.constructor = CatchProductionContext;

CatchProductionContext.prototype.Catch = function() {
  return this.getToken(ABSLParser.Catch, 0);
};

CatchProductionContext.prototype.block = function() {
  return this.getTypedRuleContext(BlockContext, 0);
};

CatchProductionContext.prototype.OpenParen = function() {
  return this.getToken(ABSLParser.OpenParen, 0);
};

CatchProductionContext.prototype.CloseParen = function() {
  return this.getToken(ABSLParser.CloseParen, 0);
};

CatchProductionContext.prototype.assignable = function() {
  return this.getTypedRuleContext(AssignableContext, 0);
};

CatchProductionContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterCatchProduction(this);
  }
};

CatchProductionContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitCatchProduction(this);
  }
};

CatchProductionContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitCatchProduction(this);
  } else {
    return visitor.visitChildren(this);
  }
};




ABSLParser.CatchProductionContext = CatchProductionContext;

ABSLParser.prototype.catchProduction = function() {

  var localctx = new CatchProductionContext(this, this._ctx, this.state);
  this.enterRule(localctx, 74, ABSLParser.RULE_catchProduction);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 494;
    this.match(ABSLParser.Catch);
    this.state = 500;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if(_la === ABSLParser.OpenParen) {
      this.state = 495;
      this.match(ABSLParser.OpenParen);
      this.state = 497;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if(_la === ABSLParser.OpenBracket || _la === ABSLParser.OpenBrace || _la === ABSLParser.Identifier) {
        this.state = 496;
        this.assignable();
      }

      this.state = 499;
      this.match(ABSLParser.CloseParen);
    }

    this.state = 502;
    this.block();
  } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
  } finally {
    this.exitRule();
  }
  return localctx;
};


function FinallyProductionContext(parser, parent, invokingState) {
  if(parent === undefined) {
	    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = ABSLParser.RULE_finallyProduction;
  return this;
}

FinallyProductionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FinallyProductionContext.prototype.constructor = FinallyProductionContext;

FinallyProductionContext.prototype.Finally = function() {
  return this.getToken(ABSLParser.Finally, 0);
};

FinallyProductionContext.prototype.block = function() {
  return this.getTypedRuleContext(BlockContext, 0);
};

FinallyProductionContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterFinallyProduction(this);
  }
};

FinallyProductionContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitFinallyProduction(this);
  }
};

FinallyProductionContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitFinallyProduction(this);
  } else {
    return visitor.visitChildren(this);
  }
};




ABSLParser.FinallyProductionContext = FinallyProductionContext;

ABSLParser.prototype.finallyProduction = function() {

  var localctx = new FinallyProductionContext(this, this._ctx, this.state);
  this.enterRule(localctx, 76, ABSLParser.RULE_finallyProduction);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 504;
    this.match(ABSLParser.Finally);
    this.state = 505;
    this.block();
  } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
  } finally {
    this.exitRule();
  }
  return localctx;
};


function DebuggerStatementContext(parser, parent, invokingState) {
  if(parent === undefined) {
	    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = ABSLParser.RULE_debuggerStatement;
  return this;
}

DebuggerStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DebuggerStatementContext.prototype.constructor = DebuggerStatementContext;

DebuggerStatementContext.prototype.Debugger = function() {
  return this.getToken(ABSLParser.Debugger, 0);
};

DebuggerStatementContext.prototype.eos = function() {
  return this.getTypedRuleContext(EosContext, 0);
};

DebuggerStatementContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterDebuggerStatement(this);
  }
};

DebuggerStatementContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitDebuggerStatement(this);
  }
};

DebuggerStatementContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitDebuggerStatement(this);
  } else {
    return visitor.visitChildren(this);
  }
};




ABSLParser.DebuggerStatementContext = DebuggerStatementContext;

ABSLParser.prototype.debuggerStatement = function() {

  var localctx = new DebuggerStatementContext(this, this._ctx, this.state);
  this.enterRule(localctx, 78, ABSLParser.RULE_debuggerStatement);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 507;
    this.match(ABSLParser.Debugger);
    this.state = 508;
    this.eos();
  } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
  } finally {
    this.exitRule();
  }
  return localctx;
};


function FunctionDeclarationContext(parser, parent, invokingState) {
  if(parent === undefined) {
	    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = ABSLParser.RULE_functionDeclaration;
  return this;
}

FunctionDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionDeclarationContext.prototype.constructor = FunctionDeclarationContext;

FunctionDeclarationContext.prototype.Function = function() {
  return this.getToken(ABSLParser.Function, 0);
};

FunctionDeclarationContext.prototype.Identifier = function() {
  return this.getToken(ABSLParser.Identifier, 0);
};

FunctionDeclarationContext.prototype.OpenParen = function() {
  return this.getToken(ABSLParser.OpenParen, 0);
};

FunctionDeclarationContext.prototype.CloseParen = function() {
  return this.getToken(ABSLParser.CloseParen, 0);
};

FunctionDeclarationContext.prototype.OpenBrace = function() {
  return this.getToken(ABSLParser.OpenBrace, 0);
};

FunctionDeclarationContext.prototype.functionBody = function() {
  return this.getTypedRuleContext(FunctionBodyContext, 0);
};

FunctionDeclarationContext.prototype.CloseBrace = function() {
  return this.getToken(ABSLParser.CloseBrace, 0);
};

FunctionDeclarationContext.prototype.Async = function() {
  return this.getToken(ABSLParser.Async, 0);
};

FunctionDeclarationContext.prototype.Multiply = function() {
  return this.getToken(ABSLParser.Multiply, 0);
};

FunctionDeclarationContext.prototype.formalParameterList = function() {
  return this.getTypedRuleContext(FormalParameterListContext, 0);
};

FunctionDeclarationContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterFunctionDeclaration(this);
  }
};

FunctionDeclarationContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitFunctionDeclaration(this);
  }
};

FunctionDeclarationContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitFunctionDeclaration(this);
  } else {
    return visitor.visitChildren(this);
  }
};




ABSLParser.FunctionDeclarationContext = FunctionDeclarationContext;

ABSLParser.prototype.functionDeclaration = function() {

  var localctx = new FunctionDeclarationContext(this, this._ctx, this.state);
  this.enterRule(localctx, 80, ABSLParser.RULE_functionDeclaration);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 511;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if(_la === ABSLParser.Async) {
      this.state = 510;
      this.match(ABSLParser.Async);
    }

    this.state = 513;
    this.match(ABSLParser.Function);
    this.state = 515;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if(_la === ABSLParser.Multiply) {
      this.state = 514;
      this.match(ABSLParser.Multiply);
    }

    this.state = 517;
    this.match(ABSLParser.Identifier);
    this.state = 518;
    this.match(ABSLParser.OpenParen);
    this.state = 520;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ABSLParser.OpenBracket) | (1 << ABSLParser.OpenBrace) | (1 << ABSLParser.Ellipsis))) !== 0) || _la === ABSLParser.Identifier) {
      this.state = 519;
      this.formalParameterList();
    }

    this.state = 522;
    this.match(ABSLParser.CloseParen);
    this.state = 523;
    this.match(ABSLParser.OpenBrace);
    this.state = 524;
    this.functionBody();
    this.state = 525;
    this.match(ABSLParser.CloseBrace);
  } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
  } finally {
    this.exitRule();
  }
  return localctx;
};


function ClassDeclarationContext(parser, parent, invokingState) {
  if(parent === undefined) {
	    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = ABSLParser.RULE_classDeclaration;
  return this;
}

ClassDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassDeclarationContext.prototype.constructor = ClassDeclarationContext;

ClassDeclarationContext.prototype.Class = function() {
  return this.getToken(ABSLParser.Class, 0);
};

ClassDeclarationContext.prototype.Identifier = function() {
  return this.getToken(ABSLParser.Identifier, 0);
};

ClassDeclarationContext.prototype.classTail = function() {
  return this.getTypedRuleContext(ClassTailContext, 0);
};

ClassDeclarationContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterClassDeclaration(this);
  }
};

ClassDeclarationContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitClassDeclaration(this);
  }
};

ClassDeclarationContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitClassDeclaration(this);
  } else {
    return visitor.visitChildren(this);
  }
};




ABSLParser.ClassDeclarationContext = ClassDeclarationContext;

ABSLParser.prototype.classDeclaration = function() {

  var localctx = new ClassDeclarationContext(this, this._ctx, this.state);
  this.enterRule(localctx, 82, ABSLParser.RULE_classDeclaration);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 527;
    this.match(ABSLParser.Class);
    this.state = 528;
    this.match(ABSLParser.Identifier);
    this.state = 529;
    this.classTail();
  } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
  } finally {
    this.exitRule();
  }
  return localctx;
};


function ClassTailContext(parser, parent, invokingState) {
  if(parent === undefined) {
	    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = ABSLParser.RULE_classTail;
  return this;
}

ClassTailContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassTailContext.prototype.constructor = ClassTailContext;

ClassTailContext.prototype.OpenBrace = function() {
  return this.getToken(ABSLParser.OpenBrace, 0);
};

ClassTailContext.prototype.CloseBrace = function() {
  return this.getToken(ABSLParser.CloseBrace, 0);
};

ClassTailContext.prototype.Extends = function() {
  return this.getToken(ABSLParser.Extends, 0);
};

ClassTailContext.prototype.singleExpression = function() {
  return this.getTypedRuleContext(SingleExpressionContext, 0);
};

ClassTailContext.prototype.classElement = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(ClassElementContext);
  } else {
    return this.getTypedRuleContext(ClassElementContext, i);
  }
};

ClassTailContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterClassTail(this);
  }
};

ClassTailContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitClassTail(this);
  }
};

ClassTailContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitClassTail(this);
  } else {
    return visitor.visitChildren(this);
  }
};




ABSLParser.ClassTailContext = ClassTailContext;

ABSLParser.prototype.classTail = function() {

  var localctx = new ClassTailContext(this, this._ctx, this.state);
  this.enterRule(localctx, 84, ABSLParser.RULE_classTail);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 533;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if(_la === ABSLParser.Extends) {
      this.state = 531;
      this.match(ABSLParser.Extends);
      this.state = 532;
      this.singleExpression(0);
    }

    this.state = 535;
    this.match(ABSLParser.OpenBrace);
    this.state = 539;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ABSLParser.OpenBracket) | (1 << ABSLParser.SemiColon) | (1 << ABSLParser.Multiply) | (1 << ABSLParser.Hashtag))) !== 0) || ((((_la - 59)) & ~0x1f) == 0 && ((1 << (_la - 59)) & ((1 << (ABSLParser.NullLiteral - 59)) | (1 << (ABSLParser.BooleanLiteral - 59)) | (1 << (ABSLParser.DecimalLiteral - 59)) | (1 << (ABSLParser.HexIntegerLiteral - 59)) | (1 << (ABSLParser.OctalIntegerLiteral - 59)) | (1 << (ABSLParser.OctalIntegerLiteral2 - 59)) | (1 << (ABSLParser.BinaryIntegerLiteral - 59)) | (1 << (ABSLParser.Break - 59)) | (1 << (ABSLParser.Do - 59)) | (1 << (ABSLParser.Instanceof - 59)) | (1 << (ABSLParser.Typeof - 59)) | (1 << (ABSLParser.Case - 59)) | (1 << (ABSLParser.Else - 59)) | (1 << (ABSLParser.New - 59)) | (1 << (ABSLParser.Var - 59)) | (1 << (ABSLParser.Catch - 59)) | (1 << (ABSLParser.Finally - 59)) | (1 << (ABSLParser.Return - 59)) | (1 << (ABSLParser.Void - 59)) | (1 << (ABSLParser.Continue - 59)) | (1 << (ABSLParser.For - 59)) | (1 << (ABSLParser.Switch - 59)) | (1 << (ABSLParser.While - 59)) | (1 << (ABSLParser.Debugger - 59)) | (1 << (ABSLParser.Function - 59)))) !== 0) || ((((_la - 91)) & ~0x1f) == 0 && ((1 << (_la - 91)) & ((1 << (ABSLParser.This - 91)) | (1 << (ABSLParser.With - 91)) | (1 << (ABSLParser.Default - 91)) | (1 << (ABSLParser.If - 91)) | (1 << (ABSLParser.Throw - 91)) | (1 << (ABSLParser.Delete - 91)) | (1 << (ABSLParser.In - 91)) | (1 << (ABSLParser.Try - 91)) | (1 << (ABSLParser.As - 91)) | (1 << (ABSLParser.From - 91)) | (1 << (ABSLParser.Class - 91)) | (1 << (ABSLParser.Enum - 91)) | (1 << (ABSLParser.Extends - 91)) | (1 << (ABSLParser.Super - 91)) | (1 << (ABSLParser.Const - 91)) | (1 << (ABSLParser.Export - 91)) | (1 << (ABSLParser.Import - 91)) | (1 << (ABSLParser.Async - 91)) | (1 << (ABSLParser.Await - 91)) | (1 << (ABSLParser.Implements - 91)) | (1 << (ABSLParser.Let - 91)) | (1 << (ABSLParser.Private - 91)) | (1 << (ABSLParser.Public - 91)) | (1 << (ABSLParser.Interface - 91)) | (1 << (ABSLParser.Package - 91)) | (1 << (ABSLParser.Protected - 91)) | (1 << (ABSLParser.Static - 91)) | (1 << (ABSLParser.Yield - 91)) | (1 << (ABSLParser.Identifier - 91)) | (1 << (ABSLParser.StringLiteral - 91)))) !== 0)) {
      this.state = 536;
      this.classElement();
      this.state = 541;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    }
    this.state = 542;
    this.match(ABSLParser.CloseBrace);
  } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
  } finally {
    this.exitRule();
  }
  return localctx;
};


function ClassElementContext(parser, parent, invokingState) {
  if(parent === undefined) {
	    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = ABSLParser.RULE_classElement;
  return this;
}

ClassElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassElementContext.prototype.constructor = ClassElementContext;

ClassElementContext.prototype.methodDefinition = function() {
  return this.getTypedRuleContext(MethodDefinitionContext, 0);
};

ClassElementContext.prototype.Static = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTokens(ABSLParser.Static);
  } else {
    return this.getToken(ABSLParser.Static, i);
  }
};


ClassElementContext.prototype.Identifier = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTokens(ABSLParser.Identifier);
  } else {
    return this.getToken(ABSLParser.Identifier, i);
  }
};


ClassElementContext.prototype.Async = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTokens(ABSLParser.Async);
  } else {
    return this.getToken(ABSLParser.Async, i);
  }
};


ClassElementContext.prototype.emptyStatement = function() {
  return this.getTypedRuleContext(EmptyStatementContext, 0);
};

ClassElementContext.prototype.propertyName = function() {
  return this.getTypedRuleContext(PropertyNameContext, 0);
};

ClassElementContext.prototype.Assign = function() {
  return this.getToken(ABSLParser.Assign, 0);
};

ClassElementContext.prototype.singleExpression = function() {
  return this.getTypedRuleContext(SingleExpressionContext, 0);
};

ClassElementContext.prototype.Hashtag = function() {
  return this.getToken(ABSLParser.Hashtag, 0);
};

ClassElementContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterClassElement(this);
  }
};

ClassElementContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitClassElement(this);
  }
};

ClassElementContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitClassElement(this);
  } else {
    return visitor.visitChildren(this);
  }
};




ABSLParser.ClassElementContext = ClassElementContext;

ABSLParser.prototype.classElement = function() {

  var localctx = new ClassElementContext(this, this._ctx, this.state);
  this.enterRule(localctx, 86, ABSLParser.RULE_classElement);
  var _la = 0; // Token type
  try {
    this.state = 559;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 61, this._ctx);
    switch(la_) {
    case 1:
      this.enterOuterAlt(localctx, 1);
      this.state = 547;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 59, this._ctx);
      while(_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        if(_alt === 1) {
          this.state = 544;
          _la = this._input.LA(1);
          if(!(((((_la - 109)) & ~0x1f) == 0 && ((1 << (_la - 109)) & ((1 << (ABSLParser.Async - 109)) | (1 << (ABSLParser.Static - 109)) | (1 << (ABSLParser.Identifier - 109)))) !== 0))) {
            this._errHandler.recoverInline(this);
          } else {
                    	this._errHandler.reportMatch(this);
            this.consume();
          }
        }
        this.state = 549;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 59, this._ctx);
      }

      this.state = 550;
      this.methodDefinition();
      break;

    case 2:
      this.enterOuterAlt(localctx, 2);
      this.state = 551;
      this.emptyStatement();
      break;

    case 3:
      this.enterOuterAlt(localctx, 3);
      this.state = 553;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if(_la === ABSLParser.Hashtag) {
        this.state = 552;
        this.match(ABSLParser.Hashtag);
      }

      this.state = 555;
      this.propertyName();
      this.state = 556;
      this.match(ABSLParser.Assign);
      this.state = 557;
      this.singleExpression(0);
      break;

    }
  } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
  } finally {
    this.exitRule();
  }
  return localctx;
};


function MethodDefinitionContext(parser, parent, invokingState) {
  if(parent === undefined) {
	    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = ABSLParser.RULE_methodDefinition;
  return this;
}

MethodDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MethodDefinitionContext.prototype.constructor = MethodDefinitionContext;

MethodDefinitionContext.prototype.propertyName = function() {
  return this.getTypedRuleContext(PropertyNameContext, 0);
};

MethodDefinitionContext.prototype.OpenParen = function() {
  return this.getToken(ABSLParser.OpenParen, 0);
};

MethodDefinitionContext.prototype.CloseParen = function() {
  return this.getToken(ABSLParser.CloseParen, 0);
};

MethodDefinitionContext.prototype.OpenBrace = function() {
  return this.getToken(ABSLParser.OpenBrace, 0);
};

MethodDefinitionContext.prototype.functionBody = function() {
  return this.getTypedRuleContext(FunctionBodyContext, 0);
};

MethodDefinitionContext.prototype.CloseBrace = function() {
  return this.getToken(ABSLParser.CloseBrace, 0);
};

MethodDefinitionContext.prototype.Multiply = function() {
  return this.getToken(ABSLParser.Multiply, 0);
};

MethodDefinitionContext.prototype.Hashtag = function() {
  return this.getToken(ABSLParser.Hashtag, 0);
};

MethodDefinitionContext.prototype.formalParameterList = function() {
  return this.getTypedRuleContext(FormalParameterListContext, 0);
};

MethodDefinitionContext.prototype.getter = function() {
  return this.getTypedRuleContext(GetterContext, 0);
};

MethodDefinitionContext.prototype.setter = function() {
  return this.getTypedRuleContext(SetterContext, 0);
};

MethodDefinitionContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterMethodDefinition(this);
  }
};

MethodDefinitionContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitMethodDefinition(this);
  }
};

MethodDefinitionContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitMethodDefinition(this);
  } else {
    return visitor.visitChildren(this);
  }
};




ABSLParser.MethodDefinitionContext = MethodDefinitionContext;

ABSLParser.prototype.methodDefinition = function() {

  var localctx = new MethodDefinitionContext(this, this._ctx, this.state);
  this.enterRule(localctx, 88, ABSLParser.RULE_methodDefinition);
  var _la = 0; // Token type
  try {
    this.state = 606;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 70, this._ctx);
    switch(la_) {
    case 1:
      this.enterOuterAlt(localctx, 1);
      this.state = 562;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if(_la === ABSLParser.Multiply) {
        this.state = 561;
        this.match(ABSLParser.Multiply);
      }

      this.state = 565;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if(_la === ABSLParser.Hashtag) {
        this.state = 564;
        this.match(ABSLParser.Hashtag);
      }

      this.state = 567;
      this.propertyName();
      this.state = 568;
      this.match(ABSLParser.OpenParen);
      this.state = 570;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ABSLParser.OpenBracket) | (1 << ABSLParser.OpenBrace) | (1 << ABSLParser.Ellipsis))) !== 0) || _la === ABSLParser.Identifier) {
        this.state = 569;
        this.formalParameterList();
      }

      this.state = 572;
      this.match(ABSLParser.CloseParen);
      this.state = 573;
      this.match(ABSLParser.OpenBrace);
      this.state = 574;
      this.functionBody();
      this.state = 575;
      this.match(ABSLParser.CloseBrace);
      break;

    case 2:
      this.enterOuterAlt(localctx, 2);
      this.state = 578;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if(_la === ABSLParser.Multiply) {
        this.state = 577;
        this.match(ABSLParser.Multiply);
      }

      this.state = 581;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if(_la === ABSLParser.Hashtag) {
        this.state = 580;
        this.match(ABSLParser.Hashtag);
      }

      this.state = 583;
      this.getter();
      this.state = 584;
      this.match(ABSLParser.OpenParen);
      this.state = 585;
      this.match(ABSLParser.CloseParen);
      this.state = 586;
      this.match(ABSLParser.OpenBrace);
      this.state = 587;
      this.functionBody();
      this.state = 588;
      this.match(ABSLParser.CloseBrace);
      break;

    case 3:
      this.enterOuterAlt(localctx, 3);
      this.state = 591;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if(_la === ABSLParser.Multiply) {
        this.state = 590;
        this.match(ABSLParser.Multiply);
      }

      this.state = 594;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if(_la === ABSLParser.Hashtag) {
        this.state = 593;
        this.match(ABSLParser.Hashtag);
      }

      this.state = 596;
      this.setter();
      this.state = 597;
      this.match(ABSLParser.OpenParen);
      this.state = 599;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ABSLParser.OpenBracket) | (1 << ABSLParser.OpenBrace) | (1 << ABSLParser.Ellipsis))) !== 0) || _la === ABSLParser.Identifier) {
        this.state = 598;
        this.formalParameterList();
      }

      this.state = 601;
      this.match(ABSLParser.CloseParen);
      this.state = 602;
      this.match(ABSLParser.OpenBrace);
      this.state = 603;
      this.functionBody();
      this.state = 604;
      this.match(ABSLParser.CloseBrace);
      break;

    }
  } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
  } finally {
    this.exitRule();
  }
  return localctx;
};


function FormalParameterListContext(parser, parent, invokingState) {
  if(parent === undefined) {
	    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = ABSLParser.RULE_formalParameterList;
  return this;
}

FormalParameterListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FormalParameterListContext.prototype.constructor = FormalParameterListContext;

FormalParameterListContext.prototype.formalParameterArg = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(FormalParameterArgContext);
  } else {
    return this.getTypedRuleContext(FormalParameterArgContext, i);
  }
};

FormalParameterListContext.prototype.Comma = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTokens(ABSLParser.Comma);
  } else {
    return this.getToken(ABSLParser.Comma, i);
  }
};


FormalParameterListContext.prototype.lastFormalParameterArg = function() {
  return this.getTypedRuleContext(LastFormalParameterArgContext, 0);
};

FormalParameterListContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterFormalParameterList(this);
  }
};

FormalParameterListContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitFormalParameterList(this);
  }
};

FormalParameterListContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitFormalParameterList(this);
  } else {
    return visitor.visitChildren(this);
  }
};




ABSLParser.FormalParameterListContext = FormalParameterListContext;

ABSLParser.prototype.formalParameterList = function() {

  var localctx = new FormalParameterListContext(this, this._ctx, this.state);
  this.enterRule(localctx, 90, ABSLParser.RULE_formalParameterList);
  var _la = 0; // Token type
  try {
    this.state = 621;
    this._errHandler.sync(this);
    switch(this._input.LA(1)) {
    case ABSLParser.OpenBracket:
    case ABSLParser.OpenBrace:
    case ABSLParser.Identifier:
      this.enterOuterAlt(localctx, 1);
      this.state = 608;
      this.formalParameterArg();
      this.state = 613;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 71, this._ctx);
      while(_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        if(_alt === 1) {
          this.state = 609;
          this.match(ABSLParser.Comma);
          this.state = 610;
          this.formalParameterArg();
        }
        this.state = 615;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 71, this._ctx);
      }

      this.state = 618;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if(_la === ABSLParser.Comma) {
        this.state = 616;
        this.match(ABSLParser.Comma);
        this.state = 617;
        this.lastFormalParameterArg();
      }

      break;
    case ABSLParser.Ellipsis:
      this.enterOuterAlt(localctx, 2);
      this.state = 620;
      this.lastFormalParameterArg();
      break;
    default:
      throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
  } finally {
    this.exitRule();
  }
  return localctx;
};


function FormalParameterArgContext(parser, parent, invokingState) {
  if(parent === undefined) {
	    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = ABSLParser.RULE_formalParameterArg;
  return this;
}

FormalParameterArgContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FormalParameterArgContext.prototype.constructor = FormalParameterArgContext;

FormalParameterArgContext.prototype.assignable = function() {
  return this.getTypedRuleContext(AssignableContext, 0);
};

FormalParameterArgContext.prototype.Assign = function() {
  return this.getToken(ABSLParser.Assign, 0);
};

FormalParameterArgContext.prototype.singleExpression = function() {
  return this.getTypedRuleContext(SingleExpressionContext, 0);
};

FormalParameterArgContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterFormalParameterArg(this);
  }
};

FormalParameterArgContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitFormalParameterArg(this);
  }
};

FormalParameterArgContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitFormalParameterArg(this);
  } else {
    return visitor.visitChildren(this);
  }
};




ABSLParser.FormalParameterArgContext = FormalParameterArgContext;

ABSLParser.prototype.formalParameterArg = function() {

  var localctx = new FormalParameterArgContext(this, this._ctx, this.state);
  this.enterRule(localctx, 92, ABSLParser.RULE_formalParameterArg);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 623;
    this.assignable();
    this.state = 626;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if(_la === ABSLParser.Assign) {
      this.state = 624;
      this.match(ABSLParser.Assign);
      this.state = 625;
      this.singleExpression(0);
    }

  } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
  } finally {
    this.exitRule();
  }
  return localctx;
};


function LastFormalParameterArgContext(parser, parent, invokingState) {
  if(parent === undefined) {
	    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = ABSLParser.RULE_lastFormalParameterArg;
  return this;
}

LastFormalParameterArgContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LastFormalParameterArgContext.prototype.constructor = LastFormalParameterArgContext;

LastFormalParameterArgContext.prototype.Ellipsis = function() {
  return this.getToken(ABSLParser.Ellipsis, 0);
};

LastFormalParameterArgContext.prototype.singleExpression = function() {
  return this.getTypedRuleContext(SingleExpressionContext, 0);
};

LastFormalParameterArgContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterLastFormalParameterArg(this);
  }
};

LastFormalParameterArgContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitLastFormalParameterArg(this);
  }
};

LastFormalParameterArgContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitLastFormalParameterArg(this);
  } else {
    return visitor.visitChildren(this);
  }
};




ABSLParser.LastFormalParameterArgContext = LastFormalParameterArgContext;

ABSLParser.prototype.lastFormalParameterArg = function() {

  var localctx = new LastFormalParameterArgContext(this, this._ctx, this.state);
  this.enterRule(localctx, 94, ABSLParser.RULE_lastFormalParameterArg);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 628;
    this.match(ABSLParser.Ellipsis);
    this.state = 629;
    this.singleExpression(0);
  } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
  } finally {
    this.exitRule();
  }
  return localctx;
};


function FunctionBodyContext(parser, parent, invokingState) {
  if(parent === undefined) {
	    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = ABSLParser.RULE_functionBody;
  return this;
}

FunctionBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionBodyContext.prototype.constructor = FunctionBodyContext;

FunctionBodyContext.prototype.sourceElements = function() {
  return this.getTypedRuleContext(SourceElementsContext, 0);
};

FunctionBodyContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterFunctionBody(this);
  }
};

FunctionBodyContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitFunctionBody(this);
  }
};

FunctionBodyContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitFunctionBody(this);
  } else {
    return visitor.visitChildren(this);
  }
};




ABSLParser.FunctionBodyContext = FunctionBodyContext;

ABSLParser.prototype.functionBody = function() {

  var localctx = new FunctionBodyContext(this, this._ctx, this.state);
  this.enterRule(localctx, 96, ABSLParser.RULE_functionBody);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 632;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ABSLParser.RegularExpressionLiteral) | (1 << ABSLParser.OpenBracket) | (1 << ABSLParser.OpenParen) | (1 << ABSLParser.OpenBrace) | (1 << ABSLParser.SemiColon) | (1 << ABSLParser.PlusPlus) | (1 << ABSLParser.MinusMinus) | (1 << ABSLParser.Plus) | (1 << ABSLParser.Minus) | (1 << ABSLParser.BitNot) | (1 << ABSLParser.Not))) !== 0) || ((((_la - 59)) & ~0x1f) == 0 && ((1 << (_la - 59)) & ((1 << (ABSLParser.NullLiteral - 59)) | (1 << (ABSLParser.BooleanLiteral - 59)) | (1 << (ABSLParser.DecimalLiteral - 59)) | (1 << (ABSLParser.HexIntegerLiteral - 59)) | (1 << (ABSLParser.OctalIntegerLiteral - 59)) | (1 << (ABSLParser.OctalIntegerLiteral2 - 59)) | (1 << (ABSLParser.BinaryIntegerLiteral - 59)) | (1 << (ABSLParser.BigHexIntegerLiteral - 59)) | (1 << (ABSLParser.BigOctalIntegerLiteral - 59)) | (1 << (ABSLParser.BigBinaryIntegerLiteral - 59)) | (1 << (ABSLParser.BigDecimalIntegerLiteral - 59)) | (1 << (ABSLParser.Break - 59)) | (1 << (ABSLParser.Do - 59)) | (1 << (ABSLParser.Typeof - 59)) | (1 << (ABSLParser.New - 59)) | (1 << (ABSLParser.Var - 59)) | (1 << (ABSLParser.Return - 59)) | (1 << (ABSLParser.Void - 59)) | (1 << (ABSLParser.Continue - 59)) | (1 << (ABSLParser.For - 59)) | (1 << (ABSLParser.Foreach - 59)) | (1 << (ABSLParser.Switch - 59)) | (1 << (ABSLParser.While - 59)) | (1 << (ABSLParser.Debugger - 59)) | (1 << (ABSLParser.Function - 59)))) !== 0) || ((((_la - 91)) & ~0x1f) == 0 && ((1 << (_la - 91)) & ((1 << (ABSLParser.This - 91)) | (1 << (ABSLParser.With - 91)) | (1 << (ABSLParser.If - 91)) | (1 << (ABSLParser.Throw - 91)) | (1 << (ABSLParser.Raise - 91)) | (1 << (ABSLParser.Delete - 91)) | (1 << (ABSLParser.Try - 91)) | (1 << (ABSLParser.Class - 91)) | (1 << (ABSLParser.Super - 91)) | (1 << (ABSLParser.Const - 91)) | (1 << (ABSLParser.Export - 91)) | (1 << (ABSLParser.Import - 91)) | (1 << (ABSLParser.Async - 91)) | (1 << (ABSLParser.Await - 91)) | (1 << (ABSLParser.Let - 91)) | (1 << (ABSLParser.Yield - 91)) | (1 << (ABSLParser.Identifier - 91)) | (1 << (ABSLParser.StringLiteral - 91)) | (1 << (ABSLParser.TemplateStringLiteral - 91)))) !== 0)) {
      this.state = 631;
      this.sourceElements();
    }

  } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
  } finally {
    this.exitRule();
  }
  return localctx;
};


function SourceElementsContext(parser, parent, invokingState) {
  if(parent === undefined) {
	    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = ABSLParser.RULE_sourceElements;
  return this;
}

SourceElementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SourceElementsContext.prototype.constructor = SourceElementsContext;

SourceElementsContext.prototype.sourceElement = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(SourceElementContext);
  } else {
    return this.getTypedRuleContext(SourceElementContext, i);
  }
};

SourceElementsContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterSourceElements(this);
  }
};

SourceElementsContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitSourceElements(this);
  }
};

SourceElementsContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitSourceElements(this);
  } else {
    return visitor.visitChildren(this);
  }
};




ABSLParser.SourceElementsContext = SourceElementsContext;

ABSLParser.prototype.sourceElements = function() {

  var localctx = new SourceElementsContext(this, this._ctx, this.state);
  this.enterRule(localctx, 98, ABSLParser.RULE_sourceElements);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 635;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    do {
      this.state = 634;
      this.sourceElement();
      this.state = 637;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ABSLParser.RegularExpressionLiteral) | (1 << ABSLParser.OpenBracket) | (1 << ABSLParser.OpenParen) | (1 << ABSLParser.OpenBrace) | (1 << ABSLParser.SemiColon) | (1 << ABSLParser.PlusPlus) | (1 << ABSLParser.MinusMinus) | (1 << ABSLParser.Plus) | (1 << ABSLParser.Minus) | (1 << ABSLParser.BitNot) | (1 << ABSLParser.Not))) !== 0) || ((((_la - 59)) & ~0x1f) == 0 && ((1 << (_la - 59)) & ((1 << (ABSLParser.NullLiteral - 59)) | (1 << (ABSLParser.BooleanLiteral - 59)) | (1 << (ABSLParser.DecimalLiteral - 59)) | (1 << (ABSLParser.HexIntegerLiteral - 59)) | (1 << (ABSLParser.OctalIntegerLiteral - 59)) | (1 << (ABSLParser.OctalIntegerLiteral2 - 59)) | (1 << (ABSLParser.BinaryIntegerLiteral - 59)) | (1 << (ABSLParser.BigHexIntegerLiteral - 59)) | (1 << (ABSLParser.BigOctalIntegerLiteral - 59)) | (1 << (ABSLParser.BigBinaryIntegerLiteral - 59)) | (1 << (ABSLParser.BigDecimalIntegerLiteral - 59)) | (1 << (ABSLParser.Break - 59)) | (1 << (ABSLParser.Do - 59)) | (1 << (ABSLParser.Typeof - 59)) | (1 << (ABSLParser.New - 59)) | (1 << (ABSLParser.Var - 59)) | (1 << (ABSLParser.Return - 59)) | (1 << (ABSLParser.Void - 59)) | (1 << (ABSLParser.Continue - 59)) | (1 << (ABSLParser.For - 59)) | (1 << (ABSLParser.Foreach - 59)) | (1 << (ABSLParser.Switch - 59)) | (1 << (ABSLParser.While - 59)) | (1 << (ABSLParser.Debugger - 59)) | (1 << (ABSLParser.Function - 59)))) !== 0) || ((((_la - 91)) & ~0x1f) == 0 && ((1 << (_la - 91)) & ((1 << (ABSLParser.This - 91)) | (1 << (ABSLParser.With - 91)) | (1 << (ABSLParser.If - 91)) | (1 << (ABSLParser.Throw - 91)) | (1 << (ABSLParser.Raise - 91)) | (1 << (ABSLParser.Delete - 91)) | (1 << (ABSLParser.Try - 91)) | (1 << (ABSLParser.Class - 91)) | (1 << (ABSLParser.Super - 91)) | (1 << (ABSLParser.Const - 91)) | (1 << (ABSLParser.Export - 91)) | (1 << (ABSLParser.Import - 91)) | (1 << (ABSLParser.Async - 91)) | (1 << (ABSLParser.Await - 91)) | (1 << (ABSLParser.Let - 91)) | (1 << (ABSLParser.Yield - 91)) | (1 << (ABSLParser.Identifier - 91)) | (1 << (ABSLParser.StringLiteral - 91)) | (1 << (ABSLParser.TemplateStringLiteral - 91)))) !== 0));
  } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
  } finally {
    this.exitRule();
  }
  return localctx;
};


function ArrayLiteralContext(parser, parent, invokingState) {
  if(parent === undefined) {
	    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = ABSLParser.RULE_arrayLiteral;
  return this;
}

ArrayLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayLiteralContext.prototype.constructor = ArrayLiteralContext;

ArrayLiteralContext.prototype.OpenBracket = function() {
  return this.getToken(ABSLParser.OpenBracket, 0);
};

ArrayLiteralContext.prototype.elementList = function() {
  return this.getTypedRuleContext(ElementListContext, 0);
};

ArrayLiteralContext.prototype.CloseBracket = function() {
  return this.getToken(ABSLParser.CloseBracket, 0);
};

ArrayLiteralContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterArrayLiteral(this);
  }
};

ArrayLiteralContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitArrayLiteral(this);
  }
};

ArrayLiteralContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitArrayLiteral(this);
  } else {
    return visitor.visitChildren(this);
  }
};




ABSLParser.ArrayLiteralContext = ArrayLiteralContext;

ABSLParser.prototype.arrayLiteral = function() {

  var localctx = new ArrayLiteralContext(this, this._ctx, this.state);
  this.enterRule(localctx, 100, ABSLParser.RULE_arrayLiteral);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 639;
    this.match(ABSLParser.OpenBracket);
    this.state = 640;
    this.elementList();
    this.state = 641;
    this.match(ABSLParser.CloseBracket);
  } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
  } finally {
    this.exitRule();
  }
  return localctx;
};


function ElementListContext(parser, parent, invokingState) {
  if(parent === undefined) {
	    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = ABSLParser.RULE_elementList;
  return this;
}

ElementListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementListContext.prototype.constructor = ElementListContext;

ElementListContext.prototype.Comma = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTokens(ABSLParser.Comma);
  } else {
    return this.getToken(ABSLParser.Comma, i);
  }
};


ElementListContext.prototype.arrayElement = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(ArrayElementContext);
  } else {
    return this.getTypedRuleContext(ArrayElementContext, i);
  }
};

ElementListContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterElementList(this);
  }
};

ElementListContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitElementList(this);
  }
};

ElementListContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitElementList(this);
  } else {
    return visitor.visitChildren(this);
  }
};




ABSLParser.ElementListContext = ElementListContext;

ABSLParser.prototype.elementList = function() {

  var localctx = new ElementListContext(this, this._ctx, this.state);
  this.enterRule(localctx, 102, ABSLParser.RULE_elementList);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 646;
    this._errHandler.sync(this);
    var _alt = this._interp.adaptivePredict(this._input, 77, this._ctx);
    while(_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
      if(_alt === 1) {
        this.state = 643;
        this.match(ABSLParser.Comma);
      }
      this.state = 648;
      this._errHandler.sync(this);
      _alt = this._interp.adaptivePredict(this._input, 77, this._ctx);
    }

    this.state = 650;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ABSLParser.RegularExpressionLiteral) | (1 << ABSLParser.OpenBracket) | (1 << ABSLParser.OpenParen) | (1 << ABSLParser.OpenBrace) | (1 << ABSLParser.Ellipsis) | (1 << ABSLParser.PlusPlus) | (1 << ABSLParser.MinusMinus) | (1 << ABSLParser.Plus) | (1 << ABSLParser.Minus) | (1 << ABSLParser.BitNot) | (1 << ABSLParser.Not))) !== 0) || ((((_la - 59)) & ~0x1f) == 0 && ((1 << (_la - 59)) & ((1 << (ABSLParser.NullLiteral - 59)) | (1 << (ABSLParser.BooleanLiteral - 59)) | (1 << (ABSLParser.DecimalLiteral - 59)) | (1 << (ABSLParser.HexIntegerLiteral - 59)) | (1 << (ABSLParser.OctalIntegerLiteral - 59)) | (1 << (ABSLParser.OctalIntegerLiteral2 - 59)) | (1 << (ABSLParser.BinaryIntegerLiteral - 59)) | (1 << (ABSLParser.BigHexIntegerLiteral - 59)) | (1 << (ABSLParser.BigOctalIntegerLiteral - 59)) | (1 << (ABSLParser.BigBinaryIntegerLiteral - 59)) | (1 << (ABSLParser.BigDecimalIntegerLiteral - 59)) | (1 << (ABSLParser.Typeof - 59)) | (1 << (ABSLParser.New - 59)) | (1 << (ABSLParser.Void - 59)) | (1 << (ABSLParser.Function - 59)))) !== 0) || ((((_la - 91)) & ~0x1f) == 0 && ((1 << (_la - 91)) & ((1 << (ABSLParser.This - 91)) | (1 << (ABSLParser.Delete - 91)) | (1 << (ABSLParser.Class - 91)) | (1 << (ABSLParser.Super - 91)) | (1 << (ABSLParser.Import - 91)) | (1 << (ABSLParser.Async - 91)) | (1 << (ABSLParser.Await - 91)) | (1 << (ABSLParser.Yield - 91)) | (1 << (ABSLParser.Identifier - 91)) | (1 << (ABSLParser.StringLiteral - 91)) | (1 << (ABSLParser.TemplateStringLiteral - 91)))) !== 0)) {
      this.state = 649;
      this.arrayElement();
    }

    this.state = 660;
    this._errHandler.sync(this);
    var _alt = this._interp.adaptivePredict(this._input, 80, this._ctx);
    while(_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
      if(_alt === 1) {
        this.state = 653;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
          this.state = 652;
          this.match(ABSLParser.Comma);
          this.state = 655;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        } while(_la === ABSLParser.Comma);
        this.state = 657;
        this.arrayElement();
      }
      this.state = 662;
      this._errHandler.sync(this);
      _alt = this._interp.adaptivePredict(this._input, 80, this._ctx);
    }

    this.state = 666;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    while(_la === ABSLParser.Comma) {
      this.state = 663;
      this.match(ABSLParser.Comma);
      this.state = 668;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    }
  } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
  } finally {
    this.exitRule();
  }
  return localctx;
};


function ArrayElementContext(parser, parent, invokingState) {
  if(parent === undefined) {
	    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = ABSLParser.RULE_arrayElement;
  return this;
}

ArrayElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayElementContext.prototype.constructor = ArrayElementContext;

ArrayElementContext.prototype.singleExpression = function() {
  return this.getTypedRuleContext(SingleExpressionContext, 0);
};

ArrayElementContext.prototype.Ellipsis = function() {
  return this.getToken(ABSLParser.Ellipsis, 0);
};

ArrayElementContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterArrayElement(this);
  }
};

ArrayElementContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitArrayElement(this);
  }
};

ArrayElementContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitArrayElement(this);
  } else {
    return visitor.visitChildren(this);
  }
};




ABSLParser.ArrayElementContext = ArrayElementContext;

ABSLParser.prototype.arrayElement = function() {

  var localctx = new ArrayElementContext(this, this._ctx, this.state);
  this.enterRule(localctx, 104, ABSLParser.RULE_arrayElement);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 670;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if(_la === ABSLParser.Ellipsis) {
      this.state = 669;
      this.match(ABSLParser.Ellipsis);
    }

    this.state = 672;
    this.singleExpression(0);
  } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
  } finally {
    this.exitRule();
  }
  return localctx;
};


function ObjectLiteralContext(parser, parent, invokingState) {
  if(parent === undefined) {
	    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = ABSLParser.RULE_objectLiteral;
  return this;
}

ObjectLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ObjectLiteralContext.prototype.constructor = ObjectLiteralContext;

ObjectLiteralContext.prototype.OpenBrace = function() {
  return this.getToken(ABSLParser.OpenBrace, 0);
};

ObjectLiteralContext.prototype.CloseBrace = function() {
  return this.getToken(ABSLParser.CloseBrace, 0);
};

ObjectLiteralContext.prototype.propertyAssignment = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(PropertyAssignmentContext);
  } else {
    return this.getTypedRuleContext(PropertyAssignmentContext, i);
  }
};

ObjectLiteralContext.prototype.Comma = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTokens(ABSLParser.Comma);
  } else {
    return this.getToken(ABSLParser.Comma, i);
  }
};


ObjectLiteralContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterObjectLiteral(this);
  }
};

ObjectLiteralContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitObjectLiteral(this);
  }
};

ObjectLiteralContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitObjectLiteral(this);
  } else {
    return visitor.visitChildren(this);
  }
};




ABSLParser.ObjectLiteralContext = ObjectLiteralContext;

ABSLParser.prototype.objectLiteral = function() {

  var localctx = new ObjectLiteralContext(this, this._ctx, this.state);
  this.enterRule(localctx, 106, ABSLParser.RULE_objectLiteral);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 674;
    this.match(ABSLParser.OpenBrace);
    this.state = 683;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ABSLParser.RegularExpressionLiteral) | (1 << ABSLParser.OpenBracket) | (1 << ABSLParser.OpenParen) | (1 << ABSLParser.OpenBrace) | (1 << ABSLParser.Ellipsis) | (1 << ABSLParser.PlusPlus) | (1 << ABSLParser.MinusMinus) | (1 << ABSLParser.Plus) | (1 << ABSLParser.Minus) | (1 << ABSLParser.BitNot) | (1 << ABSLParser.Not) | (1 << ABSLParser.Multiply))) !== 0) || ((((_la - 59)) & ~0x1f) == 0 && ((1 << (_la - 59)) & ((1 << (ABSLParser.NullLiteral - 59)) | (1 << (ABSLParser.BooleanLiteral - 59)) | (1 << (ABSLParser.DecimalLiteral - 59)) | (1 << (ABSLParser.HexIntegerLiteral - 59)) | (1 << (ABSLParser.OctalIntegerLiteral - 59)) | (1 << (ABSLParser.OctalIntegerLiteral2 - 59)) | (1 << (ABSLParser.BinaryIntegerLiteral - 59)) | (1 << (ABSLParser.BigHexIntegerLiteral - 59)) | (1 << (ABSLParser.BigOctalIntegerLiteral - 59)) | (1 << (ABSLParser.BigBinaryIntegerLiteral - 59)) | (1 << (ABSLParser.BigDecimalIntegerLiteral - 59)) | (1 << (ABSLParser.Break - 59)) | (1 << (ABSLParser.Do - 59)) | (1 << (ABSLParser.Instanceof - 59)) | (1 << (ABSLParser.Typeof - 59)) | (1 << (ABSLParser.Case - 59)) | (1 << (ABSLParser.Else - 59)) | (1 << (ABSLParser.New - 59)) | (1 << (ABSLParser.Var - 59)) | (1 << (ABSLParser.Catch - 59)) | (1 << (ABSLParser.Finally - 59)) | (1 << (ABSLParser.Return - 59)) | (1 << (ABSLParser.Void - 59)) | (1 << (ABSLParser.Continue - 59)) | (1 << (ABSLParser.For - 59)) | (1 << (ABSLParser.Switch - 59)) | (1 << (ABSLParser.While - 59)) | (1 << (ABSLParser.Debugger - 59)) | (1 << (ABSLParser.Function - 59)))) !== 0) || ((((_la - 91)) & ~0x1f) == 0 && ((1 << (_la - 91)) & ((1 << (ABSLParser.This - 91)) | (1 << (ABSLParser.With - 91)) | (1 << (ABSLParser.Default - 91)) | (1 << (ABSLParser.If - 91)) | (1 << (ABSLParser.Throw - 91)) | (1 << (ABSLParser.Delete - 91)) | (1 << (ABSLParser.In - 91)) | (1 << (ABSLParser.Try - 91)) | (1 << (ABSLParser.As - 91)) | (1 << (ABSLParser.From - 91)) | (1 << (ABSLParser.Class - 91)) | (1 << (ABSLParser.Enum - 91)) | (1 << (ABSLParser.Extends - 91)) | (1 << (ABSLParser.Super - 91)) | (1 << (ABSLParser.Const - 91)) | (1 << (ABSLParser.Export - 91)) | (1 << (ABSLParser.Import - 91)) | (1 << (ABSLParser.Async - 91)) | (1 << (ABSLParser.Await - 91)) | (1 << (ABSLParser.Implements - 91)) | (1 << (ABSLParser.Let - 91)) | (1 << (ABSLParser.Private - 91)) | (1 << (ABSLParser.Public - 91)) | (1 << (ABSLParser.Interface - 91)) | (1 << (ABSLParser.Package - 91)) | (1 << (ABSLParser.Protected - 91)) | (1 << (ABSLParser.Static - 91)) | (1 << (ABSLParser.Yield - 91)) | (1 << (ABSLParser.Identifier - 91)) | (1 << (ABSLParser.StringLiteral - 91)) | (1 << (ABSLParser.TemplateStringLiteral - 91)))) !== 0)) {
      this.state = 675;
      this.propertyAssignment();
      this.state = 680;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 83, this._ctx);
      while(_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        if(_alt === 1) {
          this.state = 676;
          this.match(ABSLParser.Comma);
          this.state = 677;
          this.propertyAssignment();
        }
        this.state = 682;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 83, this._ctx);
      }

    }

    this.state = 686;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if(_la === ABSLParser.Comma) {
      this.state = 685;
      this.match(ABSLParser.Comma);
    }

    this.state = 688;
    this.match(ABSLParser.CloseBrace);
  } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
  } finally {
    this.exitRule();
  }
  return localctx;
};


function PropertyAssignmentContext(parser, parent, invokingState) {
  if(parent === undefined) {
	    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = ABSLParser.RULE_propertyAssignment;
  return this;
}

PropertyAssignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyAssignmentContext.prototype.constructor = PropertyAssignmentContext;



PropertyAssignmentContext.prototype.copyFrom = function(ctx) {
  antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function PropertyExpressionAssignmentContext(parser, ctx) {
  PropertyAssignmentContext.call(this, parser);
  PropertyAssignmentContext.prototype.copyFrom.call(this, ctx);
  return this;
}

PropertyExpressionAssignmentContext.prototype = Object.create(PropertyAssignmentContext.prototype);
PropertyExpressionAssignmentContext.prototype.constructor = PropertyExpressionAssignmentContext;

ABSLParser.PropertyExpressionAssignmentContext = PropertyExpressionAssignmentContext;

PropertyExpressionAssignmentContext.prototype.propertyName = function() {
  return this.getTypedRuleContext(PropertyNameContext, 0);
};

PropertyExpressionAssignmentContext.prototype.Colon = function() {
  return this.getToken(ABSLParser.Colon, 0);
};

PropertyExpressionAssignmentContext.prototype.singleExpression = function() {
  return this.getTypedRuleContext(SingleExpressionContext, 0);
};
PropertyExpressionAssignmentContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterPropertyExpressionAssignment(this);
  }
};

PropertyExpressionAssignmentContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitPropertyExpressionAssignment(this);
  }
};

PropertyExpressionAssignmentContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitPropertyExpressionAssignment(this);
  } else {
    return visitor.visitChildren(this);
  }
};


function ComputedPropertyExpressionAssignmentContext(parser, ctx) {
  PropertyAssignmentContext.call(this, parser);
  PropertyAssignmentContext.prototype.copyFrom.call(this, ctx);
  return this;
}

ComputedPropertyExpressionAssignmentContext.prototype = Object.create(PropertyAssignmentContext.prototype);
ComputedPropertyExpressionAssignmentContext.prototype.constructor = ComputedPropertyExpressionAssignmentContext;

ABSLParser.ComputedPropertyExpressionAssignmentContext = ComputedPropertyExpressionAssignmentContext;

ComputedPropertyExpressionAssignmentContext.prototype.OpenBracket = function() {
  return this.getToken(ABSLParser.OpenBracket, 0);
};

ComputedPropertyExpressionAssignmentContext.prototype.singleExpression = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(SingleExpressionContext);
  } else {
    return this.getTypedRuleContext(SingleExpressionContext, i);
  }
};

ComputedPropertyExpressionAssignmentContext.prototype.CloseBracket = function() {
  return this.getToken(ABSLParser.CloseBracket, 0);
};

ComputedPropertyExpressionAssignmentContext.prototype.Colon = function() {
  return this.getToken(ABSLParser.Colon, 0);
};
ComputedPropertyExpressionAssignmentContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterComputedPropertyExpressionAssignment(this);
  }
};

ComputedPropertyExpressionAssignmentContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitComputedPropertyExpressionAssignment(this);
  }
};

ComputedPropertyExpressionAssignmentContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitComputedPropertyExpressionAssignment(this);
  } else {
    return visitor.visitChildren(this);
  }
};


function PropertyShorthandContext(parser, ctx) {
  PropertyAssignmentContext.call(this, parser);
  PropertyAssignmentContext.prototype.copyFrom.call(this, ctx);
  return this;
}

PropertyShorthandContext.prototype = Object.create(PropertyAssignmentContext.prototype);
PropertyShorthandContext.prototype.constructor = PropertyShorthandContext;

ABSLParser.PropertyShorthandContext = PropertyShorthandContext;

PropertyShorthandContext.prototype.singleExpression = function() {
  return this.getTypedRuleContext(SingleExpressionContext, 0);
};

PropertyShorthandContext.prototype.Ellipsis = function() {
  return this.getToken(ABSLParser.Ellipsis, 0);
};
PropertyShorthandContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterPropertyShorthand(this);
  }
};

PropertyShorthandContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitPropertyShorthand(this);
  }
};

PropertyShorthandContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitPropertyShorthand(this);
  } else {
    return visitor.visitChildren(this);
  }
};


function PropertySetterContext(parser, ctx) {
  PropertyAssignmentContext.call(this, parser);
  PropertyAssignmentContext.prototype.copyFrom.call(this, ctx);
  return this;
}

PropertySetterContext.prototype = Object.create(PropertyAssignmentContext.prototype);
PropertySetterContext.prototype.constructor = PropertySetterContext;

ABSLParser.PropertySetterContext = PropertySetterContext;

PropertySetterContext.prototype.setter = function() {
  return this.getTypedRuleContext(SetterContext, 0);
};

PropertySetterContext.prototype.OpenParen = function() {
  return this.getToken(ABSLParser.OpenParen, 0);
};

PropertySetterContext.prototype.formalParameterArg = function() {
  return this.getTypedRuleContext(FormalParameterArgContext, 0);
};

PropertySetterContext.prototype.CloseParen = function() {
  return this.getToken(ABSLParser.CloseParen, 0);
};

PropertySetterContext.prototype.OpenBrace = function() {
  return this.getToken(ABSLParser.OpenBrace, 0);
};

PropertySetterContext.prototype.functionBody = function() {
  return this.getTypedRuleContext(FunctionBodyContext, 0);
};

PropertySetterContext.prototype.CloseBrace = function() {
  return this.getToken(ABSLParser.CloseBrace, 0);
};
PropertySetterContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterPropertySetter(this);
  }
};

PropertySetterContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitPropertySetter(this);
  }
};

PropertySetterContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitPropertySetter(this);
  } else {
    return visitor.visitChildren(this);
  }
};


function PropertyGetterContext(parser, ctx) {
  PropertyAssignmentContext.call(this, parser);
  PropertyAssignmentContext.prototype.copyFrom.call(this, ctx);
  return this;
}

PropertyGetterContext.prototype = Object.create(PropertyAssignmentContext.prototype);
PropertyGetterContext.prototype.constructor = PropertyGetterContext;

ABSLParser.PropertyGetterContext = PropertyGetterContext;

PropertyGetterContext.prototype.getter = function() {
  return this.getTypedRuleContext(GetterContext, 0);
};

PropertyGetterContext.prototype.OpenParen = function() {
  return this.getToken(ABSLParser.OpenParen, 0);
};

PropertyGetterContext.prototype.CloseParen = function() {
  return this.getToken(ABSLParser.CloseParen, 0);
};

PropertyGetterContext.prototype.OpenBrace = function() {
  return this.getToken(ABSLParser.OpenBrace, 0);
};

PropertyGetterContext.prototype.functionBody = function() {
  return this.getTypedRuleContext(FunctionBodyContext, 0);
};

PropertyGetterContext.prototype.CloseBrace = function() {
  return this.getToken(ABSLParser.CloseBrace, 0);
};
PropertyGetterContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterPropertyGetter(this);
  }
};

PropertyGetterContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitPropertyGetter(this);
  }
};

PropertyGetterContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitPropertyGetter(this);
  } else {
    return visitor.visitChildren(this);
  }
};


function FunctionPropertyContext(parser, ctx) {
  PropertyAssignmentContext.call(this, parser);
  PropertyAssignmentContext.prototype.copyFrom.call(this, ctx);
  return this;
}

FunctionPropertyContext.prototype = Object.create(PropertyAssignmentContext.prototype);
FunctionPropertyContext.prototype.constructor = FunctionPropertyContext;

ABSLParser.FunctionPropertyContext = FunctionPropertyContext;

FunctionPropertyContext.prototype.propertyName = function() {
  return this.getTypedRuleContext(PropertyNameContext, 0);
};

FunctionPropertyContext.prototype.OpenParen = function() {
  return this.getToken(ABSLParser.OpenParen, 0);
};

FunctionPropertyContext.prototype.CloseParen = function() {
  return this.getToken(ABSLParser.CloseParen, 0);
};

FunctionPropertyContext.prototype.OpenBrace = function() {
  return this.getToken(ABSLParser.OpenBrace, 0);
};

FunctionPropertyContext.prototype.functionBody = function() {
  return this.getTypedRuleContext(FunctionBodyContext, 0);
};

FunctionPropertyContext.prototype.CloseBrace = function() {
  return this.getToken(ABSLParser.CloseBrace, 0);
};

FunctionPropertyContext.prototype.Async = function() {
  return this.getToken(ABSLParser.Async, 0);
};

FunctionPropertyContext.prototype.Multiply = function() {
  return this.getToken(ABSLParser.Multiply, 0);
};

FunctionPropertyContext.prototype.formalParameterList = function() {
  return this.getTypedRuleContext(FormalParameterListContext, 0);
};
FunctionPropertyContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterFunctionProperty(this);
  }
};

FunctionPropertyContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitFunctionProperty(this);
  }
};

FunctionPropertyContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitFunctionProperty(this);
  } else {
    return visitor.visitChildren(this);
  }
};



ABSLParser.PropertyAssignmentContext = PropertyAssignmentContext;

ABSLParser.prototype.propertyAssignment = function() {

  var localctx = new PropertyAssignmentContext(this, this._ctx, this.state);
  this.enterRule(localctx, 108, ABSLParser.RULE_propertyAssignment);
  var _la = 0; // Token type
  try {
    this.state = 735;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 90, this._ctx);
    switch(la_) {
    case 1:
      localctx = new PropertyExpressionAssignmentContext(this, localctx);
      this.enterOuterAlt(localctx, 1);
      this.state = 690;
      this.propertyName();
      this.state = 691;
      this.match(ABSLParser.Colon);
      this.state = 692;
      this.singleExpression(0);
      break;

    case 2:
      localctx = new ComputedPropertyExpressionAssignmentContext(this, localctx);
      this.enterOuterAlt(localctx, 2);
      this.state = 694;
      this.match(ABSLParser.OpenBracket);
      this.state = 695;
      this.singleExpression(0);
      this.state = 696;
      this.match(ABSLParser.CloseBracket);
      this.state = 697;
      this.match(ABSLParser.Colon);
      this.state = 698;
      this.singleExpression(0);
      break;

    case 3:
      localctx = new FunctionPropertyContext(this, localctx);
      this.enterOuterAlt(localctx, 3);
      this.state = 701;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 86, this._ctx);
      if(la_ === 1) {
        this.state = 700;
        this.match(ABSLParser.Async);

      }
      this.state = 704;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if(_la === ABSLParser.Multiply) {
        this.state = 703;
        this.match(ABSLParser.Multiply);
      }

      this.state = 706;
      this.propertyName();
      this.state = 707;
      this.match(ABSLParser.OpenParen);
      this.state = 709;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ABSLParser.OpenBracket) | (1 << ABSLParser.OpenBrace) | (1 << ABSLParser.Ellipsis))) !== 0) || _la === ABSLParser.Identifier) {
        this.state = 708;
        this.formalParameterList();
      }

      this.state = 711;
      this.match(ABSLParser.CloseParen);
      this.state = 712;
      this.match(ABSLParser.OpenBrace);
      this.state = 713;
      this.functionBody();
      this.state = 714;
      this.match(ABSLParser.CloseBrace);
      break;

    case 4:
      localctx = new PropertyGetterContext(this, localctx);
      this.enterOuterAlt(localctx, 4);
      this.state = 716;
      this.getter();
      this.state = 717;
      this.match(ABSLParser.OpenParen);
      this.state = 718;
      this.match(ABSLParser.CloseParen);
      this.state = 719;
      this.match(ABSLParser.OpenBrace);
      this.state = 720;
      this.functionBody();
      this.state = 721;
      this.match(ABSLParser.CloseBrace);
      break;

    case 5:
      localctx = new PropertySetterContext(this, localctx);
      this.enterOuterAlt(localctx, 5);
      this.state = 723;
      this.setter();
      this.state = 724;
      this.match(ABSLParser.OpenParen);
      this.state = 725;
      this.formalParameterArg();
      this.state = 726;
      this.match(ABSLParser.CloseParen);
      this.state = 727;
      this.match(ABSLParser.OpenBrace);
      this.state = 728;
      this.functionBody();
      this.state = 729;
      this.match(ABSLParser.CloseBrace);
      break;

    case 6:
      localctx = new PropertyShorthandContext(this, localctx);
      this.enterOuterAlt(localctx, 6);
      this.state = 732;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if(_la === ABSLParser.Ellipsis) {
        this.state = 731;
        this.match(ABSLParser.Ellipsis);
      }

      this.state = 734;
      this.singleExpression(0);
      break;

    }
  } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
  } finally {
    this.exitRule();
  }
  return localctx;
};


function PropertyNameContext(parser, parent, invokingState) {
  if(parent === undefined) {
	    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = ABSLParser.RULE_propertyName;
  return this;
}

PropertyNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyNameContext.prototype.constructor = PropertyNameContext;

PropertyNameContext.prototype.identifierName = function() {
  return this.getTypedRuleContext(IdentifierNameContext, 0);
};

PropertyNameContext.prototype.StringLiteral = function() {
  return this.getToken(ABSLParser.StringLiteral, 0);
};

PropertyNameContext.prototype.numericLiteral = function() {
  return this.getTypedRuleContext(NumericLiteralContext, 0);
};

PropertyNameContext.prototype.OpenBracket = function() {
  return this.getToken(ABSLParser.OpenBracket, 0);
};

PropertyNameContext.prototype.singleExpression = function() {
  return this.getTypedRuleContext(SingleExpressionContext, 0);
};

PropertyNameContext.prototype.CloseBracket = function() {
  return this.getToken(ABSLParser.CloseBracket, 0);
};

PropertyNameContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterPropertyName(this);
  }
};

PropertyNameContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitPropertyName(this);
  }
};

PropertyNameContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitPropertyName(this);
  } else {
    return visitor.visitChildren(this);
  }
};




ABSLParser.PropertyNameContext = PropertyNameContext;

ABSLParser.prototype.propertyName = function() {

  var localctx = new PropertyNameContext(this, this._ctx, this.state);
  this.enterRule(localctx, 110, ABSLParser.RULE_propertyName);
  try {
    this.state = 744;
    this._errHandler.sync(this);
    switch(this._input.LA(1)) {
    case ABSLParser.NullLiteral:
    case ABSLParser.BooleanLiteral:
    case ABSLParser.Break:
    case ABSLParser.Do:
    case ABSLParser.Instanceof:
    case ABSLParser.Typeof:
    case ABSLParser.Case:
    case ABSLParser.Else:
    case ABSLParser.New:
    case ABSLParser.Var:
    case ABSLParser.Catch:
    case ABSLParser.Finally:
    case ABSLParser.Return:
    case ABSLParser.Void:
    case ABSLParser.Continue:
    case ABSLParser.For:
    case ABSLParser.Switch:
    case ABSLParser.While:
    case ABSLParser.Debugger:
    case ABSLParser.Function:
    case ABSLParser.This:
    case ABSLParser.With:
    case ABSLParser.Default:
    case ABSLParser.If:
    case ABSLParser.Throw:
    case ABSLParser.Delete:
    case ABSLParser.In:
    case ABSLParser.Try:
    case ABSLParser.As:
    case ABSLParser.From:
    case ABSLParser.Class:
    case ABSLParser.Enum:
    case ABSLParser.Extends:
    case ABSLParser.Super:
    case ABSLParser.Const:
    case ABSLParser.Export:
    case ABSLParser.Import:
    case ABSLParser.Async:
    case ABSLParser.Await:
    case ABSLParser.Implements:
    case ABSLParser.Let:
    case ABSLParser.Private:
    case ABSLParser.Public:
    case ABSLParser.Interface:
    case ABSLParser.Package:
    case ABSLParser.Protected:
    case ABSLParser.Static:
    case ABSLParser.Yield:
    case ABSLParser.Identifier:
      this.enterOuterAlt(localctx, 1);
      this.state = 737;
      this.identifierName();
      break;
    case ABSLParser.StringLiteral:
      this.enterOuterAlt(localctx, 2);
      this.state = 738;
      this.match(ABSLParser.StringLiteral);
      break;
    case ABSLParser.DecimalLiteral:
    case ABSLParser.HexIntegerLiteral:
    case ABSLParser.OctalIntegerLiteral:
    case ABSLParser.OctalIntegerLiteral2:
    case ABSLParser.BinaryIntegerLiteral:
      this.enterOuterAlt(localctx, 3);
      this.state = 739;
      this.numericLiteral();
      break;
    case ABSLParser.OpenBracket:
      this.enterOuterAlt(localctx, 4);
      this.state = 740;
      this.match(ABSLParser.OpenBracket);
      this.state = 741;
      this.singleExpression(0);
      this.state = 742;
      this.match(ABSLParser.CloseBracket);
      break;
    default:
      throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
  } finally {
    this.exitRule();
  }
  return localctx;
};


function ArgumentsContext(parser, parent, invokingState) {
  if(parent === undefined) {
	    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = ABSLParser.RULE_arguments;
  return this;
}

ArgumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgumentsContext.prototype.constructor = ArgumentsContext;

ArgumentsContext.prototype.OpenParen = function() {
  return this.getToken(ABSLParser.OpenParen, 0);
};

ArgumentsContext.prototype.CloseParen = function() {
  return this.getToken(ABSLParser.CloseParen, 0);
};

ArgumentsContext.prototype.argument = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(ArgumentContext);
  } else {
    return this.getTypedRuleContext(ArgumentContext, i);
  }
};

ArgumentsContext.prototype.Comma = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTokens(ABSLParser.Comma);
  } else {
    return this.getToken(ABSLParser.Comma, i);
  }
};


ArgumentsContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterArguments(this);
  }
};

ArgumentsContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitArguments(this);
  }
};

ArgumentsContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitArguments(this);
  } else {
    return visitor.visitChildren(this);
  }
};




ABSLParser.ArgumentsContext = ArgumentsContext;

ABSLParser.prototype.arguments = function() {

  var localctx = new ArgumentsContext(this, this._ctx, this.state);
  this.enterRule(localctx, 112, ABSLParser.RULE_arguments);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 746;
    this.match(ABSLParser.OpenParen);
    this.state = 758;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ABSLParser.RegularExpressionLiteral) | (1 << ABSLParser.OpenBracket) | (1 << ABSLParser.OpenParen) | (1 << ABSLParser.OpenBrace) | (1 << ABSLParser.Ellipsis) | (1 << ABSLParser.PlusPlus) | (1 << ABSLParser.MinusMinus) | (1 << ABSLParser.Plus) | (1 << ABSLParser.Minus) | (1 << ABSLParser.BitNot) | (1 << ABSLParser.Not))) !== 0) || ((((_la - 59)) & ~0x1f) == 0 && ((1 << (_la - 59)) & ((1 << (ABSLParser.NullLiteral - 59)) | (1 << (ABSLParser.BooleanLiteral - 59)) | (1 << (ABSLParser.DecimalLiteral - 59)) | (1 << (ABSLParser.HexIntegerLiteral - 59)) | (1 << (ABSLParser.OctalIntegerLiteral - 59)) | (1 << (ABSLParser.OctalIntegerLiteral2 - 59)) | (1 << (ABSLParser.BinaryIntegerLiteral - 59)) | (1 << (ABSLParser.BigHexIntegerLiteral - 59)) | (1 << (ABSLParser.BigOctalIntegerLiteral - 59)) | (1 << (ABSLParser.BigBinaryIntegerLiteral - 59)) | (1 << (ABSLParser.BigDecimalIntegerLiteral - 59)) | (1 << (ABSLParser.Typeof - 59)) | (1 << (ABSLParser.New - 59)) | (1 << (ABSLParser.Void - 59)) | (1 << (ABSLParser.Function - 59)))) !== 0) || ((((_la - 91)) & ~0x1f) == 0 && ((1 << (_la - 91)) & ((1 << (ABSLParser.This - 91)) | (1 << (ABSLParser.Delete - 91)) | (1 << (ABSLParser.Class - 91)) | (1 << (ABSLParser.Super - 91)) | (1 << (ABSLParser.Import - 91)) | (1 << (ABSLParser.Async - 91)) | (1 << (ABSLParser.Await - 91)) | (1 << (ABSLParser.Yield - 91)) | (1 << (ABSLParser.Identifier - 91)) | (1 << (ABSLParser.StringLiteral - 91)) | (1 << (ABSLParser.TemplateStringLiteral - 91)))) !== 0)) {
      this.state = 747;
      this.argument();
      this.state = 752;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 92, this._ctx);
      while(_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        if(_alt === 1) {
          this.state = 748;
          this.match(ABSLParser.Comma);
          this.state = 749;
          this.argument();
        }
        this.state = 754;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 92, this._ctx);
      }

      this.state = 756;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if(_la === ABSLParser.Comma) {
        this.state = 755;
        this.match(ABSLParser.Comma);
      }

    }

    this.state = 760;
    this.match(ABSLParser.CloseParen);
  } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
  } finally {
    this.exitRule();
  }
  return localctx;
};


function ArgumentContext(parser, parent, invokingState) {
  if(parent === undefined) {
	    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = ABSLParser.RULE_argument;
  return this;
}

ArgumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgumentContext.prototype.constructor = ArgumentContext;

ArgumentContext.prototype.singleExpression = function() {
  return this.getTypedRuleContext(SingleExpressionContext, 0);
};

ArgumentContext.prototype.Identifier = function() {
  return this.getToken(ABSLParser.Identifier, 0);
};

ArgumentContext.prototype.Ellipsis = function() {
  return this.getToken(ABSLParser.Ellipsis, 0);
};

ArgumentContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterArgument(this);
  }
};

ArgumentContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitArgument(this);
  }
};

ArgumentContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitArgument(this);
  } else {
    return visitor.visitChildren(this);
  }
};




ABSLParser.ArgumentContext = ArgumentContext;

ABSLParser.prototype.argument = function() {

  var localctx = new ArgumentContext(this, this._ctx, this.state);
  this.enterRule(localctx, 114, ABSLParser.RULE_argument);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 763;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if(_la === ABSLParser.Ellipsis) {
      this.state = 762;
      this.match(ABSLParser.Ellipsis);
    }

    this.state = 767;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 96, this._ctx);
    switch(la_) {
    case 1:
      this.state = 765;
      this.singleExpression(0);
      break;

    case 2:
      this.state = 766;
      this.match(ABSLParser.Identifier);
      break;

    }
  } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
  } finally {
    this.exitRule();
  }
  return localctx;
};


function ExpressionSequenceContext(parser, parent, invokingState) {
  if(parent === undefined) {
	    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = ABSLParser.RULE_expressionSequence;
  return this;
}

ExpressionSequenceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionSequenceContext.prototype.constructor = ExpressionSequenceContext;

ExpressionSequenceContext.prototype.singleExpression = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(SingleExpressionContext);
  } else {
    return this.getTypedRuleContext(SingleExpressionContext, i);
  }
};

ExpressionSequenceContext.prototype.Comma = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTokens(ABSLParser.Comma);
  } else {
    return this.getToken(ABSLParser.Comma, i);
  }
};


ExpressionSequenceContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterExpressionSequence(this);
  }
};

ExpressionSequenceContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitExpressionSequence(this);
  }
};

ExpressionSequenceContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitExpressionSequence(this);
  } else {
    return visitor.visitChildren(this);
  }
};




ABSLParser.ExpressionSequenceContext = ExpressionSequenceContext;

ABSLParser.prototype.expressionSequence = function() {

  var localctx = new ExpressionSequenceContext(this, this._ctx, this.state);
  this.enterRule(localctx, 116, ABSLParser.RULE_expressionSequence);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 769;
    this.singleExpression(0);
    this.state = 774;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    while(_la === ABSLParser.Comma) {
      this.state = 770;
      this.match(ABSLParser.Comma);
      this.state = 771;
      this.singleExpression(0);
      this.state = 776;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    }
  } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
  } finally {
    this.exitRule();
  }
  return localctx;
};


function SingleExpressionContext(parser, parent, invokingState) {
  if(parent === undefined) {
	    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = ABSLParser.RULE_singleExpression;
  return this;
}

SingleExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SingleExpressionContext.prototype.constructor = SingleExpressionContext;



SingleExpressionContext.prototype.copyFrom = function(ctx) {
  antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function TemplateStringExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

TemplateStringExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
TemplateStringExpressionContext.prototype.constructor = TemplateStringExpressionContext;

ABSLParser.TemplateStringExpressionContext = TemplateStringExpressionContext;

TemplateStringExpressionContext.prototype.singleExpression = function() {
  return this.getTypedRuleContext(SingleExpressionContext, 0);
};

TemplateStringExpressionContext.prototype.TemplateStringLiteral = function() {
  return this.getToken(ABSLParser.TemplateStringLiteral, 0);
};
TemplateStringExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterTemplateStringExpression(this);
  }
};

TemplateStringExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitTemplateStringExpression(this);
  }
};

TemplateStringExpressionContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitTemplateStringExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};


function TernaryExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

TernaryExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
TernaryExpressionContext.prototype.constructor = TernaryExpressionContext;

ABSLParser.TernaryExpressionContext = TernaryExpressionContext;

TernaryExpressionContext.prototype.singleExpression = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(SingleExpressionContext);
  } else {
    return this.getTypedRuleContext(SingleExpressionContext, i);
  }
};

TernaryExpressionContext.prototype.QuestionMark = function() {
  return this.getToken(ABSLParser.QuestionMark, 0);
};

TernaryExpressionContext.prototype.Colon = function() {
  return this.getToken(ABSLParser.Colon, 0);
};
TernaryExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterTernaryExpression(this);
  }
};

TernaryExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitTernaryExpression(this);
  }
};

TernaryExpressionContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitTernaryExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};


function LogicalAndExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

LogicalAndExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
LogicalAndExpressionContext.prototype.constructor = LogicalAndExpressionContext;

ABSLParser.LogicalAndExpressionContext = LogicalAndExpressionContext;

LogicalAndExpressionContext.prototype.singleExpression = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(SingleExpressionContext);
  } else {
    return this.getTypedRuleContext(SingleExpressionContext, i);
  }
};

LogicalAndExpressionContext.prototype.And = function() {
  return this.getToken(ABSLParser.And, 0);
};
LogicalAndExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterLogicalAndExpression(this);
  }
};

LogicalAndExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitLogicalAndExpression(this);
  }
};

LogicalAndExpressionContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitLogicalAndExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};


function PowerExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

PowerExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
PowerExpressionContext.prototype.constructor = PowerExpressionContext;

ABSLParser.PowerExpressionContext = PowerExpressionContext;

PowerExpressionContext.prototype.singleExpression = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(SingleExpressionContext);
  } else {
    return this.getTypedRuleContext(SingleExpressionContext, i);
  }
};

PowerExpressionContext.prototype.Power = function() {
  return this.getToken(ABSLParser.Power, 0);
};
PowerExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterPowerExpression(this);
  }
};

PowerExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitPowerExpression(this);
  }
};

PowerExpressionContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitPowerExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};


function PreIncrementExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

PreIncrementExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
PreIncrementExpressionContext.prototype.constructor = PreIncrementExpressionContext;

ABSLParser.PreIncrementExpressionContext = PreIncrementExpressionContext;

PreIncrementExpressionContext.prototype.PlusPlus = function() {
  return this.getToken(ABSLParser.PlusPlus, 0);
};

PreIncrementExpressionContext.prototype.singleExpression = function() {
  return this.getTypedRuleContext(SingleExpressionContext, 0);
};
PreIncrementExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterPreIncrementExpression(this);
  }
};

PreIncrementExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitPreIncrementExpression(this);
  }
};

PreIncrementExpressionContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitPreIncrementExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};


function ObjectLiteralExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

ObjectLiteralExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
ObjectLiteralExpressionContext.prototype.constructor = ObjectLiteralExpressionContext;

ABSLParser.ObjectLiteralExpressionContext = ObjectLiteralExpressionContext;

ObjectLiteralExpressionContext.prototype.objectLiteral = function() {
  return this.getTypedRuleContext(ObjectLiteralContext, 0);
};
ObjectLiteralExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterObjectLiteralExpression(this);
  }
};

ObjectLiteralExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitObjectLiteralExpression(this);
  }
};

ObjectLiteralExpressionContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitObjectLiteralExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};


function MetaExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

MetaExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
MetaExpressionContext.prototype.constructor = MetaExpressionContext;

ABSLParser.MetaExpressionContext = MetaExpressionContext;

MetaExpressionContext.prototype.New = function() {
  return this.getToken(ABSLParser.New, 0);
};

MetaExpressionContext.prototype.Dot = function() {
  return this.getToken(ABSLParser.Dot, 0);
};

MetaExpressionContext.prototype.Identifier = function() {
  return this.getToken(ABSLParser.Identifier, 0);
};
MetaExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterMetaExpression(this);
  }
};

MetaExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitMetaExpression(this);
  }
};

MetaExpressionContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitMetaExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};


function InExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

InExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
InExpressionContext.prototype.constructor = InExpressionContext;

ABSLParser.InExpressionContext = InExpressionContext;

InExpressionContext.prototype.singleExpression = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(SingleExpressionContext);
  } else {
    return this.getTypedRuleContext(SingleExpressionContext, i);
  }
};

InExpressionContext.prototype.In = function() {
  return this.getToken(ABSLParser.In, 0);
};
InExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterInExpression(this);
  }
};

InExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitInExpression(this);
  }
};

InExpressionContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitInExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};


function LogicalOrExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

LogicalOrExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
LogicalOrExpressionContext.prototype.constructor = LogicalOrExpressionContext;

ABSLParser.LogicalOrExpressionContext = LogicalOrExpressionContext;

LogicalOrExpressionContext.prototype.singleExpression = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(SingleExpressionContext);
  } else {
    return this.getTypedRuleContext(SingleExpressionContext, i);
  }
};

LogicalOrExpressionContext.prototype.Or = function() {
  return this.getToken(ABSLParser.Or, 0);
};
LogicalOrExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterLogicalOrExpression(this);
  }
};

LogicalOrExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitLogicalOrExpression(this);
  }
};

LogicalOrExpressionContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitLogicalOrExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};


function NotExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

NotExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
NotExpressionContext.prototype.constructor = NotExpressionContext;

ABSLParser.NotExpressionContext = NotExpressionContext;

NotExpressionContext.prototype.Not = function() {
  return this.getToken(ABSLParser.Not, 0);
};

NotExpressionContext.prototype.singleExpression = function() {
  return this.getTypedRuleContext(SingleExpressionContext, 0);
};
NotExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterNotExpression(this);
  }
};

NotExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitNotExpression(this);
  }
};

NotExpressionContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitNotExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};


function PreDecreaseExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

PreDecreaseExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
PreDecreaseExpressionContext.prototype.constructor = PreDecreaseExpressionContext;

ABSLParser.PreDecreaseExpressionContext = PreDecreaseExpressionContext;

PreDecreaseExpressionContext.prototype.MinusMinus = function() {
  return this.getToken(ABSLParser.MinusMinus, 0);
};

PreDecreaseExpressionContext.prototype.singleExpression = function() {
  return this.getTypedRuleContext(SingleExpressionContext, 0);
};
PreDecreaseExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterPreDecreaseExpression(this);
  }
};

PreDecreaseExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitPreDecreaseExpression(this);
  }
};

PreDecreaseExpressionContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitPreDecreaseExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};


function ArgumentsExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

ArgumentsExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
ArgumentsExpressionContext.prototype.constructor = ArgumentsExpressionContext;

ABSLParser.ArgumentsExpressionContext = ArgumentsExpressionContext;

ArgumentsExpressionContext.prototype.singleExpression = function() {
  return this.getTypedRuleContext(SingleExpressionContext, 0);
};

ArgumentsExpressionContext.prototype.arguments = function() {
  return this.getTypedRuleContext(ArgumentsContext, 0);
};
ArgumentsExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterArgumentsExpression(this);
  }
};

ArgumentsExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitArgumentsExpression(this);
  }
};

ArgumentsExpressionContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitArgumentsExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};


function AwaitExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

AwaitExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
AwaitExpressionContext.prototype.constructor = AwaitExpressionContext;

ABSLParser.AwaitExpressionContext = AwaitExpressionContext;

AwaitExpressionContext.prototype.Await = function() {
  return this.getToken(ABSLParser.Await, 0);
};

AwaitExpressionContext.prototype.singleExpression = function() {
  return this.getTypedRuleContext(SingleExpressionContext, 0);
};
AwaitExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterAwaitExpression(this);
  }
};

AwaitExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitAwaitExpression(this);
  }
};

AwaitExpressionContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitAwaitExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};


function ThisExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

ThisExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
ThisExpressionContext.prototype.constructor = ThisExpressionContext;

ABSLParser.ThisExpressionContext = ThisExpressionContext;

ThisExpressionContext.prototype.This = function() {
  return this.getToken(ABSLParser.This, 0);
};
ThisExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterThisExpression(this);
  }
};

ThisExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitThisExpression(this);
  }
};

ThisExpressionContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitThisExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};


function FunctionExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

FunctionExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
FunctionExpressionContext.prototype.constructor = FunctionExpressionContext;

ABSLParser.FunctionExpressionContext = FunctionExpressionContext;

FunctionExpressionContext.prototype.anoymousFunction = function() {
  return this.getTypedRuleContext(AnoymousFunctionContext, 0);
};
FunctionExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterFunctionExpression(this);
  }
};

FunctionExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitFunctionExpression(this);
  }
};

FunctionExpressionContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitFunctionExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};


function UnaryMinusExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

UnaryMinusExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
UnaryMinusExpressionContext.prototype.constructor = UnaryMinusExpressionContext;

ABSLParser.UnaryMinusExpressionContext = UnaryMinusExpressionContext;

UnaryMinusExpressionContext.prototype.Minus = function() {
  return this.getToken(ABSLParser.Minus, 0);
};

UnaryMinusExpressionContext.prototype.singleExpression = function() {
  return this.getTypedRuleContext(SingleExpressionContext, 0);
};
UnaryMinusExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterUnaryMinusExpression(this);
  }
};

UnaryMinusExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitUnaryMinusExpression(this);
  }
};

UnaryMinusExpressionContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitUnaryMinusExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};


function AssignmentExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

AssignmentExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
AssignmentExpressionContext.prototype.constructor = AssignmentExpressionContext;

ABSLParser.AssignmentExpressionContext = AssignmentExpressionContext;

AssignmentExpressionContext.prototype.singleExpression = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(SingleExpressionContext);
  } else {
    return this.getTypedRuleContext(SingleExpressionContext, i);
  }
};

AssignmentExpressionContext.prototype.Assign = function() {
  return this.getToken(ABSLParser.Assign, 0);
};
AssignmentExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterAssignmentExpression(this);
  }
};

AssignmentExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitAssignmentExpression(this);
  }
};

AssignmentExpressionContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitAssignmentExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};


function PostDecreaseExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

PostDecreaseExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
PostDecreaseExpressionContext.prototype.constructor = PostDecreaseExpressionContext;

ABSLParser.PostDecreaseExpressionContext = PostDecreaseExpressionContext;

PostDecreaseExpressionContext.prototype.singleExpression = function() {
  return this.getTypedRuleContext(SingleExpressionContext, 0);
};

PostDecreaseExpressionContext.prototype.MinusMinus = function() {
  return this.getToken(ABSLParser.MinusMinus, 0);
};
PostDecreaseExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterPostDecreaseExpression(this);
  }
};

PostDecreaseExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitPostDecreaseExpression(this);
  }
};

PostDecreaseExpressionContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitPostDecreaseExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};


function TypeofExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

TypeofExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
TypeofExpressionContext.prototype.constructor = TypeofExpressionContext;

ABSLParser.TypeofExpressionContext = TypeofExpressionContext;

TypeofExpressionContext.prototype.Typeof = function() {
  return this.getToken(ABSLParser.Typeof, 0);
};

TypeofExpressionContext.prototype.singleExpression = function() {
  return this.getTypedRuleContext(SingleExpressionContext, 0);
};
TypeofExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterTypeofExpression(this);
  }
};

TypeofExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitTypeofExpression(this);
  }
};

TypeofExpressionContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitTypeofExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};


function InstanceofExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

InstanceofExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
InstanceofExpressionContext.prototype.constructor = InstanceofExpressionContext;

ABSLParser.InstanceofExpressionContext = InstanceofExpressionContext;

InstanceofExpressionContext.prototype.singleExpression = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(SingleExpressionContext);
  } else {
    return this.getTypedRuleContext(SingleExpressionContext, i);
  }
};

InstanceofExpressionContext.prototype.Instanceof = function() {
  return this.getToken(ABSLParser.Instanceof, 0);
};
InstanceofExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterInstanceofExpression(this);
  }
};

InstanceofExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitInstanceofExpression(this);
  }
};

InstanceofExpressionContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitInstanceofExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};


function UnaryPlusExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

UnaryPlusExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
UnaryPlusExpressionContext.prototype.constructor = UnaryPlusExpressionContext;

ABSLParser.UnaryPlusExpressionContext = UnaryPlusExpressionContext;

UnaryPlusExpressionContext.prototype.Plus = function() {
  return this.getToken(ABSLParser.Plus, 0);
};

UnaryPlusExpressionContext.prototype.singleExpression = function() {
  return this.getTypedRuleContext(SingleExpressionContext, 0);
};
UnaryPlusExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterUnaryPlusExpression(this);
  }
};

UnaryPlusExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitUnaryPlusExpression(this);
  }
};

UnaryPlusExpressionContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitUnaryPlusExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};


function DeleteExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

DeleteExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
DeleteExpressionContext.prototype.constructor = DeleteExpressionContext;

ABSLParser.DeleteExpressionContext = DeleteExpressionContext;

DeleteExpressionContext.prototype.Delete = function() {
  return this.getToken(ABSLParser.Delete, 0);
};

DeleteExpressionContext.prototype.singleExpression = function() {
  return this.getTypedRuleContext(SingleExpressionContext, 0);
};
DeleteExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterDeleteExpression(this);
  }
};

DeleteExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitDeleteExpression(this);
  }
};

DeleteExpressionContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitDeleteExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};


function ImportExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

ImportExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
ImportExpressionContext.prototype.constructor = ImportExpressionContext;

ABSLParser.ImportExpressionContext = ImportExpressionContext;

ImportExpressionContext.prototype.Import = function() {
  return this.getToken(ABSLParser.Import, 0);
};

ImportExpressionContext.prototype.OpenParen = function() {
  return this.getToken(ABSLParser.OpenParen, 0);
};

ImportExpressionContext.prototype.singleExpression = function() {
  return this.getTypedRuleContext(SingleExpressionContext, 0);
};

ImportExpressionContext.prototype.CloseParen = function() {
  return this.getToken(ABSLParser.CloseParen, 0);
};
ImportExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterImportExpression(this);
  }
};

ImportExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitImportExpression(this);
  }
};

ImportExpressionContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitImportExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};


function EqualityExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

EqualityExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
EqualityExpressionContext.prototype.constructor = EqualityExpressionContext;

ABSLParser.EqualityExpressionContext = EqualityExpressionContext;

EqualityExpressionContext.prototype.singleExpression = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(SingleExpressionContext);
  } else {
    return this.getTypedRuleContext(SingleExpressionContext, i);
  }
};

EqualityExpressionContext.prototype.Equals_ = function() {
  return this.getToken(ABSLParser.Equals_, 0);
};

EqualityExpressionContext.prototype.NotEquals = function() {
  return this.getToken(ABSLParser.NotEquals, 0);
};

EqualityExpressionContext.prototype.IdentityEquals = function() {
  return this.getToken(ABSLParser.IdentityEquals, 0);
};

EqualityExpressionContext.prototype.IdentityNotEquals = function() {
  return this.getToken(ABSLParser.IdentityNotEquals, 0);
};
EqualityExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterEqualityExpression(this);
  }
};

EqualityExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitEqualityExpression(this);
  }
};

EqualityExpressionContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitEqualityExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};


function BitXOrExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

BitXOrExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
BitXOrExpressionContext.prototype.constructor = BitXOrExpressionContext;

ABSLParser.BitXOrExpressionContext = BitXOrExpressionContext;

BitXOrExpressionContext.prototype.singleExpression = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(SingleExpressionContext);
  } else {
    return this.getTypedRuleContext(SingleExpressionContext, i);
  }
};

BitXOrExpressionContext.prototype.BitXOr = function() {
  return this.getToken(ABSLParser.BitXOr, 0);
};
BitXOrExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterBitXOrExpression(this);
  }
};

BitXOrExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitBitXOrExpression(this);
  }
};

BitXOrExpressionContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitBitXOrExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};


function SuperExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

SuperExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
SuperExpressionContext.prototype.constructor = SuperExpressionContext;

ABSLParser.SuperExpressionContext = SuperExpressionContext;

SuperExpressionContext.prototype.Super = function() {
  return this.getToken(ABSLParser.Super, 0);
};
SuperExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterSuperExpression(this);
  }
};

SuperExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitSuperExpression(this);
  }
};

SuperExpressionContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitSuperExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};


function MultiplicativeExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

MultiplicativeExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
MultiplicativeExpressionContext.prototype.constructor = MultiplicativeExpressionContext;

ABSLParser.MultiplicativeExpressionContext = MultiplicativeExpressionContext;

MultiplicativeExpressionContext.prototype.singleExpression = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(SingleExpressionContext);
  } else {
    return this.getTypedRuleContext(SingleExpressionContext, i);
  }
};

MultiplicativeExpressionContext.prototype.Multiply = function() {
  return this.getToken(ABSLParser.Multiply, 0);
};

MultiplicativeExpressionContext.prototype.Divide = function() {
  return this.getToken(ABSLParser.Divide, 0);
};

MultiplicativeExpressionContext.prototype.Modulus = function() {
  return this.getToken(ABSLParser.Modulus, 0);
};
MultiplicativeExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterMultiplicativeExpression(this);
  }
};

MultiplicativeExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitMultiplicativeExpression(this);
  }
};

MultiplicativeExpressionContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitMultiplicativeExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};


function BitShiftExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

BitShiftExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
BitShiftExpressionContext.prototype.constructor = BitShiftExpressionContext;

ABSLParser.BitShiftExpressionContext = BitShiftExpressionContext;

BitShiftExpressionContext.prototype.singleExpression = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(SingleExpressionContext);
  } else {
    return this.getTypedRuleContext(SingleExpressionContext, i);
  }
};

BitShiftExpressionContext.prototype.LeftShiftArithmetic = function() {
  return this.getToken(ABSLParser.LeftShiftArithmetic, 0);
};

BitShiftExpressionContext.prototype.RightShiftArithmetic = function() {
  return this.getToken(ABSLParser.RightShiftArithmetic, 0);
};

BitShiftExpressionContext.prototype.RightShiftLogical = function() {
  return this.getToken(ABSLParser.RightShiftLogical, 0);
};
BitShiftExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterBitShiftExpression(this);
  }
};

BitShiftExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitBitShiftExpression(this);
  }
};

BitShiftExpressionContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitBitShiftExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};


function ParenthesizedExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

ParenthesizedExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
ParenthesizedExpressionContext.prototype.constructor = ParenthesizedExpressionContext;

ABSLParser.ParenthesizedExpressionContext = ParenthesizedExpressionContext;

ParenthesizedExpressionContext.prototype.OpenParen = function() {
  return this.getToken(ABSLParser.OpenParen, 0);
};

ParenthesizedExpressionContext.prototype.expressionSequence = function() {
  return this.getTypedRuleContext(ExpressionSequenceContext, 0);
};

ParenthesizedExpressionContext.prototype.CloseParen = function() {
  return this.getToken(ABSLParser.CloseParen, 0);
};
ParenthesizedExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterParenthesizedExpression(this);
  }
};

ParenthesizedExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitParenthesizedExpression(this);
  }
};

ParenthesizedExpressionContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitParenthesizedExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};


function AdditiveExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

AdditiveExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
AdditiveExpressionContext.prototype.constructor = AdditiveExpressionContext;

ABSLParser.AdditiveExpressionContext = AdditiveExpressionContext;

AdditiveExpressionContext.prototype.singleExpression = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(SingleExpressionContext);
  } else {
    return this.getTypedRuleContext(SingleExpressionContext, i);
  }
};

AdditiveExpressionContext.prototype.Plus = function() {
  return this.getToken(ABSLParser.Plus, 0);
};

AdditiveExpressionContext.prototype.Minus = function() {
  return this.getToken(ABSLParser.Minus, 0);
};
AdditiveExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterAdditiveExpression(this);
  }
};

AdditiveExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitAdditiveExpression(this);
  }
};

AdditiveExpressionContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitAdditiveExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};


function RelationalExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

RelationalExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
RelationalExpressionContext.prototype.constructor = RelationalExpressionContext;

ABSLParser.RelationalExpressionContext = RelationalExpressionContext;

RelationalExpressionContext.prototype.singleExpression = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(SingleExpressionContext);
  } else {
    return this.getTypedRuleContext(SingleExpressionContext, i);
  }
};

RelationalExpressionContext.prototype.LessThan = function() {
  return this.getToken(ABSLParser.LessThan, 0);
};

RelationalExpressionContext.prototype.MoreThan = function() {
  return this.getToken(ABSLParser.MoreThan, 0);
};

RelationalExpressionContext.prototype.LessThanEquals = function() {
  return this.getToken(ABSLParser.LessThanEquals, 0);
};

RelationalExpressionContext.prototype.GreaterThanEquals = function() {
  return this.getToken(ABSLParser.GreaterThanEquals, 0);
};
RelationalExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterRelationalExpression(this);
  }
};

RelationalExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitRelationalExpression(this);
  }
};

RelationalExpressionContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitRelationalExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};


function PostIncrementExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

PostIncrementExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
PostIncrementExpressionContext.prototype.constructor = PostIncrementExpressionContext;

ABSLParser.PostIncrementExpressionContext = PostIncrementExpressionContext;

PostIncrementExpressionContext.prototype.singleExpression = function() {
  return this.getTypedRuleContext(SingleExpressionContext, 0);
};

PostIncrementExpressionContext.prototype.PlusPlus = function() {
  return this.getToken(ABSLParser.PlusPlus, 0);
};
PostIncrementExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterPostIncrementExpression(this);
  }
};

PostIncrementExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitPostIncrementExpression(this);
  }
};

PostIncrementExpressionContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitPostIncrementExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};


function YieldExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

YieldExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
YieldExpressionContext.prototype.constructor = YieldExpressionContext;

ABSLParser.YieldExpressionContext = YieldExpressionContext;

YieldExpressionContext.prototype.yieldStatement = function() {
  return this.getTypedRuleContext(YieldStatementContext, 0);
};
YieldExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterYieldExpression(this);
  }
};

YieldExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitYieldExpression(this);
  }
};

YieldExpressionContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitYieldExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};


function BitNotExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

BitNotExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
BitNotExpressionContext.prototype.constructor = BitNotExpressionContext;

ABSLParser.BitNotExpressionContext = BitNotExpressionContext;

BitNotExpressionContext.prototype.BitNot = function() {
  return this.getToken(ABSLParser.BitNot, 0);
};

BitNotExpressionContext.prototype.singleExpression = function() {
  return this.getTypedRuleContext(SingleExpressionContext, 0);
};
BitNotExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterBitNotExpression(this);
  }
};

BitNotExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitBitNotExpression(this);
  }
};

BitNotExpressionContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitBitNotExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};


function NewExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

NewExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
NewExpressionContext.prototype.constructor = NewExpressionContext;

ABSLParser.NewExpressionContext = NewExpressionContext;

NewExpressionContext.prototype.New = function() {
  return this.getToken(ABSLParser.New, 0);
};

NewExpressionContext.prototype.singleExpression = function() {
  return this.getTypedRuleContext(SingleExpressionContext, 0);
};

NewExpressionContext.prototype.arguments = function() {
  return this.getTypedRuleContext(ArgumentsContext, 0);
};
NewExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterNewExpression(this);
  }
};

NewExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitNewExpression(this);
  }
};

NewExpressionContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitNewExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};


function LiteralExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

LiteralExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
LiteralExpressionContext.prototype.constructor = LiteralExpressionContext;

ABSLParser.LiteralExpressionContext = LiteralExpressionContext;

LiteralExpressionContext.prototype.literal = function() {
  return this.getTypedRuleContext(LiteralContext, 0);
};
LiteralExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterLiteralExpression(this);
  }
};

LiteralExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitLiteralExpression(this);
  }
};

LiteralExpressionContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitLiteralExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};


function ArrayLiteralExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

ArrayLiteralExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
ArrayLiteralExpressionContext.prototype.constructor = ArrayLiteralExpressionContext;

ABSLParser.ArrayLiteralExpressionContext = ArrayLiteralExpressionContext;

ArrayLiteralExpressionContext.prototype.arrayLiteral = function() {
  return this.getTypedRuleContext(ArrayLiteralContext, 0);
};
ArrayLiteralExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterArrayLiteralExpression(this);
  }
};

ArrayLiteralExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitArrayLiteralExpression(this);
  }
};

ArrayLiteralExpressionContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitArrayLiteralExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};


function MemberDotExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

MemberDotExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
MemberDotExpressionContext.prototype.constructor = MemberDotExpressionContext;

ABSLParser.MemberDotExpressionContext = MemberDotExpressionContext;

MemberDotExpressionContext.prototype.singleExpression = function() {
  return this.getTypedRuleContext(SingleExpressionContext, 0);
};

MemberDotExpressionContext.prototype.Dot = function() {
  return this.getToken(ABSLParser.Dot, 0);
};

MemberDotExpressionContext.prototype.identifierName = function() {
  return this.getTypedRuleContext(IdentifierNameContext, 0);
};

MemberDotExpressionContext.prototype.QuestionMark = function() {
  return this.getToken(ABSLParser.QuestionMark, 0);
};

MemberDotExpressionContext.prototype.Hashtag = function() {
  return this.getToken(ABSLParser.Hashtag, 0);
};
MemberDotExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterMemberDotExpression(this);
  }
};

MemberDotExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitMemberDotExpression(this);
  }
};

MemberDotExpressionContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitMemberDotExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};


function ClassExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

ClassExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
ClassExpressionContext.prototype.constructor = ClassExpressionContext;

ABSLParser.ClassExpressionContext = ClassExpressionContext;

ClassExpressionContext.prototype.Class = function() {
  return this.getToken(ABSLParser.Class, 0);
};

ClassExpressionContext.prototype.classTail = function() {
  return this.getTypedRuleContext(ClassTailContext, 0);
};

ClassExpressionContext.prototype.Identifier = function() {
  return this.getToken(ABSLParser.Identifier, 0);
};
ClassExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterClassExpression(this);
  }
};

ClassExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitClassExpression(this);
  }
};

ClassExpressionContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitClassExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};


function MemberIndexExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

MemberIndexExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
MemberIndexExpressionContext.prototype.constructor = MemberIndexExpressionContext;

ABSLParser.MemberIndexExpressionContext = MemberIndexExpressionContext;

MemberIndexExpressionContext.prototype.singleExpression = function() {
  return this.getTypedRuleContext(SingleExpressionContext, 0);
};

MemberIndexExpressionContext.prototype.OpenBracket = function() {
  return this.getToken(ABSLParser.OpenBracket, 0);
};

MemberIndexExpressionContext.prototype.expressionSequence = function() {
  return this.getTypedRuleContext(ExpressionSequenceContext, 0);
};

MemberIndexExpressionContext.prototype.CloseBracket = function() {
  return this.getToken(ABSLParser.CloseBracket, 0);
};
MemberIndexExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterMemberIndexExpression(this);
  }
};

MemberIndexExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitMemberIndexExpression(this);
  }
};

MemberIndexExpressionContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitMemberIndexExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};


function IdentifierExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

IdentifierExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
IdentifierExpressionContext.prototype.constructor = IdentifierExpressionContext;

ABSLParser.IdentifierExpressionContext = IdentifierExpressionContext;

IdentifierExpressionContext.prototype.Identifier = function() {
  return this.getToken(ABSLParser.Identifier, 0);
};
IdentifierExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterIdentifierExpression(this);
  }
};

IdentifierExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitIdentifierExpression(this);
  }
};

IdentifierExpressionContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitIdentifierExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};


function BitAndExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

BitAndExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
BitAndExpressionContext.prototype.constructor = BitAndExpressionContext;

ABSLParser.BitAndExpressionContext = BitAndExpressionContext;

BitAndExpressionContext.prototype.singleExpression = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(SingleExpressionContext);
  } else {
    return this.getTypedRuleContext(SingleExpressionContext, i);
  }
};

BitAndExpressionContext.prototype.BitAnd = function() {
  return this.getToken(ABSLParser.BitAnd, 0);
};
BitAndExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterBitAndExpression(this);
  }
};

BitAndExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitBitAndExpression(this);
  }
};

BitAndExpressionContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitBitAndExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};


function BitOrExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

BitOrExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
BitOrExpressionContext.prototype.constructor = BitOrExpressionContext;

ABSLParser.BitOrExpressionContext = BitOrExpressionContext;

BitOrExpressionContext.prototype.singleExpression = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(SingleExpressionContext);
  } else {
    return this.getTypedRuleContext(SingleExpressionContext, i);
  }
};

BitOrExpressionContext.prototype.BitOr = function() {
  return this.getToken(ABSLParser.BitOr, 0);
};
BitOrExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterBitOrExpression(this);
  }
};

BitOrExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitBitOrExpression(this);
  }
};

BitOrExpressionContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitBitOrExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};


function AssignmentOperatorExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

AssignmentOperatorExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
AssignmentOperatorExpressionContext.prototype.constructor = AssignmentOperatorExpressionContext;

ABSLParser.AssignmentOperatorExpressionContext = AssignmentOperatorExpressionContext;

AssignmentOperatorExpressionContext.prototype.singleExpression = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(SingleExpressionContext);
  } else {
    return this.getTypedRuleContext(SingleExpressionContext, i);
  }
};

AssignmentOperatorExpressionContext.prototype.assignmentOperator = function() {
  return this.getTypedRuleContext(AssignmentOperatorContext, 0);
};
AssignmentOperatorExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterAssignmentOperatorExpression(this);
  }
};

AssignmentOperatorExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitAssignmentOperatorExpression(this);
  }
};

AssignmentOperatorExpressionContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitAssignmentOperatorExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};


function VoidExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

VoidExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
VoidExpressionContext.prototype.constructor = VoidExpressionContext;

ABSLParser.VoidExpressionContext = VoidExpressionContext;

VoidExpressionContext.prototype.Void = function() {
  return this.getToken(ABSLParser.Void, 0);
};

VoidExpressionContext.prototype.singleExpression = function() {
  return this.getTypedRuleContext(SingleExpressionContext, 0);
};
VoidExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterVoidExpression(this);
  }
};

VoidExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitVoidExpression(this);
  }
};

VoidExpressionContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitVoidExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};


function CoalesceExpressionContext(parser, ctx) {
  SingleExpressionContext.call(this, parser);
  SingleExpressionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

CoalesceExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
CoalesceExpressionContext.prototype.constructor = CoalesceExpressionContext;

ABSLParser.CoalesceExpressionContext = CoalesceExpressionContext;

CoalesceExpressionContext.prototype.singleExpression = function(i) {
  if(i === undefined) {
    i = null;
  }
  if(i === null) {
    return this.getTypedRuleContexts(SingleExpressionContext);
  } else {
    return this.getTypedRuleContext(SingleExpressionContext, i);
  }
};

CoalesceExpressionContext.prototype.NullCoalesce = function() {
  return this.getToken(ABSLParser.NullCoalesce, 0);
};
CoalesceExpressionContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterCoalesceExpression(this);
  }
};

CoalesceExpressionContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitCoalesceExpression(this);
  }
};

CoalesceExpressionContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitCoalesceExpression(this);
  } else {
    return visitor.visitChildren(this);
  }
};



ABSLParser.prototype.singleExpression = function(_p) {
  if(_p === undefined) {
	    _p = 0;
  }
  var _parentctx = this._ctx;
  var _parentState = this.state;
  var localctx = new SingleExpressionContext(this, this._ctx, _parentState);
  var _prevctx = localctx;
  var _startState = 118;
  this.enterRecursionRule(localctx, 118, ABSLParser.RULE_singleExpression, _p);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 828;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 100, this._ctx);
    switch(la_) {
    case 1:
      localctx = new FunctionExpressionContext(this, localctx);
      this._ctx = localctx;
      _prevctx = localctx;

      this.state = 778;
      this.anoymousFunction();
      break;

    case 2:
      localctx = new ClassExpressionContext(this, localctx);
      this._ctx = localctx;
      _prevctx = localctx;
      this.state = 779;
      this.match(ABSLParser.Class);
      this.state = 781;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if(_la === ABSLParser.Identifier) {
        this.state = 780;
        this.match(ABSLParser.Identifier);
      }

      this.state = 783;
      this.classTail();
      break;

    case 3:
      localctx = new NewExpressionContext(this, localctx);
      this._ctx = localctx;
      _prevctx = localctx;
      this.state = 784;
      this.match(ABSLParser.New);
      this.state = 785;
      this.singleExpression(0);
      this.state = 787;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 99, this._ctx);
      if(la_ === 1) {
        this.state = 786;
        this.arguments();

      }
      break;

    case 4:
      localctx = new MetaExpressionContext(this, localctx);
      this._ctx = localctx;
      _prevctx = localctx;
      this.state = 789;
      this.match(ABSLParser.New);
      this.state = 790;
      this.match(ABSLParser.Dot);
      this.state = 791;
      this.match(ABSLParser.Identifier);
      break;

    case 5:
      localctx = new DeleteExpressionContext(this, localctx);
      this._ctx = localctx;
      _prevctx = localctx;
      this.state = 792;
      this.match(ABSLParser.Delete);
      this.state = 793;
      this.singleExpression(37);
      break;

    case 6:
      localctx = new VoidExpressionContext(this, localctx);
      this._ctx = localctx;
      _prevctx = localctx;
      this.state = 794;
      this.match(ABSLParser.Void);
      this.state = 795;
      this.singleExpression(36);
      break;

    case 7:
      localctx = new TypeofExpressionContext(this, localctx);
      this._ctx = localctx;
      _prevctx = localctx;
      this.state = 796;
      this.match(ABSLParser.Typeof);
      this.state = 797;
      this.singleExpression(35);
      break;

    case 8:
      localctx = new PreIncrementExpressionContext(this, localctx);
      this._ctx = localctx;
      _prevctx = localctx;
      this.state = 798;
      this.match(ABSLParser.PlusPlus);
      this.state = 799;
      this.singleExpression(34);
      break;

    case 9:
      localctx = new PreDecreaseExpressionContext(this, localctx);
      this._ctx = localctx;
      _prevctx = localctx;
      this.state = 800;
      this.match(ABSLParser.MinusMinus);
      this.state = 801;
      this.singleExpression(33);
      break;

    case 10:
      localctx = new UnaryPlusExpressionContext(this, localctx);
      this._ctx = localctx;
      _prevctx = localctx;
      this.state = 802;
      this.match(ABSLParser.Plus);
      this.state = 803;
      this.singleExpression(32);
      break;

    case 11:
      localctx = new UnaryMinusExpressionContext(this, localctx);
      this._ctx = localctx;
      _prevctx = localctx;
      this.state = 804;
      this.match(ABSLParser.Minus);
      this.state = 805;
      this.singleExpression(31);
      break;

    case 12:
      localctx = new BitNotExpressionContext(this, localctx);
      this._ctx = localctx;
      _prevctx = localctx;
      this.state = 806;
      this.match(ABSLParser.BitNot);
      this.state = 807;
      this.singleExpression(30);
      break;

    case 13:
      localctx = new NotExpressionContext(this, localctx);
      this._ctx = localctx;
      _prevctx = localctx;
      this.state = 808;
      this.match(ABSLParser.Not);
      this.state = 809;
      this.singleExpression(29);
      break;

    case 14:
      localctx = new AwaitExpressionContext(this, localctx);
      this._ctx = localctx;
      _prevctx = localctx;
      this.state = 810;
      this.match(ABSLParser.Await);
      this.state = 811;
      this.singleExpression(28);
      break;

    case 15:
      localctx = new ImportExpressionContext(this, localctx);
      this._ctx = localctx;
      _prevctx = localctx;
      this.state = 812;
      this.match(ABSLParser.Import);
      this.state = 813;
      this.match(ABSLParser.OpenParen);
      this.state = 814;
      this.singleExpression(0);
      this.state = 815;
      this.match(ABSLParser.CloseParen);
      break;

    case 16:
      localctx = new YieldExpressionContext(this, localctx);
      this._ctx = localctx;
      _prevctx = localctx;
      this.state = 817;
      this.yieldStatement();
      break;

    case 17:
      localctx = new ThisExpressionContext(this, localctx);
      this._ctx = localctx;
      _prevctx = localctx;
      this.state = 818;
      this.match(ABSLParser.This);
      break;

    case 18:
      localctx = new IdentifierExpressionContext(this, localctx);
      this._ctx = localctx;
      _prevctx = localctx;
      this.state = 819;
      this.match(ABSLParser.Identifier);
      break;

    case 19:
      localctx = new SuperExpressionContext(this, localctx);
      this._ctx = localctx;
      _prevctx = localctx;
      this.state = 820;
      this.match(ABSLParser.Super);
      break;

    case 20:
      localctx = new LiteralExpressionContext(this, localctx);
      this._ctx = localctx;
      _prevctx = localctx;
      this.state = 821;
      this.literal();
      break;

    case 21:
      localctx = new ArrayLiteralExpressionContext(this, localctx);
      this._ctx = localctx;
      _prevctx = localctx;
      this.state = 822;
      this.arrayLiteral();
      break;

    case 22:
      localctx = new ObjectLiteralExpressionContext(this, localctx);
      this._ctx = localctx;
      _prevctx = localctx;
      this.state = 823;
      this.objectLiteral();
      break;

    case 23:
      localctx = new ParenthesizedExpressionContext(this, localctx);
      this._ctx = localctx;
      _prevctx = localctx;
      this.state = 824;
      this.match(ABSLParser.OpenParen);
      this.state = 825;
      this.expressionSequence();
      this.state = 826;
      this.match(ABSLParser.CloseParen);
      break;

    }
    this._ctx.stop = this._input.LT(-1);
    this.state = 909;
    this._errHandler.sync(this);
    var _alt = this._interp.adaptivePredict(this._input, 104, this._ctx);
    while(_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
      if(_alt === 1) {
        if(this._parseListeners !== null) {
          this.triggerExitRuleEvent();
        }
        _prevctx = localctx;
        this.state = 907;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 103, this._ctx);
        switch(la_) {
        case 1:
          localctx = new PowerExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
          this.pushNewRecursionContext(localctx, _startState, ABSLParser.RULE_singleExpression);
          this.state = 830;
          if (!( this.precpred(this._ctx, 27))) {
            throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 27)");
          }
          this.state = 831;
          this.match(ABSLParser.Power);
          this.state = 832;
          this.singleExpression(27);
          break;

        case 2:
          localctx = new MultiplicativeExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
          this.pushNewRecursionContext(localctx, _startState, ABSLParser.RULE_singleExpression);
          this.state = 833;
          if (!( this.precpred(this._ctx, 26))) {
            throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 26)");
          }
          this.state = 834;
          _la = this._input.LA(1);
          if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ABSLParser.Multiply) | (1 << ABSLParser.Divide) | (1 << ABSLParser.Modulus))) !== 0))) {
            this._errHandler.recoverInline(this);
          } else {
                    	this._errHandler.reportMatch(this);
            this.consume();
          }
          this.state = 835;
          this.singleExpression(27);
          break;

        case 3:
          localctx = new AdditiveExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
          this.pushNewRecursionContext(localctx, _startState, ABSLParser.RULE_singleExpression);
          this.state = 836;
          if (!( this.precpred(this._ctx, 25))) {
            throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 25)");
          }
          this.state = 837;
          _la = this._input.LA(1);
          if(!(_la === ABSLParser.Plus || _la === ABSLParser.Minus)) {
            this._errHandler.recoverInline(this);
          } else {
                    	this._errHandler.reportMatch(this);
            this.consume();
          }
          this.state = 838;
          this.singleExpression(26);
          break;

        case 4:
          localctx = new CoalesceExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
          this.pushNewRecursionContext(localctx, _startState, ABSLParser.RULE_singleExpression);
          this.state = 839;
          if (!( this.precpred(this._ctx, 24))) {
            throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 24)");
          }
          this.state = 840;
          this.match(ABSLParser.NullCoalesce);
          this.state = 841;
          this.singleExpression(25);
          break;

        case 5:
          localctx = new BitShiftExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
          this.pushNewRecursionContext(localctx, _startState, ABSLParser.RULE_singleExpression);
          this.state = 842;
          if (!( this.precpred(this._ctx, 23))) {
            throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 23)");
          }
          this.state = 843;
          _la = this._input.LA(1);
          if(!(((((_la - 30)) & ~0x1f) == 0 && ((1 << (_la - 30)) & ((1 << (ABSLParser.RightShiftArithmetic - 30)) | (1 << (ABSLParser.LeftShiftArithmetic - 30)) | (1 << (ABSLParser.RightShiftLogical - 30)))) !== 0))) {
            this._errHandler.recoverInline(this);
          } else {
                    	this._errHandler.reportMatch(this);
            this.consume();
          }
          this.state = 844;
          this.singleExpression(24);
          break;

        case 6:
          localctx = new RelationalExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
          this.pushNewRecursionContext(localctx, _startState, ABSLParser.RULE_singleExpression);
          this.state = 845;
          if (!( this.precpred(this._ctx, 22))) {
            throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 22)");
          }
          this.state = 846;
          _la = this._input.LA(1);
          if(!(((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (ABSLParser.LessThan - 33)) | (1 << (ABSLParser.MoreThan - 33)) | (1 << (ABSLParser.LessThanEquals - 33)) | (1 << (ABSLParser.GreaterThanEquals - 33)))) !== 0))) {
            this._errHandler.recoverInline(this);
          } else {
                    	this._errHandler.reportMatch(this);
            this.consume();
          }
          this.state = 847;
          this.singleExpression(23);
          break;

        case 7:
          localctx = new InstanceofExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
          this.pushNewRecursionContext(localctx, _startState, ABSLParser.RULE_singleExpression);
          this.state = 848;
          if (!( this.precpred(this._ctx, 21))) {
            throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 21)");
          }
          this.state = 849;
          this.match(ABSLParser.Instanceof);
          this.state = 850;
          this.singleExpression(22);
          break;

        case 8:
          localctx = new InExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
          this.pushNewRecursionContext(localctx, _startState, ABSLParser.RULE_singleExpression);
          this.state = 851;
          if (!( this.precpred(this._ctx, 20))) {
            throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 20)");
          }
          this.state = 852;
          this.match(ABSLParser.In);
          this.state = 853;
          this.singleExpression(21);
          break;

        case 9:
          localctx = new EqualityExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
          this.pushNewRecursionContext(localctx, _startState, ABSLParser.RULE_singleExpression);
          this.state = 854;
          if (!( this.precpred(this._ctx, 19))) {
            throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 19)");
          }
          this.state = 855;
          _la = this._input.LA(1);
          if(!(((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (ABSLParser.Equals_ - 37)) | (1 << (ABSLParser.NotEquals - 37)) | (1 << (ABSLParser.IdentityEquals - 37)) | (1 << (ABSLParser.IdentityNotEquals - 37)))) !== 0))) {
            this._errHandler.recoverInline(this);
          } else {
                    	this._errHandler.reportMatch(this);
            this.consume();
          }
          this.state = 856;
          this.singleExpression(20);
          break;

        case 10:
          localctx = new BitAndExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
          this.pushNewRecursionContext(localctx, _startState, ABSLParser.RULE_singleExpression);
          this.state = 857;
          if (!( this.precpred(this._ctx, 18))) {
            throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 18)");
          }
          this.state = 858;
          this.match(ABSLParser.BitAnd);
          this.state = 859;
          this.singleExpression(19);
          break;

        case 11:
          localctx = new BitXOrExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
          this.pushNewRecursionContext(localctx, _startState, ABSLParser.RULE_singleExpression);
          this.state = 860;
          if (!( this.precpred(this._ctx, 17))) {
            throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 17)");
          }
          this.state = 861;
          this.match(ABSLParser.BitXOr);
          this.state = 862;
          this.singleExpression(18);
          break;

        case 12:
          localctx = new BitOrExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
          this.pushNewRecursionContext(localctx, _startState, ABSLParser.RULE_singleExpression);
          this.state = 863;
          if (!( this.precpred(this._ctx, 16))) {
            throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
          }
          this.state = 864;
          this.match(ABSLParser.BitOr);
          this.state = 865;
          this.singleExpression(17);
          break;

        case 13:
          localctx = new LogicalAndExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
          this.pushNewRecursionContext(localctx, _startState, ABSLParser.RULE_singleExpression);
          this.state = 866;
          if (!( this.precpred(this._ctx, 15))) {
            throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
          }
          this.state = 867;
          this.match(ABSLParser.And);
          this.state = 868;
          this.singleExpression(16);
          break;

        case 14:
          localctx = new LogicalOrExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
          this.pushNewRecursionContext(localctx, _startState, ABSLParser.RULE_singleExpression);
          this.state = 869;
          if (!( this.precpred(this._ctx, 14))) {
            throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
          }
          this.state = 870;
          this.match(ABSLParser.Or);
          this.state = 871;
          this.singleExpression(15);
          break;

        case 15:
          localctx = new TernaryExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
          this.pushNewRecursionContext(localctx, _startState, ABSLParser.RULE_singleExpression);
          this.state = 872;
          if (!( this.precpred(this._ctx, 13))) {
            throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
          }
          this.state = 873;
          this.match(ABSLParser.QuestionMark);
          this.state = 874;
          this.singleExpression(0);
          this.state = 875;
          this.match(ABSLParser.Colon);
          this.state = 876;
          this.singleExpression(14);
          break;

        case 16:
          localctx = new AssignmentExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
          this.pushNewRecursionContext(localctx, _startState, ABSLParser.RULE_singleExpression);
          this.state = 878;
          if (!( this.precpred(this._ctx, 12))) {
            throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
          }
          this.state = 879;
          this.match(ABSLParser.Assign);
          this.state = 880;
          this.singleExpression(12);
          break;

        case 17:
          localctx = new AssignmentOperatorExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
          this.pushNewRecursionContext(localctx, _startState, ABSLParser.RULE_singleExpression);
          this.state = 881;
          if (!( this.precpred(this._ctx, 11))) {
            throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
          }
          this.state = 882;
          this.assignmentOperator();
          this.state = 883;
          this.singleExpression(11);
          break;

        case 18:
          localctx = new MemberIndexExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
          this.pushNewRecursionContext(localctx, _startState, ABSLParser.RULE_singleExpression);
          this.state = 885;
          if (!( this.precpred(this._ctx, 44))) {
            throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 44)");
          }
          this.state = 886;
          this.match(ABSLParser.OpenBracket);
          this.state = 887;
          this.expressionSequence();
          this.state = 888;
          this.match(ABSLParser.CloseBracket);
          break;

        case 19:
          localctx = new MemberDotExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
          this.pushNewRecursionContext(localctx, _startState, ABSLParser.RULE_singleExpression);
          this.state = 890;
          if (!( this.precpred(this._ctx, 43))) {
            throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 43)");
          }
          this.state = 892;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if(_la === ABSLParser.QuestionMark) {
            this.state = 891;
            this.match(ABSLParser.QuestionMark);
          }

          this.state = 894;
          this.match(ABSLParser.Dot);
          this.state = 896;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if(_la === ABSLParser.Hashtag) {
            this.state = 895;
            this.match(ABSLParser.Hashtag);
          }

          this.state = 898;
          this.identifierName();
          break;

        case 20:
          localctx = new ArgumentsExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
          this.pushNewRecursionContext(localctx, _startState, ABSLParser.RULE_singleExpression);
          this.state = 899;
          if (!( this.precpred(this._ctx, 42))) {
            throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 42)");
          }
          this.state = 900;
          this.arguments();
          break;

        case 21:
          localctx = new PostIncrementExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
          this.pushNewRecursionContext(localctx, _startState, ABSLParser.RULE_singleExpression);
          this.state = 901;
          if (!( this.precpred(this._ctx, 39))) {
            throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 39)");
          }
          this.state = 902;
          this.match(ABSLParser.PlusPlus);
          break;

        case 22:
          localctx = new PostDecreaseExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
          this.pushNewRecursionContext(localctx, _startState, ABSLParser.RULE_singleExpression);
          this.state = 903;
          if (!( this.precpred(this._ctx, 38))) {
            throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 38)");
          }
          this.state = 904;
          this.match(ABSLParser.MinusMinus);
          break;

        case 23:
          localctx = new TemplateStringExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
          this.pushNewRecursionContext(localctx, _startState, ABSLParser.RULE_singleExpression);
          this.state = 905;
          if (!( this.precpred(this._ctx, 9))) {
            throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
          }
          this.state = 906;
          this.match(ABSLParser.TemplateStringLiteral);
          break;

        }
      }
      this.state = 911;
      this._errHandler.sync(this);
      _alt = this._interp.adaptivePredict(this._input, 104, this._ctx);
    }

  } catch( error) {
    if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
  } finally {
    this.unrollRecursionContexts(_parentctx);
  }
  return localctx;
};


function AssignableContext(parser, parent, invokingState) {
  if(parent === undefined) {
	    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = ABSLParser.RULE_assignable;
  return this;
}

AssignableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignableContext.prototype.constructor = AssignableContext;

AssignableContext.prototype.Identifier = function() {
  return this.getToken(ABSLParser.Identifier, 0);
};

AssignableContext.prototype.arrayLiteral = function() {
  return this.getTypedRuleContext(ArrayLiteralContext, 0);
};

AssignableContext.prototype.objectLiteral = function() {
  return this.getTypedRuleContext(ObjectLiteralContext, 0);
};

AssignableContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterAssignable(this);
  }
};

AssignableContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitAssignable(this);
  }
};

AssignableContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitAssignable(this);
  } else {
    return visitor.visitChildren(this);
  }
};




ABSLParser.AssignableContext = AssignableContext;

ABSLParser.prototype.assignable = function() {

  var localctx = new AssignableContext(this, this._ctx, this.state);
  this.enterRule(localctx, 120, ABSLParser.RULE_assignable);
  try {
    this.state = 915;
    this._errHandler.sync(this);
    switch(this._input.LA(1)) {
    case ABSLParser.Identifier:
      this.enterOuterAlt(localctx, 1);
      this.state = 912;
      this.match(ABSLParser.Identifier);
      break;
    case ABSLParser.OpenBracket:
      this.enterOuterAlt(localctx, 2);
      this.state = 913;
      this.arrayLiteral();
      break;
    case ABSLParser.OpenBrace:
      this.enterOuterAlt(localctx, 3);
      this.state = 914;
      this.objectLiteral();
      break;
    default:
      throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
  } finally {
    this.exitRule();
  }
  return localctx;
};


function AnoymousFunctionContext(parser, parent, invokingState) {
  if(parent === undefined) {
	    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = ABSLParser.RULE_anoymousFunction;
  return this;
}

AnoymousFunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnoymousFunctionContext.prototype.constructor = AnoymousFunctionContext;



AnoymousFunctionContext.prototype.copyFrom = function(ctx) {
  antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function AnoymousFunctionDeclContext(parser, ctx) {
  AnoymousFunctionContext.call(this, parser);
  AnoymousFunctionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

AnoymousFunctionDeclContext.prototype = Object.create(AnoymousFunctionContext.prototype);
AnoymousFunctionDeclContext.prototype.constructor = AnoymousFunctionDeclContext;

ABSLParser.AnoymousFunctionDeclContext = AnoymousFunctionDeclContext;

AnoymousFunctionDeclContext.prototype.Function = function() {
  return this.getToken(ABSLParser.Function, 0);
};

AnoymousFunctionDeclContext.prototype.OpenParen = function() {
  return this.getToken(ABSLParser.OpenParen, 0);
};

AnoymousFunctionDeclContext.prototype.CloseParen = function() {
  return this.getToken(ABSLParser.CloseParen, 0);
};

AnoymousFunctionDeclContext.prototype.OpenBrace = function() {
  return this.getToken(ABSLParser.OpenBrace, 0);
};

AnoymousFunctionDeclContext.prototype.functionBody = function() {
  return this.getTypedRuleContext(FunctionBodyContext, 0);
};

AnoymousFunctionDeclContext.prototype.CloseBrace = function() {
  return this.getToken(ABSLParser.CloseBrace, 0);
};

AnoymousFunctionDeclContext.prototype.Async = function() {
  return this.getToken(ABSLParser.Async, 0);
};

AnoymousFunctionDeclContext.prototype.Multiply = function() {
  return this.getToken(ABSLParser.Multiply, 0);
};

AnoymousFunctionDeclContext.prototype.formalParameterList = function() {
  return this.getTypedRuleContext(FormalParameterListContext, 0);
};
AnoymousFunctionDeclContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterAnoymousFunctionDecl(this);
  }
};

AnoymousFunctionDeclContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitAnoymousFunctionDecl(this);
  }
};

AnoymousFunctionDeclContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitAnoymousFunctionDecl(this);
  } else {
    return visitor.visitChildren(this);
  }
};


function ArrowFunctionContext(parser, ctx) {
  AnoymousFunctionContext.call(this, parser);
  AnoymousFunctionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

ArrowFunctionContext.prototype = Object.create(AnoymousFunctionContext.prototype);
ArrowFunctionContext.prototype.constructor = ArrowFunctionContext;

ABSLParser.ArrowFunctionContext = ArrowFunctionContext;

ArrowFunctionContext.prototype.arrowFunctionParameters = function() {
  return this.getTypedRuleContext(ArrowFunctionParametersContext, 0);
};

ArrowFunctionContext.prototype.ARROW = function() {
  return this.getToken(ABSLParser.ARROW, 0);
};

ArrowFunctionContext.prototype.arrowFunctionBody = function() {
  return this.getTypedRuleContext(ArrowFunctionBodyContext, 0);
};

ArrowFunctionContext.prototype.Async = function() {
  return this.getToken(ABSLParser.Async, 0);
};
ArrowFunctionContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterArrowFunction(this);
  }
};

ArrowFunctionContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitArrowFunction(this);
  }
};

ArrowFunctionContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitArrowFunction(this);
  } else {
    return visitor.visitChildren(this);
  }
};


function FunctionDeclContext(parser, ctx) {
  AnoymousFunctionContext.call(this, parser);
  AnoymousFunctionContext.prototype.copyFrom.call(this, ctx);
  return this;
}

FunctionDeclContext.prototype = Object.create(AnoymousFunctionContext.prototype);
FunctionDeclContext.prototype.constructor = FunctionDeclContext;

ABSLParser.FunctionDeclContext = FunctionDeclContext;

FunctionDeclContext.prototype.functionDeclaration = function() {
  return this.getTypedRuleContext(FunctionDeclarationContext, 0);
};
FunctionDeclContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterFunctionDecl(this);
  }
};

FunctionDeclContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitFunctionDecl(this);
  }
};

FunctionDeclContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitFunctionDecl(this);
  } else {
    return visitor.visitChildren(this);
  }
};



ABSLParser.AnoymousFunctionContext = AnoymousFunctionContext;

ABSLParser.prototype.anoymousFunction = function() {

  var localctx = new AnoymousFunctionContext(this, this._ctx, this.state);
  this.enterRule(localctx, 122, ABSLParser.RULE_anoymousFunction);
  var _la = 0; // Token type
  try {
    this.state = 941;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 110, this._ctx);
    switch(la_) {
    case 1:
      localctx = new FunctionDeclContext(this, localctx);
      this.enterOuterAlt(localctx, 1);
      this.state = 917;
      this.functionDeclaration();
      break;

    case 2:
      localctx = new AnoymousFunctionDeclContext(this, localctx);
      this.enterOuterAlt(localctx, 2);
      this.state = 919;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if(_la === ABSLParser.Async) {
        this.state = 918;
        this.match(ABSLParser.Async);
      }

      this.state = 921;
      this.match(ABSLParser.Function);
      this.state = 923;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if(_la === ABSLParser.Multiply) {
        this.state = 922;
        this.match(ABSLParser.Multiply);
      }

      this.state = 925;
      this.match(ABSLParser.OpenParen);
      this.state = 927;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ABSLParser.OpenBracket) | (1 << ABSLParser.OpenBrace) | (1 << ABSLParser.Ellipsis))) !== 0) || _la === ABSLParser.Identifier) {
        this.state = 926;
        this.formalParameterList();
      }

      this.state = 929;
      this.match(ABSLParser.CloseParen);
      this.state = 930;
      this.match(ABSLParser.OpenBrace);
      this.state = 931;
      this.functionBody();
      this.state = 932;
      this.match(ABSLParser.CloseBrace);
      break;

    case 3:
      localctx = new ArrowFunctionContext(this, localctx);
      this.enterOuterAlt(localctx, 3);
      this.state = 935;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if(_la === ABSLParser.Async) {
        this.state = 934;
        this.match(ABSLParser.Async);
      }

      this.state = 937;
      this.arrowFunctionParameters();
      this.state = 938;
      this.match(ABSLParser.ARROW);
      this.state = 939;
      this.arrowFunctionBody();
      break;

    }
  } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
  } finally {
    this.exitRule();
  }
  return localctx;
};


function ArrowFunctionParametersContext(parser, parent, invokingState) {
  if(parent === undefined) {
	    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = ABSLParser.RULE_arrowFunctionParameters;
  return this;
}

ArrowFunctionParametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrowFunctionParametersContext.prototype.constructor = ArrowFunctionParametersContext;

ArrowFunctionParametersContext.prototype.Identifier = function() {
  return this.getToken(ABSLParser.Identifier, 0);
};

ArrowFunctionParametersContext.prototype.OpenParen = function() {
  return this.getToken(ABSLParser.OpenParen, 0);
};

ArrowFunctionParametersContext.prototype.CloseParen = function() {
  return this.getToken(ABSLParser.CloseParen, 0);
};

ArrowFunctionParametersContext.prototype.formalParameterList = function() {
  return this.getTypedRuleContext(FormalParameterListContext, 0);
};

ArrowFunctionParametersContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterArrowFunctionParameters(this);
  }
};

ArrowFunctionParametersContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitArrowFunctionParameters(this);
  }
};

ArrowFunctionParametersContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitArrowFunctionParameters(this);
  } else {
    return visitor.visitChildren(this);
  }
};




ABSLParser.ArrowFunctionParametersContext = ArrowFunctionParametersContext;

ABSLParser.prototype.arrowFunctionParameters = function() {

  var localctx = new ArrowFunctionParametersContext(this, this._ctx, this.state);
  this.enterRule(localctx, 124, ABSLParser.RULE_arrowFunctionParameters);
  var _la = 0; // Token type
  try {
    this.state = 949;
    this._errHandler.sync(this);
    switch(this._input.LA(1)) {
    case ABSLParser.Identifier:
      this.enterOuterAlt(localctx, 1);
      this.state = 943;
      this.match(ABSLParser.Identifier);
      break;
    case ABSLParser.OpenParen:
      this.enterOuterAlt(localctx, 2);
      this.state = 944;
      this.match(ABSLParser.OpenParen);
      this.state = 946;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ABSLParser.OpenBracket) | (1 << ABSLParser.OpenBrace) | (1 << ABSLParser.Ellipsis))) !== 0) || _la === ABSLParser.Identifier) {
        this.state = 945;
        this.formalParameterList();
      }

      this.state = 948;
      this.match(ABSLParser.CloseParen);
      break;
    default:
      throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
  } finally {
    this.exitRule();
  }
  return localctx;
};


function ArrowFunctionBodyContext(parser, parent, invokingState) {
  if(parent === undefined) {
	    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = ABSLParser.RULE_arrowFunctionBody;
  return this;
}

ArrowFunctionBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrowFunctionBodyContext.prototype.constructor = ArrowFunctionBodyContext;

ArrowFunctionBodyContext.prototype.singleExpression = function() {
  return this.getTypedRuleContext(SingleExpressionContext, 0);
};

ArrowFunctionBodyContext.prototype.OpenBrace = function() {
  return this.getToken(ABSLParser.OpenBrace, 0);
};

ArrowFunctionBodyContext.prototype.functionBody = function() {
  return this.getTypedRuleContext(FunctionBodyContext, 0);
};

ArrowFunctionBodyContext.prototype.CloseBrace = function() {
  return this.getToken(ABSLParser.CloseBrace, 0);
};

ArrowFunctionBodyContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterArrowFunctionBody(this);
  }
};

ArrowFunctionBodyContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitArrowFunctionBody(this);
  }
};

ArrowFunctionBodyContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitArrowFunctionBody(this);
  } else {
    return visitor.visitChildren(this);
  }
};




ABSLParser.ArrowFunctionBodyContext = ArrowFunctionBodyContext;

ABSLParser.prototype.arrowFunctionBody = function() {

  var localctx = new ArrowFunctionBodyContext(this, this._ctx, this.state);
  this.enterRule(localctx, 126, ABSLParser.RULE_arrowFunctionBody);
  try {
    this.state = 956;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 113, this._ctx);
    switch(la_) {
    case 1:
      this.enterOuterAlt(localctx, 1);
      this.state = 951;
      this.singleExpression(0);
      break;

    case 2:
      this.enterOuterAlt(localctx, 2);
      this.state = 952;
      this.match(ABSLParser.OpenBrace);
      this.state = 953;
      this.functionBody();
      this.state = 954;
      this.match(ABSLParser.CloseBrace);
      break;

    }
  } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
  } finally {
    this.exitRule();
  }
  return localctx;
};


function AssignmentOperatorContext(parser, parent, invokingState) {
  if(parent === undefined) {
	    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = ABSLParser.RULE_assignmentOperator;
  return this;
}

AssignmentOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentOperatorContext.prototype.constructor = AssignmentOperatorContext;

AssignmentOperatorContext.prototype.MultiplyAssign = function() {
  return this.getToken(ABSLParser.MultiplyAssign, 0);
};

AssignmentOperatorContext.prototype.DivideAssign = function() {
  return this.getToken(ABSLParser.DivideAssign, 0);
};

AssignmentOperatorContext.prototype.ModulusAssign = function() {
  return this.getToken(ABSLParser.ModulusAssign, 0);
};

AssignmentOperatorContext.prototype.PlusAssign = function() {
  return this.getToken(ABSLParser.PlusAssign, 0);
};

AssignmentOperatorContext.prototype.MinusAssign = function() {
  return this.getToken(ABSLParser.MinusAssign, 0);
};

AssignmentOperatorContext.prototype.LeftShiftArithmeticAssign = function() {
  return this.getToken(ABSLParser.LeftShiftArithmeticAssign, 0);
};

AssignmentOperatorContext.prototype.RightShiftArithmeticAssign = function() {
  return this.getToken(ABSLParser.RightShiftArithmeticAssign, 0);
};

AssignmentOperatorContext.prototype.RightShiftLogicalAssign = function() {
  return this.getToken(ABSLParser.RightShiftLogicalAssign, 0);
};

AssignmentOperatorContext.prototype.BitAndAssign = function() {
  return this.getToken(ABSLParser.BitAndAssign, 0);
};

AssignmentOperatorContext.prototype.BitXorAssign = function() {
  return this.getToken(ABSLParser.BitXorAssign, 0);
};

AssignmentOperatorContext.prototype.BitOrAssign = function() {
  return this.getToken(ABSLParser.BitOrAssign, 0);
};

AssignmentOperatorContext.prototype.PowerAssign = function() {
  return this.getToken(ABSLParser.PowerAssign, 0);
};

AssignmentOperatorContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterAssignmentOperator(this);
  }
};

AssignmentOperatorContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitAssignmentOperator(this);
  }
};

AssignmentOperatorContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitAssignmentOperator(this);
  } else {
    return visitor.visitChildren(this);
  }
};




ABSLParser.AssignmentOperatorContext = AssignmentOperatorContext;

ABSLParser.prototype.assignmentOperator = function() {

  var localctx = new AssignmentOperatorContext(this, this._ctx, this.state);
  this.enterRule(localctx, 128, ABSLParser.RULE_assignmentOperator);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 958;
    _la = this._input.LA(1);
    if(!(((((_la - 46)) & ~0x1f) == 0 && ((1 << (_la - 46)) & ((1 << (ABSLParser.MultiplyAssign - 46)) | (1 << (ABSLParser.DivideAssign - 46)) | (1 << (ABSLParser.ModulusAssign - 46)) | (1 << (ABSLParser.PlusAssign - 46)) | (1 << (ABSLParser.MinusAssign - 46)) | (1 << (ABSLParser.LeftShiftArithmeticAssign - 46)) | (1 << (ABSLParser.RightShiftArithmeticAssign - 46)) | (1 << (ABSLParser.RightShiftLogicalAssign - 46)) | (1 << (ABSLParser.BitAndAssign - 46)) | (1 << (ABSLParser.BitXorAssign - 46)) | (1 << (ABSLParser.BitOrAssign - 46)) | (1 << (ABSLParser.PowerAssign - 46)))) !== 0))) {
      this._errHandler.recoverInline(this);
    } else {
        	this._errHandler.reportMatch(this);
      this.consume();
    }
  } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
  } finally {
    this.exitRule();
  }
  return localctx;
};


function LiteralContext(parser, parent, invokingState) {
  if(parent === undefined) {
	    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = ABSLParser.RULE_literal;
  return this;
}

LiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LiteralContext.prototype.constructor = LiteralContext;

LiteralContext.prototype.NullLiteral = function() {
  return this.getToken(ABSLParser.NullLiteral, 0);
};

LiteralContext.prototype.BooleanLiteral = function() {
  return this.getToken(ABSLParser.BooleanLiteral, 0);
};

LiteralContext.prototype.StringLiteral = function() {
  return this.getToken(ABSLParser.StringLiteral, 0);
};

LiteralContext.prototype.TemplateStringLiteral = function() {
  return this.getToken(ABSLParser.TemplateStringLiteral, 0);
};

LiteralContext.prototype.RegularExpressionLiteral = function() {
  return this.getToken(ABSLParser.RegularExpressionLiteral, 0);
};

LiteralContext.prototype.numericLiteral = function() {
  return this.getTypedRuleContext(NumericLiteralContext, 0);
};

LiteralContext.prototype.bigintLiteral = function() {
  return this.getTypedRuleContext(BigintLiteralContext, 0);
};

LiteralContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterLiteral(this);
  }
};

LiteralContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitLiteral(this);
  }
};

LiteralContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitLiteral(this);
  } else {
    return visitor.visitChildren(this);
  }
};




ABSLParser.LiteralContext = LiteralContext;

ABSLParser.prototype.literal = function() {

  var localctx = new LiteralContext(this, this._ctx, this.state);
  this.enterRule(localctx, 130, ABSLParser.RULE_literal);
  try {
    this.state = 967;
    this._errHandler.sync(this);
    switch(this._input.LA(1)) {
    case ABSLParser.NullLiteral:
      this.enterOuterAlt(localctx, 1);
      this.state = 960;
      this.match(ABSLParser.NullLiteral);
      break;
    case ABSLParser.BooleanLiteral:
      this.enterOuterAlt(localctx, 2);
      this.state = 961;
      this.match(ABSLParser.BooleanLiteral);
      break;
    case ABSLParser.StringLiteral:
      this.enterOuterAlt(localctx, 3);
      this.state = 962;
      this.match(ABSLParser.StringLiteral);
      break;
    case ABSLParser.TemplateStringLiteral:
      this.enterOuterAlt(localctx, 4);
      this.state = 963;
      this.match(ABSLParser.TemplateStringLiteral);
      break;
    case ABSLParser.RegularExpressionLiteral:
      this.enterOuterAlt(localctx, 5);
      this.state = 964;
      this.match(ABSLParser.RegularExpressionLiteral);
      break;
    case ABSLParser.DecimalLiteral:
    case ABSLParser.HexIntegerLiteral:
    case ABSLParser.OctalIntegerLiteral:
    case ABSLParser.OctalIntegerLiteral2:
    case ABSLParser.BinaryIntegerLiteral:
      this.enterOuterAlt(localctx, 6);
      this.state = 965;
      this.numericLiteral();
      break;
    case ABSLParser.BigHexIntegerLiteral:
    case ABSLParser.BigOctalIntegerLiteral:
    case ABSLParser.BigBinaryIntegerLiteral:
    case ABSLParser.BigDecimalIntegerLiteral:
      this.enterOuterAlt(localctx, 7);
      this.state = 966;
      this.bigintLiteral();
      break;
    default:
      throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
  } finally {
    this.exitRule();
  }
  return localctx;
};


function NumericLiteralContext(parser, parent, invokingState) {
  if(parent === undefined) {
	    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = ABSLParser.RULE_numericLiteral;
  return this;
}

NumericLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NumericLiteralContext.prototype.constructor = NumericLiteralContext;

NumericLiteralContext.prototype.DecimalLiteral = function() {
  return this.getToken(ABSLParser.DecimalLiteral, 0);
};

NumericLiteralContext.prototype.HexIntegerLiteral = function() {
  return this.getToken(ABSLParser.HexIntegerLiteral, 0);
};

NumericLiteralContext.prototype.OctalIntegerLiteral = function() {
  return this.getToken(ABSLParser.OctalIntegerLiteral, 0);
};

NumericLiteralContext.prototype.OctalIntegerLiteral2 = function() {
  return this.getToken(ABSLParser.OctalIntegerLiteral2, 0);
};

NumericLiteralContext.prototype.BinaryIntegerLiteral = function() {
  return this.getToken(ABSLParser.BinaryIntegerLiteral, 0);
};

NumericLiteralContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterNumericLiteral(this);
  }
};

NumericLiteralContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitNumericLiteral(this);
  }
};

NumericLiteralContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitNumericLiteral(this);
  } else {
    return visitor.visitChildren(this);
  }
};




ABSLParser.NumericLiteralContext = NumericLiteralContext;

ABSLParser.prototype.numericLiteral = function() {

  var localctx = new NumericLiteralContext(this, this._ctx, this.state);
  this.enterRule(localctx, 132, ABSLParser.RULE_numericLiteral);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 969;
    _la = this._input.LA(1);
    if(!(((((_la - 61)) & ~0x1f) == 0 && ((1 << (_la - 61)) & ((1 << (ABSLParser.DecimalLiteral - 61)) | (1 << (ABSLParser.HexIntegerLiteral - 61)) | (1 << (ABSLParser.OctalIntegerLiteral - 61)) | (1 << (ABSLParser.OctalIntegerLiteral2 - 61)) | (1 << (ABSLParser.BinaryIntegerLiteral - 61)))) !== 0))) {
      this._errHandler.recoverInline(this);
    } else {
        	this._errHandler.reportMatch(this);
      this.consume();
    }
  } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
  } finally {
    this.exitRule();
  }
  return localctx;
};


function BigintLiteralContext(parser, parent, invokingState) {
  if(parent === undefined) {
	    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = ABSLParser.RULE_bigintLiteral;
  return this;
}

BigintLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BigintLiteralContext.prototype.constructor = BigintLiteralContext;

BigintLiteralContext.prototype.BigDecimalIntegerLiteral = function() {
  return this.getToken(ABSLParser.BigDecimalIntegerLiteral, 0);
};

BigintLiteralContext.prototype.BigHexIntegerLiteral = function() {
  return this.getToken(ABSLParser.BigHexIntegerLiteral, 0);
};

BigintLiteralContext.prototype.BigOctalIntegerLiteral = function() {
  return this.getToken(ABSLParser.BigOctalIntegerLiteral, 0);
};

BigintLiteralContext.prototype.BigBinaryIntegerLiteral = function() {
  return this.getToken(ABSLParser.BigBinaryIntegerLiteral, 0);
};

BigintLiteralContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterBigintLiteral(this);
  }
};

BigintLiteralContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitBigintLiteral(this);
  }
};

BigintLiteralContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitBigintLiteral(this);
  } else {
    return visitor.visitChildren(this);
  }
};




ABSLParser.BigintLiteralContext = BigintLiteralContext;

ABSLParser.prototype.bigintLiteral = function() {

  var localctx = new BigintLiteralContext(this, this._ctx, this.state);
  this.enterRule(localctx, 134, ABSLParser.RULE_bigintLiteral);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 971;
    _la = this._input.LA(1);
    if(!(((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (ABSLParser.BigHexIntegerLiteral - 66)) | (1 << (ABSLParser.BigOctalIntegerLiteral - 66)) | (1 << (ABSLParser.BigBinaryIntegerLiteral - 66)) | (1 << (ABSLParser.BigDecimalIntegerLiteral - 66)))) !== 0))) {
      this._errHandler.recoverInline(this);
    } else {
        	this._errHandler.reportMatch(this);
      this.consume();
    }
  } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
  } finally {
    this.exitRule();
  }
  return localctx;
};


function IdentifierNameContext(parser, parent, invokingState) {
  if(parent === undefined) {
	    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = ABSLParser.RULE_identifierName;
  return this;
}

IdentifierNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierNameContext.prototype.constructor = IdentifierNameContext;

IdentifierNameContext.prototype.Identifier = function() {
  return this.getToken(ABSLParser.Identifier, 0);
};

IdentifierNameContext.prototype.reservedWord = function() {
  return this.getTypedRuleContext(ReservedWordContext, 0);
};

IdentifierNameContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterIdentifierName(this);
  }
};

IdentifierNameContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitIdentifierName(this);
  }
};

IdentifierNameContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitIdentifierName(this);
  } else {
    return visitor.visitChildren(this);
  }
};




ABSLParser.IdentifierNameContext = IdentifierNameContext;

ABSLParser.prototype.identifierName = function() {

  var localctx = new IdentifierNameContext(this, this._ctx, this.state);
  this.enterRule(localctx, 136, ABSLParser.RULE_identifierName);
  try {
    this.state = 975;
    this._errHandler.sync(this);
    switch(this._input.LA(1)) {
    case ABSLParser.Identifier:
      this.enterOuterAlt(localctx, 1);
      this.state = 973;
      this.match(ABSLParser.Identifier);
      break;
    case ABSLParser.NullLiteral:
    case ABSLParser.BooleanLiteral:
    case ABSLParser.Break:
    case ABSLParser.Do:
    case ABSLParser.Instanceof:
    case ABSLParser.Typeof:
    case ABSLParser.Case:
    case ABSLParser.Else:
    case ABSLParser.New:
    case ABSLParser.Var:
    case ABSLParser.Catch:
    case ABSLParser.Finally:
    case ABSLParser.Return:
    case ABSLParser.Void:
    case ABSLParser.Continue:
    case ABSLParser.For:
    case ABSLParser.Switch:
    case ABSLParser.While:
    case ABSLParser.Debugger:
    case ABSLParser.Function:
    case ABSLParser.This:
    case ABSLParser.With:
    case ABSLParser.Default:
    case ABSLParser.If:
    case ABSLParser.Throw:
    case ABSLParser.Delete:
    case ABSLParser.In:
    case ABSLParser.Try:
    case ABSLParser.As:
    case ABSLParser.From:
    case ABSLParser.Class:
    case ABSLParser.Enum:
    case ABSLParser.Extends:
    case ABSLParser.Super:
    case ABSLParser.Const:
    case ABSLParser.Export:
    case ABSLParser.Import:
    case ABSLParser.Async:
    case ABSLParser.Await:
    case ABSLParser.Implements:
    case ABSLParser.Let:
    case ABSLParser.Private:
    case ABSLParser.Public:
    case ABSLParser.Interface:
    case ABSLParser.Package:
    case ABSLParser.Protected:
    case ABSLParser.Static:
    case ABSLParser.Yield:
      this.enterOuterAlt(localctx, 2);
      this.state = 974;
      this.reservedWord();
      break;
    default:
      throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
  } finally {
    this.exitRule();
  }
  return localctx;
};


function ReservedWordContext(parser, parent, invokingState) {
  if(parent === undefined) {
	    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = ABSLParser.RULE_reservedWord;
  return this;
}

ReservedWordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReservedWordContext.prototype.constructor = ReservedWordContext;

ReservedWordContext.prototype.keyword = function() {
  return this.getTypedRuleContext(KeywordContext, 0);
};

ReservedWordContext.prototype.NullLiteral = function() {
  return this.getToken(ABSLParser.NullLiteral, 0);
};

ReservedWordContext.prototype.BooleanLiteral = function() {
  return this.getToken(ABSLParser.BooleanLiteral, 0);
};

ReservedWordContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterReservedWord(this);
  }
};

ReservedWordContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitReservedWord(this);
  }
};

ReservedWordContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitReservedWord(this);
  } else {
    return visitor.visitChildren(this);
  }
};




ABSLParser.ReservedWordContext = ReservedWordContext;

ABSLParser.prototype.reservedWord = function() {

  var localctx = new ReservedWordContext(this, this._ctx, this.state);
  this.enterRule(localctx, 138, ABSLParser.RULE_reservedWord);
  try {
    this.state = 980;
    this._errHandler.sync(this);
    switch(this._input.LA(1)) {
    case ABSLParser.Break:
    case ABSLParser.Do:
    case ABSLParser.Instanceof:
    case ABSLParser.Typeof:
    case ABSLParser.Case:
    case ABSLParser.Else:
    case ABSLParser.New:
    case ABSLParser.Var:
    case ABSLParser.Catch:
    case ABSLParser.Finally:
    case ABSLParser.Return:
    case ABSLParser.Void:
    case ABSLParser.Continue:
    case ABSLParser.For:
    case ABSLParser.Switch:
    case ABSLParser.While:
    case ABSLParser.Debugger:
    case ABSLParser.Function:
    case ABSLParser.This:
    case ABSLParser.With:
    case ABSLParser.Default:
    case ABSLParser.If:
    case ABSLParser.Throw:
    case ABSLParser.Delete:
    case ABSLParser.In:
    case ABSLParser.Try:
    case ABSLParser.As:
    case ABSLParser.From:
    case ABSLParser.Class:
    case ABSLParser.Enum:
    case ABSLParser.Extends:
    case ABSLParser.Super:
    case ABSLParser.Const:
    case ABSLParser.Export:
    case ABSLParser.Import:
    case ABSLParser.Async:
    case ABSLParser.Await:
    case ABSLParser.Implements:
    case ABSLParser.Let:
    case ABSLParser.Private:
    case ABSLParser.Public:
    case ABSLParser.Interface:
    case ABSLParser.Package:
    case ABSLParser.Protected:
    case ABSLParser.Static:
    case ABSLParser.Yield:
      this.enterOuterAlt(localctx, 1);
      this.state = 977;
      this.keyword();
      break;
    case ABSLParser.NullLiteral:
      this.enterOuterAlt(localctx, 2);
      this.state = 978;
      this.match(ABSLParser.NullLiteral);
      break;
    case ABSLParser.BooleanLiteral:
      this.enterOuterAlt(localctx, 3);
      this.state = 979;
      this.match(ABSLParser.BooleanLiteral);
      break;
    default:
      throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
  } finally {
    this.exitRule();
  }
  return localctx;
};


function KeywordContext(parser, parent, invokingState) {
  if(parent === undefined) {
	    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = ABSLParser.RULE_keyword;
  return this;
}

KeywordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KeywordContext.prototype.constructor = KeywordContext;

KeywordContext.prototype.Break = function() {
  return this.getToken(ABSLParser.Break, 0);
};

KeywordContext.prototype.Do = function() {
  return this.getToken(ABSLParser.Do, 0);
};

KeywordContext.prototype.Instanceof = function() {
  return this.getToken(ABSLParser.Instanceof, 0);
};

KeywordContext.prototype.Typeof = function() {
  return this.getToken(ABSLParser.Typeof, 0);
};

KeywordContext.prototype.Case = function() {
  return this.getToken(ABSLParser.Case, 0);
};

KeywordContext.prototype.Else = function() {
  return this.getToken(ABSLParser.Else, 0);
};

KeywordContext.prototype.New = function() {
  return this.getToken(ABSLParser.New, 0);
};

KeywordContext.prototype.Var = function() {
  return this.getToken(ABSLParser.Var, 0);
};

KeywordContext.prototype.Catch = function() {
  return this.getToken(ABSLParser.Catch, 0);
};

KeywordContext.prototype.Finally = function() {
  return this.getToken(ABSLParser.Finally, 0);
};

KeywordContext.prototype.Return = function() {
  return this.getToken(ABSLParser.Return, 0);
};

KeywordContext.prototype.Void = function() {
  return this.getToken(ABSLParser.Void, 0);
};

KeywordContext.prototype.Continue = function() {
  return this.getToken(ABSLParser.Continue, 0);
};

KeywordContext.prototype.For = function() {
  return this.getToken(ABSLParser.For, 0);
};

KeywordContext.prototype.Switch = function() {
  return this.getToken(ABSLParser.Switch, 0);
};

KeywordContext.prototype.While = function() {
  return this.getToken(ABSLParser.While, 0);
};

KeywordContext.prototype.Debugger = function() {
  return this.getToken(ABSLParser.Debugger, 0);
};

KeywordContext.prototype.Function = function() {
  return this.getToken(ABSLParser.Function, 0);
};

KeywordContext.prototype.This = function() {
  return this.getToken(ABSLParser.This, 0);
};

KeywordContext.prototype.With = function() {
  return this.getToken(ABSLParser.With, 0);
};

KeywordContext.prototype.Default = function() {
  return this.getToken(ABSLParser.Default, 0);
};

KeywordContext.prototype.If = function() {
  return this.getToken(ABSLParser.If, 0);
};

KeywordContext.prototype.Throw = function() {
  return this.getToken(ABSLParser.Throw, 0);
};

KeywordContext.prototype.Delete = function() {
  return this.getToken(ABSLParser.Delete, 0);
};

KeywordContext.prototype.In = function() {
  return this.getToken(ABSLParser.In, 0);
};

KeywordContext.prototype.Try = function() {
  return this.getToken(ABSLParser.Try, 0);
};

KeywordContext.prototype.Class = function() {
  return this.getToken(ABSLParser.Class, 0);
};

KeywordContext.prototype.Enum = function() {
  return this.getToken(ABSLParser.Enum, 0);
};

KeywordContext.prototype.Extends = function() {
  return this.getToken(ABSLParser.Extends, 0);
};

KeywordContext.prototype.Super = function() {
  return this.getToken(ABSLParser.Super, 0);
};

KeywordContext.prototype.Const = function() {
  return this.getToken(ABSLParser.Const, 0);
};

KeywordContext.prototype.Export = function() {
  return this.getToken(ABSLParser.Export, 0);
};

KeywordContext.prototype.Import = function() {
  return this.getToken(ABSLParser.Import, 0);
};

KeywordContext.prototype.Implements = function() {
  return this.getToken(ABSLParser.Implements, 0);
};

KeywordContext.prototype.Let = function() {
  return this.getToken(ABSLParser.Let, 0);
};

KeywordContext.prototype.Private = function() {
  return this.getToken(ABSLParser.Private, 0);
};

KeywordContext.prototype.Public = function() {
  return this.getToken(ABSLParser.Public, 0);
};

KeywordContext.prototype.Interface = function() {
  return this.getToken(ABSLParser.Interface, 0);
};

KeywordContext.prototype.Package = function() {
  return this.getToken(ABSLParser.Package, 0);
};

KeywordContext.prototype.Protected = function() {
  return this.getToken(ABSLParser.Protected, 0);
};

KeywordContext.prototype.Static = function() {
  return this.getToken(ABSLParser.Static, 0);
};

KeywordContext.prototype.Yield = function() {
  return this.getToken(ABSLParser.Yield, 0);
};

KeywordContext.prototype.Async = function() {
  return this.getToken(ABSLParser.Async, 0);
};

KeywordContext.prototype.Await = function() {
  return this.getToken(ABSLParser.Await, 0);
};

KeywordContext.prototype.From = function() {
  return this.getToken(ABSLParser.From, 0);
};

KeywordContext.prototype.As = function() {
  return this.getToken(ABSLParser.As, 0);
};

KeywordContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterKeyword(this);
  }
};

KeywordContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitKeyword(this);
  }
};

KeywordContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitKeyword(this);
  } else {
    return visitor.visitChildren(this);
  }
};




ABSLParser.KeywordContext = KeywordContext;

ABSLParser.prototype.keyword = function() {

  var localctx = new KeywordContext(this, this._ctx, this.state);
  this.enterRule(localctx, 140, ABSLParser.RULE_keyword);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 982;
    _la = this._input.LA(1);
    if(!(((((_la - 70)) & ~0x1f) == 0 && ((1 << (_la - 70)) & ((1 << (ABSLParser.Break - 70)) | (1 << (ABSLParser.Do - 70)) | (1 << (ABSLParser.Instanceof - 70)) | (1 << (ABSLParser.Typeof - 70)) | (1 << (ABSLParser.Case - 70)) | (1 << (ABSLParser.Else - 70)) | (1 << (ABSLParser.New - 70)) | (1 << (ABSLParser.Var - 70)) | (1 << (ABSLParser.Catch - 70)) | (1 << (ABSLParser.Finally - 70)) | (1 << (ABSLParser.Return - 70)) | (1 << (ABSLParser.Void - 70)) | (1 << (ABSLParser.Continue - 70)) | (1 << (ABSLParser.For - 70)) | (1 << (ABSLParser.Switch - 70)) | (1 << (ABSLParser.While - 70)) | (1 << (ABSLParser.Debugger - 70)) | (1 << (ABSLParser.Function - 70)) | (1 << (ABSLParser.This - 70)) | (1 << (ABSLParser.With - 70)) | (1 << (ABSLParser.Default - 70)) | (1 << (ABSLParser.If - 70)) | (1 << (ABSLParser.Throw - 70)) | (1 << (ABSLParser.Delete - 70)) | (1 << (ABSLParser.In - 70)) | (1 << (ABSLParser.Try - 70)) | (1 << (ABSLParser.As - 70)) | (1 << (ABSLParser.From - 70)))) !== 0) || ((((_la - 102)) & ~0x1f) == 0 && ((1 << (_la - 102)) & ((1 << (ABSLParser.Class - 102)) | (1 << (ABSLParser.Enum - 102)) | (1 << (ABSLParser.Extends - 102)) | (1 << (ABSLParser.Super - 102)) | (1 << (ABSLParser.Const - 102)) | (1 << (ABSLParser.Export - 102)) | (1 << (ABSLParser.Import - 102)) | (1 << (ABSLParser.Async - 102)) | (1 << (ABSLParser.Await - 102)) | (1 << (ABSLParser.Implements - 102)) | (1 << (ABSLParser.Let - 102)) | (1 << (ABSLParser.Private - 102)) | (1 << (ABSLParser.Public - 102)) | (1 << (ABSLParser.Interface - 102)) | (1 << (ABSLParser.Package - 102)) | (1 << (ABSLParser.Protected - 102)) | (1 << (ABSLParser.Static - 102)) | (1 << (ABSLParser.Yield - 102)))) !== 0))) {
      this._errHandler.recoverInline(this);
    } else {
        	this._errHandler.reportMatch(this);
      this.consume();
    }
  } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
  } finally {
    this.exitRule();
  }
  return localctx;
};


function GetterContext(parser, parent, invokingState) {
  if(parent === undefined) {
	    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = ABSLParser.RULE_getter;
  return this;
}

GetterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GetterContext.prototype.constructor = GetterContext;

GetterContext.prototype.Identifier = function() {
  return this.getToken(ABSLParser.Identifier, 0);
};

GetterContext.prototype.propertyName = function() {
  return this.getTypedRuleContext(PropertyNameContext, 0);
};

GetterContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterGetter(this);
  }
};

GetterContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitGetter(this);
  }
};

GetterContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitGetter(this);
  } else {
    return visitor.visitChildren(this);
  }
};




ABSLParser.GetterContext = GetterContext;

ABSLParser.prototype.getter = function() {

  var localctx = new GetterContext(this, this._ctx, this.state);
  this.enterRule(localctx, 142, ABSLParser.RULE_getter);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 984;
    this.match(ABSLParser.Identifier);
    this.state = 985;
    this.propertyName();
  } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
  } finally {
    this.exitRule();
  }
  return localctx;
};


function SetterContext(parser, parent, invokingState) {
  if(parent === undefined) {
	    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = ABSLParser.RULE_setter;
  return this;
}

SetterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SetterContext.prototype.constructor = SetterContext;

SetterContext.prototype.Identifier = function() {
  return this.getToken(ABSLParser.Identifier, 0);
};

SetterContext.prototype.propertyName = function() {
  return this.getTypedRuleContext(PropertyNameContext, 0);
};

SetterContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterSetter(this);
  }
};

SetterContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitSetter(this);
  }
};

SetterContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitSetter(this);
  } else {
    return visitor.visitChildren(this);
  }
};




ABSLParser.SetterContext = SetterContext;

ABSLParser.prototype.setter = function() {

  var localctx = new SetterContext(this, this._ctx, this.state);
  this.enterRule(localctx, 144, ABSLParser.RULE_setter);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 987;
    this.match(ABSLParser.Identifier);
    this.state = 988;
    this.propertyName();
  } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
  } finally {
    this.exitRule();
  }
  return localctx;
};


function EosContext(parser, parent, invokingState) {
  if(parent === undefined) {
	    parent = null;
  }
  if(invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = ABSLParser.RULE_eos;
  return this;
}

EosContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EosContext.prototype.constructor = EosContext;

EosContext.prototype.SemiColon = function() {
  return this.getToken(ABSLParser.SemiColon, 0);
};

EosContext.prototype.EOF = function() {
  return this.getToken(ABSLParser.EOF, 0);
};

EosContext.prototype.enterRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.enterEos(this);
  }
};

EosContext.prototype.exitRule = function(listener) {
  if(listener instanceof ABSLParserListener ) {
    listener.exitEos(this);
  }
};

EosContext.prototype.accept = function(visitor) {
  if ( visitor instanceof ABSLParserVisitor ) {
    return visitor.visitEos(this);
  } else {
    return visitor.visitChildren(this);
  }
};




ABSLParser.EosContext = EosContext;

ABSLParser.prototype.eos = function() {

  var localctx = new EosContext(this, this._ctx, this.state);
  this.enterRule(localctx, 146, ABSLParser.RULE_eos);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 990;
    _la = this._input.LA(1);
    if(!(_la === ABSLParser.EOF || _la === ABSLParser.SemiColon)) {
      this._errHandler.recoverInline(this);
    } else {
        	this._errHandler.reportMatch(this);
      this.consume();
    }
  } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
  } finally {
    this.exitRule();
  }
  return localctx;
};


ABSLParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
  switch(ruleIndex) {
  case 59:
    return this.singleExpression_sempred(localctx, predIndex);
  default:
    throw "No predicate with index:" + ruleIndex;
  }
};

ABSLParser.prototype.singleExpression_sempred = function(localctx, predIndex) {
  switch(predIndex) {
  case 0:
    return this.precpred(this._ctx, 27);
  case 1:
    return this.precpred(this._ctx, 26);
  case 2:
    return this.precpred(this._ctx, 25);
  case 3:
    return this.precpred(this._ctx, 24);
  case 4:
    return this.precpred(this._ctx, 23);
  case 5:
    return this.precpred(this._ctx, 22);
  case 6:
    return this.precpred(this._ctx, 21);
  case 7:
    return this.precpred(this._ctx, 20);
  case 8:
    return this.precpred(this._ctx, 19);
  case 9:
    return this.precpred(this._ctx, 18);
  case 10:
    return this.precpred(this._ctx, 17);
  case 11:
    return this.precpred(this._ctx, 16);
  case 12:
    return this.precpred(this._ctx, 15);
  case 13:
    return this.precpred(this._ctx, 14);
  case 14:
    return this.precpred(this._ctx, 13);
  case 15:
    return this.precpred(this._ctx, 12);
  case 16:
    return this.precpred(this._ctx, 11);
  case 17:
    return this.precpred(this._ctx, 44);
  case 18:
    return this.precpred(this._ctx, 43);
  case 19:
    return this.precpred(this._ctx, 42);
  case 20:
    return this.precpred(this._ctx, 39);
  case 21:
    return this.precpred(this._ctx, 38);
  case 22:
    return this.precpred(this._ctx, 9);
  default:
    throw "No predicate with index:" + predIndex;
  }
};


exports.ABSLParser = ABSLParser;
